// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/r-scheele/sqr/internal/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	db "github.com/r-scheele/sqr/internal/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ActivateAgreement mocks base method.
func (m *MockStore) ActivateAgreement(arg0 context.Context, arg1 int64) (db.RentalAgreement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateAgreement", arg0, arg1)
	ret0, _ := ret[0].(db.RentalAgreement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateAgreement indicates an expected call of ActivateAgreement.
func (mr *MockStoreMockRecorder) ActivateAgreement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateAgreement", reflect.TypeOf((*MockStore)(nil).ActivateAgreement), arg0, arg1)
}

// AddDisputeEvidence mocks base method.
func (m *MockStore) AddDisputeEvidence(arg0 context.Context, arg1 db.AddDisputeEvidenceParams) (db.DisputeCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDisputeEvidence", arg0, arg1)
	ret0, _ := ret[0].(db.DisputeCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDisputeEvidence indicates an expected call of AddDisputeEvidence.
func (mr *MockStoreMockRecorder) AddDisputeEvidence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDisputeEvidence", reflect.TypeOf((*MockStore)(nil).AddDisputeEvidence), arg0, arg1)
}

// AddResponseToRating mocks base method.
func (m *MockStore) AddResponseToRating(arg0 context.Context, arg1 db.AddResponseToRatingParams) (db.UserRating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResponseToRating", arg0, arg1)
	ret0, _ := ret[0].(db.UserRating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddResponseToRating indicates an expected call of AddResponseToRating.
func (mr *MockStoreMockRecorder) AddResponseToRating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResponseToRating", reflect.TypeOf((*MockStore)(nil).AddResponseToRating), arg0, arg1)
}

// ApproveInspectionAgent mocks base method.
func (m *MockStore) ApproveInspectionAgent(arg0 context.Context, arg1 db.ApproveInspectionAgentParams) (db.InspectionAgentProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveInspectionAgent", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionAgentProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveInspectionAgent indicates an expected call of ApproveInspectionAgent.
func (mr *MockStoreMockRecorder) ApproveInspectionAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveInspectionAgent", reflect.TypeOf((*MockStore)(nil).ApproveInspectionAgent), arg0, arg1)
}

// ApproveInspectionReport mocks base method.
func (m *MockStore) ApproveInspectionReport(arg0 context.Context, arg1 int64) (db.InspectionReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveInspectionReport", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveInspectionReport indicates an expected call of ApproveInspectionReport.
func (mr *MockStoreMockRecorder) ApproveInspectionReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveInspectionReport", reflect.TypeOf((*MockStore)(nil).ApproveInspectionReport), arg0, arg1)
}

// ApproveRentalApplication mocks base method.
func (m *MockStore) ApproveRentalApplication(arg0 context.Context, arg1 db.ApproveRentalApplicationParams) (db.RentalApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveRentalApplication", arg0, arg1)
	ret0, _ := ret[0].(db.RentalApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveRentalApplication indicates an expected call of ApproveRentalApplication.
func (mr *MockStoreMockRecorder) ApproveRentalApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveRentalApplication", reflect.TypeOf((*MockStore)(nil).ApproveRentalApplication), arg0, arg1)
}

// AssignAdminToDispute mocks base method.
func (m *MockStore) AssignAdminToDispute(arg0 context.Context, arg1 db.AssignAdminToDisputeParams) (db.DisputeCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignAdminToDispute", arg0, arg1)
	ret0, _ := ret[0].(db.DisputeCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignAdminToDispute indicates an expected call of AssignAdminToDispute.
func (mr *MockStoreMockRecorder) AssignAdminToDispute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignAdminToDispute", reflect.TypeOf((*MockStore)(nil).AssignAdminToDispute), arg0, arg1)
}

// AssignInspectionAgent mocks base method.
func (m *MockStore) AssignInspectionAgent(arg0 context.Context, arg1 db.AssignInspectionAgentParams) (db.InspectionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignInspectionAgent", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignInspectionAgent indicates an expected call of AssignInspectionAgent.
func (mr *MockStoreMockRecorder) AssignInspectionAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignInspectionAgent", reflect.TypeOf((*MockStore)(nil).AssignInspectionAgent), arg0, arg1)
}

// CancelInspection mocks base method.
func (m *MockStore) CancelInspection(arg0 context.Context, arg1 db.CancelInspectionParams) (db.InspectionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelInspection", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelInspection indicates an expected call of CancelInspection.
func (mr *MockStoreMockRecorder) CancelInspection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelInspection", reflect.TypeOf((*MockStore)(nil).CancelInspection), arg0, arg1)
}

// CancelPayment mocks base method.
func (m *MockStore) CancelPayment(arg0 context.Context, arg1 int64) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelPayment", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelPayment indicates an expected call of CancelPayment.
func (mr *MockStoreMockRecorder) CancelPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPayment", reflect.TypeOf((*MockStore)(nil).CancelPayment), arg0, arg1)
}

// CheckRatingExists mocks base method.
func (m *MockStore) CheckRatingExists(arg0 context.Context, arg1 db.CheckRatingExistsParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRatingExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRatingExists indicates an expected call of CheckRatingExists.
func (mr *MockStoreMockRecorder) CheckRatingExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRatingExists", reflect.TypeOf((*MockStore)(nil).CheckRatingExists), arg0, arg1)
}

// CheckSearchCached mocks base method.
func (m *MockStore) CheckSearchCached(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSearchCached", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSearchCached indicates an expected call of CheckSearchCached.
func (mr *MockStoreMockRecorder) CheckSearchCached(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSearchCached", reflect.TypeOf((*MockStore)(nil).CheckSearchCached), arg0, arg1)
}

// CheckSettingExists mocks base method.
func (m *MockStore) CheckSettingExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSettingExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSettingExists indicates an expected call of CheckSettingExists.
func (mr *MockStoreMockRecorder) CheckSettingExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSettingExists", reflect.TypeOf((*MockStore)(nil).CheckSettingExists), arg0, arg1)
}

// CheckTenantApplicationForProperty mocks base method.
func (m *MockStore) CheckTenantApplicationForProperty(arg0 context.Context, arg1 db.CheckTenantApplicationForPropertyParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTenantApplicationForProperty", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTenantApplicationForProperty indicates an expected call of CheckTenantApplicationForProperty.
func (mr *MockStoreMockRecorder) CheckTenantApplicationForProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTenantApplicationForProperty", reflect.TypeOf((*MockStore)(nil).CheckTenantApplicationForProperty), arg0, arg1)
}

// CleanupExpiredCache mocks base method.
func (m *MockStore) CleanupExpiredCache(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupExpiredCache", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupExpiredCache indicates an expected call of CleanupExpiredCache.
func (mr *MockStoreMockRecorder) CleanupExpiredCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupExpiredCache", reflect.TypeOf((*MockStore)(nil).CleanupExpiredCache), arg0)
}

// CleanupExpiredSessions mocks base method.
func (m *MockStore) CleanupExpiredSessions(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupExpiredSessions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupExpiredSessions indicates an expected call of CleanupExpiredSessions.
func (mr *MockStoreMockRecorder) CleanupExpiredSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupExpiredSessions", reflect.TypeOf((*MockStore)(nil).CleanupExpiredSessions), arg0)
}

// CleanupOldAuditLogs mocks base method.
func (m *MockStore) CleanupOldAuditLogs(arg0 context.Context, arg1 pgtype.Timestamptz) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupOldAuditLogs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupOldAuditLogs indicates an expected call of CleanupOldAuditLogs.
func (mr *MockStoreMockRecorder) CleanupOldAuditLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupOldAuditLogs", reflect.TypeOf((*MockStore)(nil).CleanupOldAuditLogs), arg0, arg1)
}

// CleanupOldCache mocks base method.
func (m *MockStore) CleanupOldCache(arg0 context.Context, arg1 pgtype.Timestamptz) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupOldCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupOldCache indicates an expected call of CleanupOldCache.
func (mr *MockStoreMockRecorder) CleanupOldCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupOldCache", reflect.TypeOf((*MockStore)(nil).CleanupOldCache), arg0, arg1)
}

// CleanupOldConversations mocks base method.
func (m *MockStore) CleanupOldConversations(arg0 context.Context, arg1 pgtype.Timestamptz) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupOldConversations", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupOldConversations indicates an expected call of CleanupOldConversations.
func (mr *MockStoreMockRecorder) CleanupOldConversations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupOldConversations", reflect.TypeOf((*MockStore)(nil).CleanupOldConversations), arg0, arg1)
}

// CleanupOldSessions mocks base method.
func (m *MockStore) CleanupOldSessions(arg0 context.Context, arg1 pgtype.Timestamptz) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupOldSessions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupOldSessions indicates an expected call of CleanupOldSessions.
func (mr *MockStoreMockRecorder) CleanupOldSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupOldSessions", reflect.TypeOf((*MockStore)(nil).CleanupOldSessions), arg0, arg1)
}

// CloseDispute mocks base method.
func (m *MockStore) CloseDispute(arg0 context.Context, arg1 db.CloseDisputeParams) (db.DisputeCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseDispute", arg0, arg1)
	ret0, _ := ret[0].(db.DisputeCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseDispute indicates an expected call of CloseDispute.
func (mr *MockStoreMockRecorder) CloseDispute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDispute", reflect.TypeOf((*MockStore)(nil).CloseDispute), arg0, arg1)
}

// CompleteAgreement mocks base method.
func (m *MockStore) CompleteAgreement(arg0 context.Context, arg1 int64) (db.RentalAgreement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteAgreement", arg0, arg1)
	ret0, _ := ret[0].(db.RentalAgreement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteAgreement indicates an expected call of CompleteAgreement.
func (mr *MockStoreMockRecorder) CompleteAgreement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteAgreement", reflect.TypeOf((*MockStore)(nil).CompleteAgreement), arg0, arg1)
}

// CompleteInspection mocks base method.
func (m *MockStore) CompleteInspection(arg0 context.Context, arg1 int64) (db.InspectionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteInspection", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteInspection indicates an expected call of CompleteInspection.
func (mr *MockStoreMockRecorder) CompleteInspection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteInspection", reflect.TypeOf((*MockStore)(nil).CompleteInspection), arg0, arg1)
}

// ConfirmInspection mocks base method.
func (m *MockStore) ConfirmInspection(arg0 context.Context, arg1 db.ConfirmInspectionParams) (db.InspectionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmInspection", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmInspection indicates an expected call of ConfirmInspection.
func (mr *MockStoreMockRecorder) ConfirmInspection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmInspection", reflect.TypeOf((*MockStore)(nil).ConfirmInspection), arg0, arg1)
}

// CountActiveCacheEntries mocks base method.
func (m *MockStore) CountActiveCacheEntries(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountActiveCacheEntries", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountActiveCacheEntries indicates an expected call of CountActiveCacheEntries.
func (mr *MockStoreMockRecorder) CountActiveCacheEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountActiveCacheEntries", reflect.TypeOf((*MockStore)(nil).CountActiveCacheEntries), arg0)
}

// CountAgentInspectionRequests mocks base method.
func (m *MockStore) CountAgentInspectionRequests(arg0 context.Context, arg1 pgtype.Int8) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAgentInspectionRequests", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAgentInspectionRequests indicates an expected call of CountAgentInspectionRequests.
func (mr *MockStoreMockRecorder) CountAgentInspectionRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAgentInspectionRequests", reflect.TypeOf((*MockStore)(nil).CountAgentInspectionRequests), arg0, arg1)
}

// CountApprovedReportsByAgent mocks base method.
func (m *MockStore) CountApprovedReportsByAgent(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountApprovedReportsByAgent", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountApprovedReportsByAgent indicates an expected call of CountApprovedReportsByAgent.
func (mr *MockStoreMockRecorder) CountApprovedReportsByAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountApprovedReportsByAgent", reflect.TypeOf((*MockStore)(nil).CountApprovedReportsByAgent), arg0, arg1)
}

// CountAuditLogsByAction mocks base method.
func (m *MockStore) CountAuditLogsByAction(arg0 context.Context, arg1 db.AuditActionEnum) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAuditLogsByAction", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAuditLogsByAction indicates an expected call of CountAuditLogsByAction.
func (mr *MockStoreMockRecorder) CountAuditLogsByAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAuditLogsByAction", reflect.TypeOf((*MockStore)(nil).CountAuditLogsByAction), arg0, arg1)
}

// CountAuditLogsByDateRange mocks base method.
func (m *MockStore) CountAuditLogsByDateRange(arg0 context.Context, arg1 db.CountAuditLogsByDateRangeParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAuditLogsByDateRange", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAuditLogsByDateRange indicates an expected call of CountAuditLogsByDateRange.
func (mr *MockStoreMockRecorder) CountAuditLogsByDateRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAuditLogsByDateRange", reflect.TypeOf((*MockStore)(nil).CountAuditLogsByDateRange), arg0, arg1)
}

// CountAuditLogsByEntity mocks base method.
func (m *MockStore) CountAuditLogsByEntity(arg0 context.Context, arg1 db.CountAuditLogsByEntityParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAuditLogsByEntity", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAuditLogsByEntity indicates an expected call of CountAuditLogsByEntity.
func (mr *MockStoreMockRecorder) CountAuditLogsByEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAuditLogsByEntity", reflect.TypeOf((*MockStore)(nil).CountAuditLogsByEntity), arg0, arg1)
}

// CountAuditLogsByUser mocks base method.
func (m *MockStore) CountAuditLogsByUser(arg0 context.Context, arg1 pgtype.Int8) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAuditLogsByUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAuditLogsByUser indicates an expected call of CountAuditLogsByUser.
func (mr *MockStoreMockRecorder) CountAuditLogsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAuditLogsByUser", reflect.TypeOf((*MockStore)(nil).CountAuditLogsByUser), arg0, arg1)
}

// CountAvailableProperties mocks base method.
func (m *MockStore) CountAvailableProperties(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAvailableProperties", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAvailableProperties indicates an expected call of CountAvailableProperties.
func (mr *MockStoreMockRecorder) CountAvailableProperties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAvailableProperties", reflect.TypeOf((*MockStore)(nil).CountAvailableProperties), arg0)
}

// CountConversationsByIntent mocks base method.
func (m *MockStore) CountConversationsByIntent(arg0 context.Context, arg1 pgtype.Text) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountConversationsByIntent", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountConversationsByIntent indicates an expected call of CountConversationsByIntent.
func (mr *MockStoreMockRecorder) CountConversationsByIntent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountConversationsByIntent", reflect.TypeOf((*MockStore)(nil).CountConversationsByIntent), arg0, arg1)
}

// CountConversationsBySession mocks base method.
func (m *MockStore) CountConversationsBySession(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountConversationsBySession", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountConversationsBySession indicates an expected call of CountConversationsBySession.
func (mr *MockStoreMockRecorder) CountConversationsBySession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountConversationsBySession", reflect.TypeOf((*MockStore)(nil).CountConversationsBySession), arg0, arg1)
}

// CountConversationsByUser mocks base method.
func (m *MockStore) CountConversationsByUser(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountConversationsByUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountConversationsByUser indicates an expected call of CountConversationsByUser.
func (mr *MockStoreMockRecorder) CountConversationsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountConversationsByUser", reflect.TypeOf((*MockStore)(nil).CountConversationsByUser), arg0, arg1)
}

// CountDisputesAssignedToAdmin mocks base method.
func (m *MockStore) CountDisputesAssignedToAdmin(arg0 context.Context, arg1 pgtype.Int8) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDisputesAssignedToAdmin", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDisputesAssignedToAdmin indicates an expected call of CountDisputesAssignedToAdmin.
func (mr *MockStoreMockRecorder) CountDisputesAssignedToAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDisputesAssignedToAdmin", reflect.TypeOf((*MockStore)(nil).CountDisputesAssignedToAdmin), arg0, arg1)
}

// CountDisputesByStatus mocks base method.
func (m *MockStore) CountDisputesByStatus(arg0 context.Context, arg1 db.NullDisputeStatusEnum) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDisputesByStatus", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDisputesByStatus indicates an expected call of CountDisputesByStatus.
func (mr *MockStoreMockRecorder) CountDisputesByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDisputesByStatus", reflect.TypeOf((*MockStore)(nil).CountDisputesByStatus), arg0, arg1)
}

// CountDisputesForComplainant mocks base method.
func (m *MockStore) CountDisputesForComplainant(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDisputesForComplainant", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDisputesForComplainant indicates an expected call of CountDisputesForComplainant.
func (mr *MockStoreMockRecorder) CountDisputesForComplainant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDisputesForComplainant", reflect.TypeOf((*MockStore)(nil).CountDisputesForComplainant), arg0, arg1)
}

// CountDisputesForRespondent mocks base method.
func (m *MockStore) CountDisputesForRespondent(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDisputesForRespondent", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDisputesForRespondent indicates an expected call of CountDisputesForRespondent.
func (mr *MockStoreMockRecorder) CountDisputesForRespondent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDisputesForRespondent", reflect.TypeOf((*MockStore)(nil).CountDisputesForRespondent), arg0, arg1)
}

// CountEscalatedConversations mocks base method.
func (m *MockStore) CountEscalatedConversations(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEscalatedConversations", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEscalatedConversations indicates an expected call of CountEscalatedConversations.
func (mr *MockStoreMockRecorder) CountEscalatedConversations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEscalatedConversations", reflect.TypeOf((*MockStore)(nil).CountEscalatedConversations), arg0)
}

// CountExpiredCacheEntries mocks base method.
func (m *MockStore) CountExpiredCacheEntries(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountExpiredCacheEntries", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountExpiredCacheEntries indicates an expected call of CountExpiredCacheEntries.
func (mr *MockStoreMockRecorder) CountExpiredCacheEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountExpiredCacheEntries", reflect.TypeOf((*MockStore)(nil).CountExpiredCacheEntries), arg0)
}

// CountInspectionRequestsByStatus mocks base method.
func (m *MockStore) CountInspectionRequestsByStatus(arg0 context.Context, arg1 db.NullInspectionStatusEnum) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountInspectionRequestsByStatus", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountInspectionRequestsByStatus indicates an expected call of CountInspectionRequestsByStatus.
func (mr *MockStoreMockRecorder) CountInspectionRequestsByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountInspectionRequestsByStatus", reflect.TypeOf((*MockStore)(nil).CountInspectionRequestsByStatus), arg0, arg1)
}

// CountLandlordInquiries mocks base method.
func (m *MockStore) CountLandlordInquiries(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountLandlordInquiries", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountLandlordInquiries indicates an expected call of CountLandlordInquiries.
func (mr *MockStoreMockRecorder) CountLandlordInquiries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLandlordInquiries", reflect.TypeOf((*MockStore)(nil).CountLandlordInquiries), arg0, arg1)
}

// CountLandlordRentalAgreements mocks base method.
func (m *MockStore) CountLandlordRentalAgreements(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountLandlordRentalAgreements", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountLandlordRentalAgreements indicates an expected call of CountLandlordRentalAgreements.
func (mr *MockStoreMockRecorder) CountLandlordRentalAgreements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLandlordRentalAgreements", reflect.TypeOf((*MockStore)(nil).CountLandlordRentalAgreements), arg0, arg1)
}

// CountLandlordRentalApplications mocks base method.
func (m *MockStore) CountLandlordRentalApplications(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountLandlordRentalApplications", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountLandlordRentalApplications indicates an expected call of CountLandlordRentalApplications.
func (mr *MockStoreMockRecorder) CountLandlordRentalApplications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountLandlordRentalApplications", reflect.TypeOf((*MockStore)(nil).CountLandlordRentalApplications), arg0, arg1)
}

// CountNotificationsByType mocks base method.
func (m *MockStore) CountNotificationsByType(arg0 context.Context, arg1 db.CountNotificationsByTypeParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountNotificationsByType", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountNotificationsByType indicates an expected call of CountNotificationsByType.
func (mr *MockStoreMockRecorder) CountNotificationsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountNotificationsByType", reflect.TypeOf((*MockStore)(nil).CountNotificationsByType), arg0, arg1)
}

// CountPaymentsByStatus mocks base method.
func (m *MockStore) CountPaymentsByStatus(arg0 context.Context, arg1 db.NullPaymentStatusFullEnum) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPaymentsByStatus", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPaymentsByStatus indicates an expected call of CountPaymentsByStatus.
func (mr *MockStoreMockRecorder) CountPaymentsByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPaymentsByStatus", reflect.TypeOf((*MockStore)(nil).CountPaymentsByStatus), arg0, arg1)
}

// CountPendingApprovalReports mocks base method.
func (m *MockStore) CountPendingApprovalReports(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPendingApprovalReports", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPendingApprovalReports indicates an expected call of CountPendingApprovalReports.
func (mr *MockStoreMockRecorder) CountPendingApprovalReports(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPendingApprovalReports", reflect.TypeOf((*MockStore)(nil).CountPendingApprovalReports), arg0)
}

// CountPendingVerifications mocks base method.
func (m *MockStore) CountPendingVerifications(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPendingVerifications", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPendingVerifications indicates an expected call of CountPendingVerifications.
func (mr *MockStoreMockRecorder) CountPendingVerifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPendingVerifications", reflect.TypeOf((*MockStore)(nil).CountPendingVerifications), arg0)
}

// CountPropertiesByLandlord mocks base method.
func (m *MockStore) CountPropertiesByLandlord(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPropertiesByLandlord", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPropertiesByLandlord indicates an expected call of CountPropertiesByLandlord.
func (mr *MockStoreMockRecorder) CountPropertiesByLandlord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPropertiesByLandlord", reflect.TypeOf((*MockStore)(nil).CountPropertiesByLandlord), arg0, arg1)
}

// CountPropertyInquiries mocks base method.
func (m *MockStore) CountPropertyInquiries(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPropertyInquiries", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPropertyInquiries indicates an expected call of CountPropertyInquiries.
func (mr *MockStoreMockRecorder) CountPropertyInquiries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPropertyInquiries", reflect.TypeOf((*MockStore)(nil).CountPropertyInquiries), arg0, arg1)
}

// CountPropertyInquiriesByType mocks base method.
func (m *MockStore) CountPropertyInquiriesByType(arg0 context.Context, arg1 db.CountPropertyInquiriesByTypeParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPropertyInquiriesByType", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPropertyInquiriesByType indicates an expected call of CountPropertyInquiriesByType.
func (mr *MockStoreMockRecorder) CountPropertyInquiriesByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPropertyInquiriesByType", reflect.TypeOf((*MockStore)(nil).CountPropertyInquiriesByType), arg0, arg1)
}

// CountPropertyMedia mocks base method.
func (m *MockStore) CountPropertyMedia(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPropertyMedia", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPropertyMedia indicates an expected call of CountPropertyMedia.
func (mr *MockStoreMockRecorder) CountPropertyMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPropertyMedia", reflect.TypeOf((*MockStore)(nil).CountPropertyMedia), arg0, arg1)
}

// CountPropertyMediaByType mocks base method.
func (m *MockStore) CountPropertyMediaByType(arg0 context.Context, arg1 db.CountPropertyMediaByTypeParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPropertyMediaByType", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPropertyMediaByType indicates an expected call of CountPropertyMediaByType.
func (mr *MockStoreMockRecorder) CountPropertyMediaByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPropertyMediaByType", reflect.TypeOf((*MockStore)(nil).CountPropertyMediaByType), arg0, arg1)
}

// CountPropertyRentalApplications mocks base method.
func (m *MockStore) CountPropertyRentalApplications(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPropertyRentalApplications", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPropertyRentalApplications indicates an expected call of CountPropertyRentalApplications.
func (mr *MockStoreMockRecorder) CountPropertyRentalApplications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPropertyRentalApplications", reflect.TypeOf((*MockStore)(nil).CountPropertyRentalApplications), arg0, arg1)
}

// CountPropertyReviews mocks base method.
func (m *MockStore) CountPropertyReviews(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPropertyReviews", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPropertyReviews indicates an expected call of CountPropertyReviews.
func (mr *MockStoreMockRecorder) CountPropertyReviews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPropertyReviews", reflect.TypeOf((*MockStore)(nil).CountPropertyReviews), arg0, arg1)
}

// CountPropertySaves mocks base method.
func (m *MockStore) CountPropertySaves(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPropertySaves", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPropertySaves indicates an expected call of CountPropertySaves.
func (mr *MockStoreMockRecorder) CountPropertySaves(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPropertySaves", reflect.TypeOf((*MockStore)(nil).CountPropertySaves), arg0, arg1)
}

// CountPublicSettings mocks base method.
func (m *MockStore) CountPublicSettings(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPublicSettings", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPublicSettings indicates an expected call of CountPublicSettings.
func (mr *MockStoreMockRecorder) CountPublicSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPublicSettings", reflect.TypeOf((*MockStore)(nil).CountPublicSettings), arg0)
}

// CountRatingsForUser mocks base method.
func (m *MockStore) CountRatingsForUser(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRatingsForUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRatingsForUser indicates an expected call of CountRatingsForUser.
func (mr *MockStoreMockRecorder) CountRatingsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRatingsForUser", reflect.TypeOf((*MockStore)(nil).CountRatingsForUser), arg0, arg1)
}

// CountRentalAgreementsByStatus mocks base method.
func (m *MockStore) CountRentalAgreementsByStatus(arg0 context.Context, arg1 db.NullAgreementStatusEnum) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRentalAgreementsByStatus", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRentalAgreementsByStatus indicates an expected call of CountRentalAgreementsByStatus.
func (mr *MockStoreMockRecorder) CountRentalAgreementsByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRentalAgreementsByStatus", reflect.TypeOf((*MockStore)(nil).CountRentalAgreementsByStatus), arg0, arg1)
}

// CountRentalApplicationsByStatus mocks base method.
func (m *MockStore) CountRentalApplicationsByStatus(arg0 context.Context, arg1 db.NullApplicationStatusEnum) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRentalApplicationsByStatus", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRentalApplicationsByStatus indicates an expected call of CountRentalApplicationsByStatus.
func (mr *MockStoreMockRecorder) CountRentalApplicationsByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRentalApplicationsByStatus", reflect.TypeOf((*MockStore)(nil).CountRentalApplicationsByStatus), arg0, arg1)
}

// CountReportsByAgent mocks base method.
func (m *MockStore) CountReportsByAgent(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountReportsByAgent", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountReportsByAgent indicates an expected call of CountReportsByAgent.
func (mr *MockStoreMockRecorder) CountReportsByAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountReportsByAgent", reflect.TypeOf((*MockStore)(nil).CountReportsByAgent), arg0, arg1)
}

// CountSettingsByType mocks base method.
func (m *MockStore) CountSettingsByType(arg0 context.Context, arg1 db.NullSettingTypeEnum) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSettingsByType", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSettingsByType indicates an expected call of CountSettingsByType.
func (mr *MockStoreMockRecorder) CountSettingsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSettingsByType", reflect.TypeOf((*MockStore)(nil).CountSettingsByType), arg0, arg1)
}

// CountSystemSettings mocks base method.
func (m *MockStore) CountSystemSettings(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSystemSettings", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSystemSettings indicates an expected call of CountSystemSettings.
func (mr *MockStoreMockRecorder) CountSystemSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSystemSettings", reflect.TypeOf((*MockStore)(nil).CountSystemSettings), arg0)
}

// CountTenantInspectionRequests mocks base method.
func (m *MockStore) CountTenantInspectionRequests(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTenantInspectionRequests", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTenantInspectionRequests indicates an expected call of CountTenantInspectionRequests.
func (mr *MockStoreMockRecorder) CountTenantInspectionRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTenantInspectionRequests", reflect.TypeOf((*MockStore)(nil).CountTenantInspectionRequests), arg0, arg1)
}

// CountTenantRentalAgreements mocks base method.
func (m *MockStore) CountTenantRentalAgreements(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTenantRentalAgreements", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTenantRentalAgreements indicates an expected call of CountTenantRentalAgreements.
func (mr *MockStoreMockRecorder) CountTenantRentalAgreements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTenantRentalAgreements", reflect.TypeOf((*MockStore)(nil).CountTenantRentalAgreements), arg0, arg1)
}

// CountTenantRentalApplications mocks base method.
func (m *MockStore) CountTenantRentalApplications(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTenantRentalApplications", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTenantRentalApplications indicates an expected call of CountTenantRentalApplications.
func (mr *MockStoreMockRecorder) CountTenantRentalApplications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTenantRentalApplications", reflect.TypeOf((*MockStore)(nil).CountTenantRentalApplications), arg0, arg1)
}

// CountTotalCacheEntries mocks base method.
func (m *MockStore) CountTotalCacheEntries(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTotalCacheEntries", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTotalCacheEntries indicates an expected call of CountTotalCacheEntries.
func (mr *MockStoreMockRecorder) CountTotalCacheEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTotalCacheEntries", reflect.TypeOf((*MockStore)(nil).CountTotalCacheEntries), arg0)
}

// CountUnreadLandlordInquiries mocks base method.
func (m *MockStore) CountUnreadLandlordInquiries(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUnreadLandlordInquiries", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUnreadLandlordInquiries indicates an expected call of CountUnreadLandlordInquiries.
func (mr *MockStoreMockRecorder) CountUnreadLandlordInquiries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUnreadLandlordInquiries", reflect.TypeOf((*MockStore)(nil).CountUnreadLandlordInquiries), arg0, arg1)
}

// CountUnreadMessages mocks base method.
func (m *MockStore) CountUnreadMessages(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUnreadMessages", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUnreadMessages indicates an expected call of CountUnreadMessages.
func (mr *MockStoreMockRecorder) CountUnreadMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUnreadMessages", reflect.TypeOf((*MockStore)(nil).CountUnreadMessages), arg0, arg1)
}

// CountUnreadMessagesFromSender mocks base method.
func (m *MockStore) CountUnreadMessagesFromSender(arg0 context.Context, arg1 db.CountUnreadMessagesFromSenderParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUnreadMessagesFromSender", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUnreadMessagesFromSender indicates an expected call of CountUnreadMessagesFromSender.
func (mr *MockStoreMockRecorder) CountUnreadMessagesFromSender(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUnreadMessagesFromSender", reflect.TypeOf((*MockStore)(nil).CountUnreadMessagesFromSender), arg0, arg1)
}

// CountUnreadNotifications mocks base method.
func (m *MockStore) CountUnreadNotifications(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUnreadNotifications", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUnreadNotifications indicates an expected call of CountUnreadNotifications.
func (mr *MockStoreMockRecorder) CountUnreadNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUnreadNotifications", reflect.TypeOf((*MockStore)(nil).CountUnreadNotifications), arg0, arg1)
}

// CountUserActiveSessions mocks base method.
func (m *MockStore) CountUserActiveSessions(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserActiveSessions", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserActiveSessions indicates an expected call of CountUserActiveSessions.
func (mr *MockStoreMockRecorder) CountUserActiveSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserActiveSessions", reflect.TypeOf((*MockStore)(nil).CountUserActiveSessions), arg0, arg1)
}

// CountUserEarnings mocks base method.
func (m *MockStore) CountUserEarnings(arg0 context.Context, arg1 pgtype.Int8) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserEarnings", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserEarnings indicates an expected call of CountUserEarnings.
func (mr *MockStoreMockRecorder) CountUserEarnings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserEarnings", reflect.TypeOf((*MockStore)(nil).CountUserEarnings), arg0, arg1)
}

// CountUserNotifications mocks base method.
func (m *MockStore) CountUserNotifications(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserNotifications", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserNotifications indicates an expected call of CountUserNotifications.
func (mr *MockStoreMockRecorder) CountUserNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserNotifications", reflect.TypeOf((*MockStore)(nil).CountUserNotifications), arg0, arg1)
}

// CountUserPayments mocks base method.
func (m *MockStore) CountUserPayments(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserPayments", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserPayments indicates an expected call of CountUserPayments.
func (mr *MockStoreMockRecorder) CountUserPayments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserPayments", reflect.TypeOf((*MockStore)(nil).CountUserPayments), arg0, arg1)
}

// CountUserSavedProperties mocks base method.
func (m *MockStore) CountUserSavedProperties(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserSavedProperties", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserSavedProperties indicates an expected call of CountUserSavedProperties.
func (mr *MockStoreMockRecorder) CountUserSavedProperties(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserSavedProperties", reflect.TypeOf((*MockStore)(nil).CountUserSavedProperties), arg0, arg1)
}

// CountUserTotalSessions mocks base method.
func (m *MockStore) CountUserTotalSessions(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserTotalSessions", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserTotalSessions indicates an expected call of CountUserTotalSessions.
func (mr *MockStoreMockRecorder) CountUserTotalSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserTotalSessions", reflect.TypeOf((*MockStore)(nil).CountUserTotalSessions), arg0, arg1)
}

// CountUsersByType mocks base method.
func (m *MockStore) CountUsersByType(arg0 context.Context, arg1 db.UserTypeEnum) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsersByType", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsersByType indicates an expected call of CountUsersByType.
func (mr *MockStoreMockRecorder) CountUsersByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsersByType", reflect.TypeOf((*MockStore)(nil).CountUsersByType), arg0, arg1)
}

// CountVerifiedPropertyReviews mocks base method.
func (m *MockStore) CountVerifiedPropertyReviews(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountVerifiedPropertyReviews", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountVerifiedPropertyReviews indicates an expected call of CountVerifiedPropertyReviews.
func (mr *MockStoreMockRecorder) CountVerifiedPropertyReviews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVerifiedPropertyReviews", reflect.TypeOf((*MockStore)(nil).CountVerifiedPropertyReviews), arg0, arg1)
}

// CountVerifiedRatingsForUser mocks base method.
func (m *MockStore) CountVerifiedRatingsForUser(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountVerifiedRatingsForUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountVerifiedRatingsForUser indicates an expected call of CountVerifiedRatingsForUser.
func (mr *MockStoreMockRecorder) CountVerifiedRatingsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVerifiedRatingsForUser", reflect.TypeOf((*MockStore)(nil).CountVerifiedRatingsForUser), arg0, arg1)
}

// CreateAuditLog mocks base method.
func (m *MockStore) CreateAuditLog(arg0 context.Context, arg1 db.CreateAuditLogParams) (db.AuditLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuditLog", arg0, arg1)
	ret0, _ := ret[0].(db.AuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuditLog indicates an expected call of CreateAuditLog.
func (mr *MockStoreMockRecorder) CreateAuditLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuditLog", reflect.TypeOf((*MockStore)(nil).CreateAuditLog), arg0, arg1)
}

// CreateChatbotConversation mocks base method.
func (m *MockStore) CreateChatbotConversation(arg0 context.Context, arg1 db.CreateChatbotConversationParams) (db.ChatbotConversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatbotConversation", arg0, arg1)
	ret0, _ := ret[0].(db.ChatbotConversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatbotConversation indicates an expected call of CreateChatbotConversation.
func (mr *MockStoreMockRecorder) CreateChatbotConversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatbotConversation", reflect.TypeOf((*MockStore)(nil).CreateChatbotConversation), arg0, arg1)
}

// CreateDisputeCase mocks base method.
func (m *MockStore) CreateDisputeCase(arg0 context.Context, arg1 db.CreateDisputeCaseParams) (db.DisputeCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDisputeCase", arg0, arg1)
	ret0, _ := ret[0].(db.DisputeCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDisputeCase indicates an expected call of CreateDisputeCase.
func (mr *MockStoreMockRecorder) CreateDisputeCase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDisputeCase", reflect.TypeOf((*MockStore)(nil).CreateDisputeCase), arg0, arg1)
}

// CreateInspectionAgentProfile mocks base method.
func (m *MockStore) CreateInspectionAgentProfile(arg0 context.Context, arg1 db.CreateInspectionAgentProfileParams) (db.InspectionAgentProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInspectionAgentProfile", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionAgentProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInspectionAgentProfile indicates an expected call of CreateInspectionAgentProfile.
func (mr *MockStoreMockRecorder) CreateInspectionAgentProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInspectionAgentProfile", reflect.TypeOf((*MockStore)(nil).CreateInspectionAgentProfile), arg0, arg1)
}

// CreateInspectionReport mocks base method.
func (m *MockStore) CreateInspectionReport(arg0 context.Context, arg1 db.CreateInspectionReportParams) (db.InspectionReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInspectionReport", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInspectionReport indicates an expected call of CreateInspectionReport.
func (mr *MockStoreMockRecorder) CreateInspectionReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInspectionReport", reflect.TypeOf((*MockStore)(nil).CreateInspectionReport), arg0, arg1)
}

// CreateInspectionRequest mocks base method.
func (m *MockStore) CreateInspectionRequest(arg0 context.Context, arg1 db.CreateInspectionRequestParams) (db.InspectionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInspectionRequest", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInspectionRequest indicates an expected call of CreateInspectionRequest.
func (mr *MockStoreMockRecorder) CreateInspectionRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInspectionRequest", reflect.TypeOf((*MockStore)(nil).CreateInspectionRequest), arg0, arg1)
}

// CreateLandlordProfile mocks base method.
func (m *MockStore) CreateLandlordProfile(arg0 context.Context, arg1 db.CreateLandlordProfileParams) (db.LandlordProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLandlordProfile", arg0, arg1)
	ret0, _ := ret[0].(db.LandlordProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLandlordProfile indicates an expected call of CreateLandlordProfile.
func (mr *MockStoreMockRecorder) CreateLandlordProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLandlordProfile", reflect.TypeOf((*MockStore)(nil).CreateLandlordProfile), arg0, arg1)
}

// CreateMessage mocks base method.
func (m *MockStore) CreateMessage(arg0 context.Context, arg1 db.CreateMessageParams) (db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", arg0, arg1)
	ret0, _ := ret[0].(db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockStoreMockRecorder) CreateMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockStore)(nil).CreateMessage), arg0, arg1)
}

// CreateNotification mocks base method.
func (m *MockStore) CreateNotification(arg0 context.Context, arg1 db.CreateNotificationParams) (db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", arg0, arg1)
	ret0, _ := ret[0].(db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockStoreMockRecorder) CreateNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockStore)(nil).CreateNotification), arg0, arg1)
}

// CreatePayment mocks base method.
func (m *MockStore) CreatePayment(arg0 context.Context, arg1 db.CreatePaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockStoreMockRecorder) CreatePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockStore)(nil).CreatePayment), arg0, arg1)
}

// CreateProperty mocks base method.
func (m *MockStore) CreateProperty(arg0 context.Context, arg1 db.CreatePropertyParams) (db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProperty", arg0, arg1)
	ret0, _ := ret[0].(db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProperty indicates an expected call of CreateProperty.
func (mr *MockStoreMockRecorder) CreateProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProperty", reflect.TypeOf((*MockStore)(nil).CreateProperty), arg0, arg1)
}

// CreatePropertyCommunityReview mocks base method.
func (m *MockStore) CreatePropertyCommunityReview(arg0 context.Context, arg1 db.CreatePropertyCommunityReviewParams) (db.PropertyCommunityReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePropertyCommunityReview", arg0, arg1)
	ret0, _ := ret[0].(db.PropertyCommunityReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePropertyCommunityReview indicates an expected call of CreatePropertyCommunityReview.
func (mr *MockStoreMockRecorder) CreatePropertyCommunityReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePropertyCommunityReview", reflect.TypeOf((*MockStore)(nil).CreatePropertyCommunityReview), arg0, arg1)
}

// CreatePropertyInquiry mocks base method.
func (m *MockStore) CreatePropertyInquiry(arg0 context.Context, arg1 db.CreatePropertyInquiryParams) (db.PropertyInquiry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePropertyInquiry", arg0, arg1)
	ret0, _ := ret[0].(db.PropertyInquiry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePropertyInquiry indicates an expected call of CreatePropertyInquiry.
func (mr *MockStoreMockRecorder) CreatePropertyInquiry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePropertyInquiry", reflect.TypeOf((*MockStore)(nil).CreatePropertyInquiry), arg0, arg1)
}

// CreatePropertyMedia mocks base method.
func (m *MockStore) CreatePropertyMedia(arg0 context.Context, arg1 db.CreatePropertyMediaParams) (db.PropertyMedium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePropertyMedia", arg0, arg1)
	ret0, _ := ret[0].(db.PropertyMedium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePropertyMedia indicates an expected call of CreatePropertyMedia.
func (mr *MockStoreMockRecorder) CreatePropertyMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePropertyMedia", reflect.TypeOf((*MockStore)(nil).CreatePropertyMedia), arg0, arg1)
}

// CreatePropertySearchCache mocks base method.
func (m *MockStore) CreatePropertySearchCache(arg0 context.Context, arg1 db.CreatePropertySearchCacheParams) (db.PropertySearchCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePropertySearchCache", arg0, arg1)
	ret0, _ := ret[0].(db.PropertySearchCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePropertySearchCache indicates an expected call of CreatePropertySearchCache.
func (mr *MockStoreMockRecorder) CreatePropertySearchCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePropertySearchCache", reflect.TypeOf((*MockStore)(nil).CreatePropertySearchCache), arg0, arg1)
}

// CreateRentalAgreement mocks base method.
func (m *MockStore) CreateRentalAgreement(arg0 context.Context, arg1 db.CreateRentalAgreementParams) (db.RentalAgreement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRentalAgreement", arg0, arg1)
	ret0, _ := ret[0].(db.RentalAgreement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRentalAgreement indicates an expected call of CreateRentalAgreement.
func (mr *MockStoreMockRecorder) CreateRentalAgreement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRentalAgreement", reflect.TypeOf((*MockStore)(nil).CreateRentalAgreement), arg0, arg1)
}

// CreateRentalApplication mocks base method.
func (m *MockStore) CreateRentalApplication(arg0 context.Context, arg1 db.CreateRentalApplicationParams) (db.RentalApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRentalApplication", arg0, arg1)
	ret0, _ := ret[0].(db.RentalApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRentalApplication indicates an expected call of CreateRentalApplication.
func (mr *MockStoreMockRecorder) CreateRentalApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRentalApplication", reflect.TypeOf((*MockStore)(nil).CreateRentalApplication), arg0, arg1)
}

// CreateSystemSetting mocks base method.
func (m *MockStore) CreateSystemSetting(arg0 context.Context, arg1 db.CreateSystemSettingParams) (db.SystemSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSystemSetting", arg0, arg1)
	ret0, _ := ret[0].(db.SystemSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSystemSetting indicates an expected call of CreateSystemSetting.
func (mr *MockStoreMockRecorder) CreateSystemSetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSystemSetting", reflect.TypeOf((*MockStore)(nil).CreateSystemSetting), arg0, arg1)
}

// CreateTenantProfile mocks base method.
func (m *MockStore) CreateTenantProfile(arg0 context.Context, arg1 db.CreateTenantProfileParams) (db.TenantProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTenantProfile", arg0, arg1)
	ret0, _ := ret[0].(db.TenantProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenantProfile indicates an expected call of CreateTenantProfile.
func (mr *MockStoreMockRecorder) CreateTenantProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenantProfile", reflect.TypeOf((*MockStore)(nil).CreateTenantProfile), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserRating mocks base method.
func (m *MockStore) CreateUserRating(arg0 context.Context, arg1 db.CreateUserRatingParams) (db.UserRating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserRating", arg0, arg1)
	ret0, _ := ret[0].(db.UserRating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserRating indicates an expected call of CreateUserRating.
func (mr *MockStoreMockRecorder) CreateUserRating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserRating", reflect.TypeOf((*MockStore)(nil).CreateUserRating), arg0, arg1)
}

// CreateUserSession mocks base method.
func (m *MockStore) CreateUserSession(arg0 context.Context, arg1 db.CreateUserSessionParams) (db.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSession", arg0, arg1)
	ret0, _ := ret[0].(db.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserSession indicates an expected call of CreateUserSession.
func (mr *MockStoreMockRecorder) CreateUserSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSession", reflect.TypeOf((*MockStore)(nil).CreateUserSession), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1)
}

// CreateUserVerification mocks base method.
func (m *MockStore) CreateUserVerification(arg0 context.Context, arg1 db.CreateUserVerificationParams) (db.UserVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserVerification", arg0, arg1)
	ret0, _ := ret[0].(db.UserVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserVerification indicates an expected call of CreateUserVerification.
func (mr *MockStoreMockRecorder) CreateUserVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserVerification", reflect.TypeOf((*MockStore)(nil).CreateUserVerification), arg0, arg1)
}

// DeactivateOtherUserSessions mocks base method.
func (m *MockStore) DeactivateOtherUserSessions(arg0 context.Context, arg1 db.DeactivateOtherUserSessionsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateOtherUserSessions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateOtherUserSessions indicates an expected call of DeactivateOtherUserSessions.
func (mr *MockStoreMockRecorder) DeactivateOtherUserSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateOtherUserSessions", reflect.TypeOf((*MockStore)(nil).DeactivateOtherUserSessions), arg0, arg1)
}

// DeactivateSession mocks base method.
func (m *MockStore) DeactivateSession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateSession indicates an expected call of DeactivateSession.
func (mr *MockStoreMockRecorder) DeactivateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateSession", reflect.TypeOf((*MockStore)(nil).DeactivateSession), arg0, arg1)
}

// DeactivateUserSessions mocks base method.
func (m *MockStore) DeactivateUserSessions(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateUserSessions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateUserSessions indicates an expected call of DeactivateUserSessions.
func (mr *MockStoreMockRecorder) DeactivateUserSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateUserSessions", reflect.TypeOf((*MockStore)(nil).DeactivateUserSessions), arg0, arg1)
}

// DecrementLandlordPropertyCount mocks base method.
func (m *MockStore) DecrementLandlordPropertyCount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementLandlordPropertyCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementLandlordPropertyCount indicates an expected call of DecrementLandlordPropertyCount.
func (mr *MockStoreMockRecorder) DecrementLandlordPropertyCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementLandlordPropertyCount", reflect.TypeOf((*MockStore)(nil).DecrementLandlordPropertyCount), arg0, arg1)
}

// DecrementReviewHelpfulVotes mocks base method.
func (m *MockStore) DecrementReviewHelpfulVotes(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementReviewHelpfulVotes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementReviewHelpfulVotes indicates an expected call of DecrementReviewHelpfulVotes.
func (mr *MockStoreMockRecorder) DecrementReviewHelpfulVotes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementReviewHelpfulVotes", reflect.TypeOf((*MockStore)(nil).DecrementReviewHelpfulVotes), arg0, arg1)
}

// DeleteAllPropertyMedia mocks base method.
func (m *MockStore) DeleteAllPropertyMedia(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllPropertyMedia", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllPropertyMedia indicates an expected call of DeleteAllPropertyMedia.
func (mr *MockStoreMockRecorder) DeleteAllPropertyMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllPropertyMedia", reflect.TypeOf((*MockStore)(nil).DeleteAllPropertyMedia), arg0, arg1)
}

// DeleteAllUserNotifications mocks base method.
func (m *MockStore) DeleteAllUserNotifications(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllUserNotifications", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllUserNotifications indicates an expected call of DeleteAllUserNotifications.
func (mr *MockStoreMockRecorder) DeleteAllUserNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllUserNotifications", reflect.TypeOf((*MockStore)(nil).DeleteAllUserNotifications), arg0, arg1)
}

// DeleteAllUserSavedProperties mocks base method.
func (m *MockStore) DeleteAllUserSavedProperties(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllUserSavedProperties", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllUserSavedProperties indicates an expected call of DeleteAllUserSavedProperties.
func (mr *MockStoreMockRecorder) DeleteAllUserSavedProperties(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllUserSavedProperties", reflect.TypeOf((*MockStore)(nil).DeleteAllUserSavedProperties), arg0, arg1)
}

// DeleteAllUserSessions mocks base method.
func (m *MockStore) DeleteAllUserSessions(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllUserSessions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllUserSessions indicates an expected call of DeleteAllUserSessions.
func (mr *MockStoreMockRecorder) DeleteAllUserSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllUserSessions", reflect.TypeOf((*MockStore)(nil).DeleteAllUserSessions), arg0, arg1)
}

// DeleteAuditLog mocks base method.
func (m *MockStore) DeleteAuditLog(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuditLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuditLog indicates an expected call of DeleteAuditLog.
func (mr *MockStoreMockRecorder) DeleteAuditLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuditLog", reflect.TypeOf((*MockStore)(nil).DeleteAuditLog), arg0, arg1)
}

// DeleteAuditLogsByUser mocks base method.
func (m *MockStore) DeleteAuditLogsByUser(arg0 context.Context, arg1 pgtype.Int8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuditLogsByUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuditLogsByUser indicates an expected call of DeleteAuditLogsByUser.
func (mr *MockStoreMockRecorder) DeleteAuditLogsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuditLogsByUser", reflect.TypeOf((*MockStore)(nil).DeleteAuditLogsByUser), arg0, arg1)
}

// DeleteCacheBySearchHash mocks base method.
func (m *MockStore) DeleteCacheBySearchHash(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCacheBySearchHash", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCacheBySearchHash indicates an expected call of DeleteCacheBySearchHash.
func (mr *MockStoreMockRecorder) DeleteCacheBySearchHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCacheBySearchHash", reflect.TypeOf((*MockStore)(nil).DeleteCacheBySearchHash), arg0, arg1)
}

// DeleteChatbotConversation mocks base method.
func (m *MockStore) DeleteChatbotConversation(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatbotConversation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChatbotConversation indicates an expected call of DeleteChatbotConversation.
func (mr *MockStoreMockRecorder) DeleteChatbotConversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatbotConversation", reflect.TypeOf((*MockStore)(nil).DeleteChatbotConversation), arg0, arg1)
}

// DeleteConversation mocks base method.
func (m *MockStore) DeleteConversation(arg0 context.Context, arg1 db.DeleteConversationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConversation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConversation indicates an expected call of DeleteConversation.
func (mr *MockStoreMockRecorder) DeleteConversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConversation", reflect.TypeOf((*MockStore)(nil).DeleteConversation), arg0, arg1)
}

// DeleteConversationsBySession mocks base method.
func (m *MockStore) DeleteConversationsBySession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConversationsBySession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConversationsBySession indicates an expected call of DeleteConversationsBySession.
func (mr *MockStoreMockRecorder) DeleteConversationsBySession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConversationsBySession", reflect.TypeOf((*MockStore)(nil).DeleteConversationsBySession), arg0, arg1)
}

// DeleteDisputeCase mocks base method.
func (m *MockStore) DeleteDisputeCase(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDisputeCase", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDisputeCase indicates an expected call of DeleteDisputeCase.
func (mr *MockStoreMockRecorder) DeleteDisputeCase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDisputeCase", reflect.TypeOf((*MockStore)(nil).DeleteDisputeCase), arg0, arg1)
}

// DeleteInspectionAgentProfile mocks base method.
func (m *MockStore) DeleteInspectionAgentProfile(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInspectionAgentProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInspectionAgentProfile indicates an expected call of DeleteInspectionAgentProfile.
func (mr *MockStoreMockRecorder) DeleteInspectionAgentProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInspectionAgentProfile", reflect.TypeOf((*MockStore)(nil).DeleteInspectionAgentProfile), arg0, arg1)
}

// DeleteInspectionReport mocks base method.
func (m *MockStore) DeleteInspectionReport(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInspectionReport", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInspectionReport indicates an expected call of DeleteInspectionReport.
func (mr *MockStoreMockRecorder) DeleteInspectionReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInspectionReport", reflect.TypeOf((*MockStore)(nil).DeleteInspectionReport), arg0, arg1)
}

// DeleteInspectionRequest mocks base method.
func (m *MockStore) DeleteInspectionRequest(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInspectionRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInspectionRequest indicates an expected call of DeleteInspectionRequest.
func (mr *MockStoreMockRecorder) DeleteInspectionRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInspectionRequest", reflect.TypeOf((*MockStore)(nil).DeleteInspectionRequest), arg0, arg1)
}

// DeleteLandlordProfile mocks base method.
func (m *MockStore) DeleteLandlordProfile(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLandlordProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLandlordProfile indicates an expected call of DeleteLandlordProfile.
func (mr *MockStoreMockRecorder) DeleteLandlordProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLandlordProfile", reflect.TypeOf((*MockStore)(nil).DeleteLandlordProfile), arg0, arg1)
}

// DeleteMessage mocks base method.
func (m *MockStore) DeleteMessage(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockStoreMockRecorder) DeleteMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockStore)(nil).DeleteMessage), arg0, arg1)
}

// DeleteNotification mocks base method.
func (m *MockStore) DeleteNotification(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotification indicates an expected call of DeleteNotification.
func (mr *MockStoreMockRecorder) DeleteNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotification", reflect.TypeOf((*MockStore)(nil).DeleteNotification), arg0, arg1)
}

// DeleteOldNotifications mocks base method.
func (m *MockStore) DeleteOldNotifications(arg0 context.Context, arg1 pgtype.Timestamptz) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldNotifications", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldNotifications indicates an expected call of DeleteOldNotifications.
func (mr *MockStoreMockRecorder) DeleteOldNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldNotifications", reflect.TypeOf((*MockStore)(nil).DeleteOldNotifications), arg0, arg1)
}

// DeletePayment mocks base method.
func (m *MockStore) DeletePayment(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePayment indicates an expected call of DeletePayment.
func (mr *MockStoreMockRecorder) DeletePayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePayment", reflect.TypeOf((*MockStore)(nil).DeletePayment), arg0, arg1)
}

// DeleteProperty mocks base method.
func (m *MockStore) DeleteProperty(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProperty indicates an expected call of DeleteProperty.
func (mr *MockStoreMockRecorder) DeleteProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProperty", reflect.TypeOf((*MockStore)(nil).DeleteProperty), arg0, arg1)
}

// DeletePropertyCommunityReview mocks base method.
func (m *MockStore) DeletePropertyCommunityReview(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePropertyCommunityReview", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePropertyCommunityReview indicates an expected call of DeletePropertyCommunityReview.
func (mr *MockStoreMockRecorder) DeletePropertyCommunityReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePropertyCommunityReview", reflect.TypeOf((*MockStore)(nil).DeletePropertyCommunityReview), arg0, arg1)
}

// DeletePropertyInquiry mocks base method.
func (m *MockStore) DeletePropertyInquiry(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePropertyInquiry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePropertyInquiry indicates an expected call of DeletePropertyInquiry.
func (mr *MockStoreMockRecorder) DeletePropertyInquiry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePropertyInquiry", reflect.TypeOf((*MockStore)(nil).DeletePropertyInquiry), arg0, arg1)
}

// DeletePropertyMedia mocks base method.
func (m *MockStore) DeletePropertyMedia(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePropertyMedia", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePropertyMedia indicates an expected call of DeletePropertyMedia.
func (mr *MockStoreMockRecorder) DeletePropertyMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePropertyMedia", reflect.TypeOf((*MockStore)(nil).DeletePropertyMedia), arg0, arg1)
}

// DeletePropertySearchCache mocks base method.
func (m *MockStore) DeletePropertySearchCache(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePropertySearchCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePropertySearchCache indicates an expected call of DeletePropertySearchCache.
func (mr *MockStoreMockRecorder) DeletePropertySearchCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePropertySearchCache", reflect.TypeOf((*MockStore)(nil).DeletePropertySearchCache), arg0, arg1)
}

// DeleteRentalAgreement mocks base method.
func (m *MockStore) DeleteRentalAgreement(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRentalAgreement", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRentalAgreement indicates an expected call of DeleteRentalAgreement.
func (mr *MockStoreMockRecorder) DeleteRentalAgreement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRentalAgreement", reflect.TypeOf((*MockStore)(nil).DeleteRentalAgreement), arg0, arg1)
}

// DeleteRentalApplication mocks base method.
func (m *MockStore) DeleteRentalApplication(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRentalApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRentalApplication indicates an expected call of DeleteRentalApplication.
func (mr *MockStoreMockRecorder) DeleteRentalApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRentalApplication", reflect.TypeOf((*MockStore)(nil).DeleteRentalApplication), arg0, arg1)
}

// DeleteSavedProperty mocks base method.
func (m *MockStore) DeleteSavedProperty(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSavedProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSavedProperty indicates an expected call of DeleteSavedProperty.
func (mr *MockStoreMockRecorder) DeleteSavedProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSavedProperty", reflect.TypeOf((*MockStore)(nil).DeleteSavedProperty), arg0, arg1)
}

// DeleteSystemSetting mocks base method.
func (m *MockStore) DeleteSystemSetting(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSystemSetting", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSystemSetting indicates an expected call of DeleteSystemSetting.
func (mr *MockStoreMockRecorder) DeleteSystemSetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSystemSetting", reflect.TypeOf((*MockStore)(nil).DeleteSystemSetting), arg0, arg1)
}

// DeleteTenantProfile mocks base method.
func (m *MockStore) DeleteTenantProfile(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTenantProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTenantProfile indicates an expected call of DeleteTenantProfile.
func (mr *MockStoreMockRecorder) DeleteTenantProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTenantProfile", reflect.TypeOf((*MockStore)(nil).DeleteTenantProfile), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserRating mocks base method.
func (m *MockStore) DeleteUserRating(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserRating", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserRating indicates an expected call of DeleteUserRating.
func (mr *MockStoreMockRecorder) DeleteUserRating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserRating", reflect.TypeOf((*MockStore)(nil).DeleteUserRating), arg0, arg1)
}

// DeleteUserSession mocks base method.
func (m *MockStore) DeleteUserSession(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSession indicates an expected call of DeleteUserSession.
func (mr *MockStoreMockRecorder) DeleteUserSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSession", reflect.TypeOf((*MockStore)(nil).DeleteUserSession), arg0, arg1)
}

// DeleteUserVerification mocks base method.
func (m *MockStore) DeleteUserVerification(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserVerification", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserVerification indicates an expected call of DeleteUserVerification.
func (mr *MockStoreMockRecorder) DeleteUserVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserVerification", reflect.TypeOf((*MockStore)(nil).DeleteUserVerification), arg0, arg1)
}

// EscalateConversation mocks base method.
func (m *MockStore) EscalateConversation(arg0 context.Context, arg1 db.EscalateConversationParams) (db.ChatbotConversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EscalateConversation", arg0, arg1)
	ret0, _ := ret[0].(db.ChatbotConversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EscalateConversation indicates an expected call of EscalateConversation.
func (mr *MockStoreMockRecorder) EscalateConversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EscalateConversation", reflect.TypeOf((*MockStore)(nil).EscalateConversation), arg0, arg1)
}

// ExtendCacheExpiry mocks base method.
func (m *MockStore) ExtendCacheExpiry(arg0 context.Context, arg1 db.ExtendCacheExpiryParams) (db.PropertySearchCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendCacheExpiry", arg0, arg1)
	ret0, _ := ret[0].(db.PropertySearchCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendCacheExpiry indicates an expected call of ExtendCacheExpiry.
func (mr *MockStoreMockRecorder) ExtendCacheExpiry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendCacheExpiry", reflect.TypeOf((*MockStore)(nil).ExtendCacheExpiry), arg0, arg1)
}

// FailPayment mocks base method.
func (m *MockStore) FailPayment(arg0 context.Context, arg1 db.FailPaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailPayment", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FailPayment indicates an expected call of FailPayment.
func (mr *MockStoreMockRecorder) FailPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailPayment", reflect.TypeOf((*MockStore)(nil).FailPayment), arg0, arg1)
}

// GetActiveCacheEntries mocks base method.
func (m *MockStore) GetActiveCacheEntries(arg0 context.Context, arg1 db.GetActiveCacheEntriesParams) ([]db.PropertySearchCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveCacheEntries", arg0, arg1)
	ret0, _ := ret[0].([]db.PropertySearchCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveCacheEntries indicates an expected call of GetActiveCacheEntries.
func (mr *MockStoreMockRecorder) GetActiveCacheEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveCacheEntries", reflect.TypeOf((*MockStore)(nil).GetActiveCacheEntries), arg0, arg1)
}

// GetActiveLandlordAgreements mocks base method.
func (m *MockStore) GetActiveLandlordAgreements(arg0 context.Context, arg1 db.GetActiveLandlordAgreementsParams) ([]db.GetActiveLandlordAgreementsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveLandlordAgreements", arg0, arg1)
	ret0, _ := ret[0].([]db.GetActiveLandlordAgreementsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveLandlordAgreements indicates an expected call of GetActiveLandlordAgreements.
func (mr *MockStoreMockRecorder) GetActiveLandlordAgreements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveLandlordAgreements", reflect.TypeOf((*MockStore)(nil).GetActiveLandlordAgreements), arg0, arg1)
}

// GetActiveTenantAgreements mocks base method.
func (m *MockStore) GetActiveTenantAgreements(arg0 context.Context, arg1 db.GetActiveTenantAgreementsParams) ([]db.GetActiveTenantAgreementsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveTenantAgreements", arg0, arg1)
	ret0, _ := ret[0].([]db.GetActiveTenantAgreementsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveTenantAgreements indicates an expected call of GetActiveTenantAgreements.
func (mr *MockStoreMockRecorder) GetActiveTenantAgreements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveTenantAgreements", reflect.TypeOf((*MockStore)(nil).GetActiveTenantAgreements), arg0, arg1)
}

// GetAdminDisputeWorkload mocks base method.
func (m *MockStore) GetAdminDisputeWorkload(arg0 context.Context, arg1 pgtype.Int8) (db.GetAdminDisputeWorkloadRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminDisputeWorkload", arg0, arg1)
	ret0, _ := ret[0].(db.GetAdminDisputeWorkloadRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminDisputeWorkload indicates an expected call of GetAdminDisputeWorkload.
func (mr *MockStoreMockRecorder) GetAdminDisputeWorkload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminDisputeWorkload", reflect.TypeOf((*MockStore)(nil).GetAdminDisputeWorkload), arg0, arg1)
}

// GetAgentInspectionRequests mocks base method.
func (m *MockStore) GetAgentInspectionRequests(arg0 context.Context, arg1 db.GetAgentInspectionRequestsParams) ([]db.GetAgentInspectionRequestsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentInspectionRequests", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAgentInspectionRequestsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentInspectionRequests indicates an expected call of GetAgentInspectionRequests.
func (mr *MockStoreMockRecorder) GetAgentInspectionRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentInspectionRequests", reflect.TypeOf((*MockStore)(nil).GetAgentInspectionRequests), arg0, arg1)
}

// GetAgentInspectionStats mocks base method.
func (m *MockStore) GetAgentInspectionStats(arg0 context.Context, arg1 pgtype.Int8) (db.GetAgentInspectionStatsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentInspectionStats", arg0, arg1)
	ret0, _ := ret[0].(db.GetAgentInspectionStatsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentInspectionStats indicates an expected call of GetAgentInspectionStats.
func (mr *MockStoreMockRecorder) GetAgentInspectionStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentInspectionStats", reflect.TypeOf((*MockStore)(nil).GetAgentInspectionStats), arg0, arg1)
}

// GetAgentRatings mocks base method.
func (m *MockStore) GetAgentRatings(arg0 context.Context, arg1 db.GetAgentRatingsParams) ([]db.GetAgentRatingsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentRatings", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAgentRatingsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentRatings indicates an expected call of GetAgentRatings.
func (mr *MockStoreMockRecorder) GetAgentRatings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentRatings", reflect.TypeOf((*MockStore)(nil).GetAgentRatings), arg0, arg1)
}

// GetAgreementStatistics mocks base method.
func (m *MockStore) GetAgreementStatistics(arg0 context.Context) (db.GetAgreementStatisticsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgreementStatistics", arg0)
	ret0, _ := ret[0].(db.GetAgreementStatisticsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgreementStatistics indicates an expected call of GetAgreementStatistics.
func (mr *MockStoreMockRecorder) GetAgreementStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgreementStatistics", reflect.TypeOf((*MockStore)(nil).GetAgreementStatistics), arg0)
}

// GetAgreementsPendingSignatures mocks base method.
func (m *MockStore) GetAgreementsPendingSignatures(arg0 context.Context, arg1 db.GetAgreementsPendingSignaturesParams) ([]db.GetAgreementsPendingSignaturesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgreementsPendingSignatures", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAgreementsPendingSignaturesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgreementsPendingSignatures indicates an expected call of GetAgreementsPendingSignatures.
func (mr *MockStoreMockRecorder) GetAgreementsPendingSignatures(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgreementsPendingSignatures", reflect.TypeOf((*MockStore)(nil).GetAgreementsPendingSignatures), arg0, arg1)
}

// GetAllSystemSettings mocks base method.
func (m *MockStore) GetAllSystemSettings(arg0 context.Context, arg1 db.GetAllSystemSettingsParams) ([]db.SystemSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSystemSettings", arg0, arg1)
	ret0, _ := ret[0].([]db.SystemSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSystemSettings indicates an expected call of GetAllSystemSettings.
func (mr *MockStoreMockRecorder) GetAllSystemSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSystemSettings", reflect.TypeOf((*MockStore)(nil).GetAllSystemSettings), arg0, arg1)
}

// GetApplicationConversation mocks base method.
func (m *MockStore) GetApplicationConversation(arg0 context.Context, arg1 db.GetApplicationConversationParams) ([]db.GetApplicationConversationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationConversation", arg0, arg1)
	ret0, _ := ret[0].([]db.GetApplicationConversationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationConversation indicates an expected call of GetApplicationConversation.
func (mr *MockStoreMockRecorder) GetApplicationConversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationConversation", reflect.TypeOf((*MockStore)(nil).GetApplicationConversation), arg0, arg1)
}

// GetApprovedReportsByDateRange mocks base method.
func (m *MockStore) GetApprovedReportsByDateRange(arg0 context.Context, arg1 db.GetApprovedReportsByDateRangeParams) ([]db.GetApprovedReportsByDateRangeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApprovedReportsByDateRange", arg0, arg1)
	ret0, _ := ret[0].([]db.GetApprovedReportsByDateRangeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApprovedReportsByDateRange indicates an expected call of GetApprovedReportsByDateRange.
func (mr *MockStoreMockRecorder) GetApprovedReportsByDateRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApprovedReportsByDateRange", reflect.TypeOf((*MockStore)(nil).GetApprovedReportsByDateRange), arg0, arg1)
}

// GetAuditLogByID mocks base method.
func (m *MockStore) GetAuditLogByID(arg0 context.Context, arg1 int64) (db.AuditLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLogByID", arg0, arg1)
	ret0, _ := ret[0].(db.AuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLogByID indicates an expected call of GetAuditLogByID.
func (mr *MockStoreMockRecorder) GetAuditLogByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLogByID", reflect.TypeOf((*MockStore)(nil).GetAuditLogByID), arg0, arg1)
}

// GetAuditLogWithUserDetails mocks base method.
func (m *MockStore) GetAuditLogWithUserDetails(arg0 context.Context, arg1 int64) (db.GetAuditLogWithUserDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLogWithUserDetails", arg0, arg1)
	ret0, _ := ret[0].(db.GetAuditLogWithUserDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLogWithUserDetails indicates an expected call of GetAuditLogWithUserDetails.
func (mr *MockStoreMockRecorder) GetAuditLogWithUserDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLogWithUserDetails", reflect.TypeOf((*MockStore)(nil).GetAuditLogWithUserDetails), arg0, arg1)
}

// GetAuditLogsByAction mocks base method.
func (m *MockStore) GetAuditLogsByAction(arg0 context.Context, arg1 db.GetAuditLogsByActionParams) ([]db.GetAuditLogsByActionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLogsByAction", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAuditLogsByActionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLogsByAction indicates an expected call of GetAuditLogsByAction.
func (mr *MockStoreMockRecorder) GetAuditLogsByAction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLogsByAction", reflect.TypeOf((*MockStore)(nil).GetAuditLogsByAction), arg0, arg1)
}

// GetAuditLogsByDateRange mocks base method.
func (m *MockStore) GetAuditLogsByDateRange(arg0 context.Context, arg1 db.GetAuditLogsByDateRangeParams) ([]db.GetAuditLogsByDateRangeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLogsByDateRange", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAuditLogsByDateRangeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLogsByDateRange indicates an expected call of GetAuditLogsByDateRange.
func (mr *MockStoreMockRecorder) GetAuditLogsByDateRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLogsByDateRange", reflect.TypeOf((*MockStore)(nil).GetAuditLogsByDateRange), arg0, arg1)
}

// GetAuditLogsByEntity mocks base method.
func (m *MockStore) GetAuditLogsByEntity(arg0 context.Context, arg1 db.GetAuditLogsByEntityParams) ([]db.GetAuditLogsByEntityRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLogsByEntity", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAuditLogsByEntityRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLogsByEntity indicates an expected call of GetAuditLogsByEntity.
func (mr *MockStoreMockRecorder) GetAuditLogsByEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLogsByEntity", reflect.TypeOf((*MockStore)(nil).GetAuditLogsByEntity), arg0, arg1)
}

// GetAuditLogsByEntityType mocks base method.
func (m *MockStore) GetAuditLogsByEntityType(arg0 context.Context, arg1 db.GetAuditLogsByEntityTypeParams) ([]db.GetAuditLogsByEntityTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLogsByEntityType", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAuditLogsByEntityTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLogsByEntityType indicates an expected call of GetAuditLogsByEntityType.
func (mr *MockStoreMockRecorder) GetAuditLogsByEntityType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLogsByEntityType", reflect.TypeOf((*MockStore)(nil).GetAuditLogsByEntityType), arg0, arg1)
}

// GetAuditLogsByIPAddress mocks base method.
func (m *MockStore) GetAuditLogsByIPAddress(arg0 context.Context, arg1 db.GetAuditLogsByIPAddressParams) ([]db.GetAuditLogsByIPAddressRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLogsByIPAddress", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAuditLogsByIPAddressRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLogsByIPAddress indicates an expected call of GetAuditLogsByIPAddress.
func (mr *MockStoreMockRecorder) GetAuditLogsByIPAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLogsByIPAddress", reflect.TypeOf((*MockStore)(nil).GetAuditLogsByIPAddress), arg0, arg1)
}

// GetAuditLogsByUser mocks base method.
func (m *MockStore) GetAuditLogsByUser(arg0 context.Context, arg1 db.GetAuditLogsByUserParams) ([]db.AuditLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditLogsByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.AuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditLogsByUser indicates an expected call of GetAuditLogsByUser.
func (mr *MockStoreMockRecorder) GetAuditLogsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditLogsByUser", reflect.TypeOf((*MockStore)(nil).GetAuditLogsByUser), arg0, arg1)
}

// GetAuditStatistics mocks base method.
func (m *MockStore) GetAuditStatistics(arg0 context.Context, arg1 pgtype.Timestamptz) (db.GetAuditStatisticsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuditStatistics", arg0, arg1)
	ret0, _ := ret[0].(db.GetAuditStatisticsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuditStatistics indicates an expected call of GetAuditStatistics.
func (mr *MockStoreMockRecorder) GetAuditStatistics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuditStatistics", reflect.TypeOf((*MockStore)(nil).GetAuditStatistics), arg0, arg1)
}

// GetCacheBySearchHash mocks base method.
func (m *MockStore) GetCacheBySearchHash(arg0 context.Context, arg1 string) (db.PropertySearchCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheBySearchHash", arg0, arg1)
	ret0, _ := ret[0].(db.PropertySearchCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCacheBySearchHash indicates an expected call of GetCacheBySearchHash.
func (mr *MockStoreMockRecorder) GetCacheBySearchHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheBySearchHash", reflect.TypeOf((*MockStore)(nil).GetCacheBySearchHash), arg0, arg1)
}

// GetCacheEntriesByResultCount mocks base method.
func (m *MockStore) GetCacheEntriesByResultCount(arg0 context.Context, arg1 db.GetCacheEntriesByResultCountParams) ([]db.PropertySearchCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheEntriesByResultCount", arg0, arg1)
	ret0, _ := ret[0].([]db.PropertySearchCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCacheEntriesByResultCount indicates an expected call of GetCacheEntriesByResultCount.
func (mr *MockStoreMockRecorder) GetCacheEntriesByResultCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheEntriesByResultCount", reflect.TypeOf((*MockStore)(nil).GetCacheEntriesByResultCount), arg0, arg1)
}

// GetCacheHitStatistics mocks base method.
func (m *MockStore) GetCacheHitStatistics(arg0 context.Context, arg1 pgtype.Timestamptz) (db.GetCacheHitStatisticsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheHitStatistics", arg0, arg1)
	ret0, _ := ret[0].(db.GetCacheHitStatisticsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCacheHitStatistics indicates an expected call of GetCacheHitStatistics.
func (mr *MockStoreMockRecorder) GetCacheHitStatistics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheHitStatistics", reflect.TypeOf((*MockStore)(nil).GetCacheHitStatistics), arg0, arg1)
}

// GetCacheStatistics mocks base method.
func (m *MockStore) GetCacheStatistics(arg0 context.Context) (db.GetCacheStatisticsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheStatistics", arg0)
	ret0, _ := ret[0].(db.GetCacheStatisticsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCacheStatistics indicates an expected call of GetCacheStatistics.
func (mr *MockStoreMockRecorder) GetCacheStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheStatistics", reflect.TypeOf((*MockStore)(nil).GetCacheStatistics), arg0)
}

// GetChatbotConversationByID mocks base method.
func (m *MockStore) GetChatbotConversationByID(arg0 context.Context, arg1 int64) (db.ChatbotConversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatbotConversationByID", arg0, arg1)
	ret0, _ := ret[0].(db.ChatbotConversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatbotConversationByID indicates an expected call of GetChatbotConversationByID.
func (mr *MockStoreMockRecorder) GetChatbotConversationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatbotConversationByID", reflect.TypeOf((*MockStore)(nil).GetChatbotConversationByID), arg0, arg1)
}

// GetChatbotStatistics mocks base method.
func (m *MockStore) GetChatbotStatistics(arg0 context.Context, arg1 pgtype.Timestamptz) (db.GetChatbotStatisticsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatbotStatistics", arg0, arg1)
	ret0, _ := ret[0].(db.GetChatbotStatisticsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatbotStatistics indicates an expected call of GetChatbotStatistics.
func (mr *MockStoreMockRecorder) GetChatbotStatistics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatbotStatistics", reflect.TypeOf((*MockStore)(nil).GetChatbotStatistics), arg0, arg1)
}

// GetConversationBetweenUsers mocks base method.
func (m *MockStore) GetConversationBetweenUsers(arg0 context.Context, arg1 db.GetConversationBetweenUsersParams) ([]db.GetConversationBetweenUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationBetweenUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.GetConversationBetweenUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationBetweenUsers indicates an expected call of GetConversationBetweenUsers.
func (mr *MockStoreMockRecorder) GetConversationBetweenUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationBetweenUsers", reflect.TypeOf((*MockStore)(nil).GetConversationBetweenUsers), arg0, arg1)
}

// GetConversationsByAgent mocks base method.
func (m *MockStore) GetConversationsByAgent(arg0 context.Context, arg1 db.GetConversationsByAgentParams) ([]db.GetConversationsByAgentRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationsByAgent", arg0, arg1)
	ret0, _ := ret[0].([]db.GetConversationsByAgentRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationsByAgent indicates an expected call of GetConversationsByAgent.
func (mr *MockStoreMockRecorder) GetConversationsByAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationsByAgent", reflect.TypeOf((*MockStore)(nil).GetConversationsByAgent), arg0, arg1)
}

// GetConversationsByIntent mocks base method.
func (m *MockStore) GetConversationsByIntent(arg0 context.Context, arg1 db.GetConversationsByIntentParams) ([]db.GetConversationsByIntentRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationsByIntent", arg0, arg1)
	ret0, _ := ret[0].([]db.GetConversationsByIntentRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationsByIntent indicates an expected call of GetConversationsByIntent.
func (mr *MockStoreMockRecorder) GetConversationsByIntent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationsByIntent", reflect.TypeOf((*MockStore)(nil).GetConversationsByIntent), arg0, arg1)
}

// GetConversationsBySession mocks base method.
func (m *MockStore) GetConversationsBySession(arg0 context.Context, arg1 db.GetConversationsBySessionParams) ([]db.ChatbotConversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationsBySession", arg0, arg1)
	ret0, _ := ret[0].([]db.ChatbotConversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationsBySession indicates an expected call of GetConversationsBySession.
func (mr *MockStoreMockRecorder) GetConversationsBySession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationsBySession", reflect.TypeOf((*MockStore)(nil).GetConversationsBySession), arg0, arg1)
}

// GetConversationsByUser mocks base method.
func (m *MockStore) GetConversationsByUser(arg0 context.Context, arg1 db.GetConversationsByUserParams) ([]db.ChatbotConversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationsByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.ChatbotConversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationsByUser indicates an expected call of GetConversationsByUser.
func (mr *MockStoreMockRecorder) GetConversationsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationsByUser", reflect.TypeOf((*MockStore)(nil).GetConversationsByUser), arg0, arg1)
}

// GetDailyConversationCounts mocks base method.
func (m *MockStore) GetDailyConversationCounts(arg0 context.Context, arg1 db.GetDailyConversationCountsParams) ([]db.GetDailyConversationCountsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyConversationCounts", arg0, arg1)
	ret0, _ := ret[0].([]db.GetDailyConversationCountsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyConversationCounts indicates an expected call of GetDailyConversationCounts.
func (mr *MockStoreMockRecorder) GetDailyConversationCounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyConversationCounts", reflect.TypeOf((*MockStore)(nil).GetDailyConversationCounts), arg0, arg1)
}

// GetDisputeCaseByID mocks base method.
func (m *MockStore) GetDisputeCaseByID(arg0 context.Context, arg1 int64) (db.DisputeCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputeCaseByID", arg0, arg1)
	ret0, _ := ret[0].(db.DisputeCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputeCaseByID indicates an expected call of GetDisputeCaseByID.
func (mr *MockStoreMockRecorder) GetDisputeCaseByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputeCaseByID", reflect.TypeOf((*MockStore)(nil).GetDisputeCaseByID), arg0, arg1)
}

// GetDisputeCaseWithDetails mocks base method.
func (m *MockStore) GetDisputeCaseWithDetails(arg0 context.Context, arg1 int64) (db.GetDisputeCaseWithDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputeCaseWithDetails", arg0, arg1)
	ret0, _ := ret[0].(db.GetDisputeCaseWithDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputeCaseWithDetails indicates an expected call of GetDisputeCaseWithDetails.
func (mr *MockStoreMockRecorder) GetDisputeCaseWithDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputeCaseWithDetails", reflect.TypeOf((*MockStore)(nil).GetDisputeCaseWithDetails), arg0, arg1)
}

// GetDisputeStatistics mocks base method.
func (m *MockStore) GetDisputeStatistics(arg0 context.Context, arg1 pgtype.Timestamptz) (db.GetDisputeStatisticsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputeStatistics", arg0, arg1)
	ret0, _ := ret[0].(db.GetDisputeStatisticsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputeStatistics indicates an expected call of GetDisputeStatistics.
func (mr *MockStoreMockRecorder) GetDisputeStatistics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputeStatistics", reflect.TypeOf((*MockStore)(nil).GetDisputeStatistics), arg0, arg1)
}

// GetDisputesAssignedToAdmin mocks base method.
func (m *MockStore) GetDisputesAssignedToAdmin(arg0 context.Context, arg1 db.GetDisputesAssignedToAdminParams) ([]db.GetDisputesAssignedToAdminRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputesAssignedToAdmin", arg0, arg1)
	ret0, _ := ret[0].([]db.GetDisputesAssignedToAdminRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputesAssignedToAdmin indicates an expected call of GetDisputesAssignedToAdmin.
func (mr *MockStoreMockRecorder) GetDisputesAssignedToAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputesAssignedToAdmin", reflect.TypeOf((*MockStore)(nil).GetDisputesAssignedToAdmin), arg0, arg1)
}

// GetDisputesByEntity mocks base method.
func (m *MockStore) GetDisputesByEntity(arg0 context.Context, arg1 db.GetDisputesByEntityParams) ([]db.GetDisputesByEntityRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputesByEntity", arg0, arg1)
	ret0, _ := ret[0].([]db.GetDisputesByEntityRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputesByEntity indicates an expected call of GetDisputesByEntity.
func (mr *MockStoreMockRecorder) GetDisputesByEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputesByEntity", reflect.TypeOf((*MockStore)(nil).GetDisputesByEntity), arg0, arg1)
}

// GetDisputesByStatus mocks base method.
func (m *MockStore) GetDisputesByStatus(arg0 context.Context, arg1 db.GetDisputesByStatusParams) ([]db.GetDisputesByStatusRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputesByStatus", arg0, arg1)
	ret0, _ := ret[0].([]db.GetDisputesByStatusRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputesByStatus indicates an expected call of GetDisputesByStatus.
func (mr *MockStoreMockRecorder) GetDisputesByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputesByStatus", reflect.TypeOf((*MockStore)(nil).GetDisputesByStatus), arg0, arg1)
}

// GetDisputesByType mocks base method.
func (m *MockStore) GetDisputesByType(arg0 context.Context, arg1 db.GetDisputesByTypeParams) ([]db.GetDisputesByTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputesByType", arg0, arg1)
	ret0, _ := ret[0].([]db.GetDisputesByTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputesByType indicates an expected call of GetDisputesByType.
func (mr *MockStoreMockRecorder) GetDisputesByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputesByType", reflect.TypeOf((*MockStore)(nil).GetDisputesByType), arg0, arg1)
}

// GetDisputesForComplainant mocks base method.
func (m *MockStore) GetDisputesForComplainant(arg0 context.Context, arg1 db.GetDisputesForComplainantParams) ([]db.GetDisputesForComplainantRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputesForComplainant", arg0, arg1)
	ret0, _ := ret[0].([]db.GetDisputesForComplainantRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputesForComplainant indicates an expected call of GetDisputesForComplainant.
func (mr *MockStoreMockRecorder) GetDisputesForComplainant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputesForComplainant", reflect.TypeOf((*MockStore)(nil).GetDisputesForComplainant), arg0, arg1)
}

// GetDisputesForRespondent mocks base method.
func (m *MockStore) GetDisputesForRespondent(arg0 context.Context, arg1 db.GetDisputesForRespondentParams) ([]db.GetDisputesForRespondentRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisputesForRespondent", arg0, arg1)
	ret0, _ := ret[0].([]db.GetDisputesForRespondentRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisputesForRespondent indicates an expected call of GetDisputesForRespondent.
func (mr *MockStoreMockRecorder) GetDisputesForRespondent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisputesForRespondent", reflect.TypeOf((*MockStore)(nil).GetDisputesForRespondent), arg0, arg1)
}

// GetEscalatedConversations mocks base method.
func (m *MockStore) GetEscalatedConversations(arg0 context.Context, arg1 db.GetEscalatedConversationsParams) ([]db.GetEscalatedConversationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEscalatedConversations", arg0, arg1)
	ret0, _ := ret[0].([]db.GetEscalatedConversationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEscalatedConversations indicates an expected call of GetEscalatedConversations.
func (mr *MockStoreMockRecorder) GetEscalatedConversations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEscalatedConversations", reflect.TypeOf((*MockStore)(nil).GetEscalatedConversations), arg0, arg1)
}

// GetExpiredCacheEntries mocks base method.
func (m *MockStore) GetExpiredCacheEntries(arg0 context.Context, arg1 db.GetExpiredCacheEntriesParams) ([]db.PropertySearchCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiredCacheEntries", arg0, arg1)
	ret0, _ := ret[0].([]db.PropertySearchCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiredCacheEntries indicates an expected call of GetExpiredCacheEntries.
func (mr *MockStoreMockRecorder) GetExpiredCacheEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiredCacheEntries", reflect.TypeOf((*MockStore)(nil).GetExpiredCacheEntries), arg0, arg1)
}

// GetExpiredSessions mocks base method.
func (m *MockStore) GetExpiredSessions(arg0 context.Context, arg1 db.GetExpiredSessionsParams) ([]db.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiredSessions", arg0, arg1)
	ret0, _ := ret[0].([]db.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiredSessions indicates an expected call of GetExpiredSessions.
func (mr *MockStoreMockRecorder) GetExpiredSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiredSessions", reflect.TypeOf((*MockStore)(nil).GetExpiredSessions), arg0, arg1)
}

// GetExpiringAgreements mocks base method.
func (m *MockStore) GetExpiringAgreements(arg0 context.Context, arg1 db.GetExpiringAgreementsParams) ([]db.GetExpiringAgreementsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiringAgreements", arg0, arg1)
	ret0, _ := ret[0].([]db.GetExpiringAgreementsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpiringAgreements indicates an expected call of GetExpiringAgreements.
func (mr *MockStoreMockRecorder) GetExpiringAgreements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiringAgreements", reflect.TypeOf((*MockStore)(nil).GetExpiringAgreements), arg0, arg1)
}

// GetFailedLoginAttempts mocks base method.
func (m *MockStore) GetFailedLoginAttempts(arg0 context.Context, arg1 db.GetFailedLoginAttemptsParams) ([]db.AuditLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedLoginAttempts", arg0, arg1)
	ret0, _ := ret[0].([]db.AuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailedLoginAttempts indicates an expected call of GetFailedLoginAttempts.
func (mr *MockStoreMockRecorder) GetFailedLoginAttempts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedLoginAttempts", reflect.TypeOf((*MockStore)(nil).GetFailedLoginAttempts), arg0, arg1)
}

// GetInspectionAgentProfileByID mocks base method.
func (m *MockStore) GetInspectionAgentProfileByID(arg0 context.Context, arg1 int64) (db.InspectionAgentProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInspectionAgentProfileByID", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionAgentProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInspectionAgentProfileByID indicates an expected call of GetInspectionAgentProfileByID.
func (mr *MockStoreMockRecorder) GetInspectionAgentProfileByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInspectionAgentProfileByID", reflect.TypeOf((*MockStore)(nil).GetInspectionAgentProfileByID), arg0, arg1)
}

// GetInspectionAgentProfileByUserID mocks base method.
func (m *MockStore) GetInspectionAgentProfileByUserID(arg0 context.Context, arg1 int64) (db.InspectionAgentProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInspectionAgentProfileByUserID", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionAgentProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInspectionAgentProfileByUserID indicates an expected call of GetInspectionAgentProfileByUserID.
func (mr *MockStoreMockRecorder) GetInspectionAgentProfileByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInspectionAgentProfileByUserID", reflect.TypeOf((*MockStore)(nil).GetInspectionAgentProfileByUserID), arg0, arg1)
}

// GetInspectionConversation mocks base method.
func (m *MockStore) GetInspectionConversation(arg0 context.Context, arg1 db.GetInspectionConversationParams) ([]db.GetInspectionConversationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInspectionConversation", arg0, arg1)
	ret0, _ := ret[0].([]db.GetInspectionConversationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInspectionConversation indicates an expected call of GetInspectionConversation.
func (mr *MockStoreMockRecorder) GetInspectionConversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInspectionConversation", reflect.TypeOf((*MockStore)(nil).GetInspectionConversation), arg0, arg1)
}

// GetInspectionReportByID mocks base method.
func (m *MockStore) GetInspectionReportByID(arg0 context.Context, arg1 int64) (db.InspectionReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInspectionReportByID", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInspectionReportByID indicates an expected call of GetInspectionReportByID.
func (mr *MockStoreMockRecorder) GetInspectionReportByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInspectionReportByID", reflect.TypeOf((*MockStore)(nil).GetInspectionReportByID), arg0, arg1)
}

// GetInspectionReportByRequestID mocks base method.
func (m *MockStore) GetInspectionReportByRequestID(arg0 context.Context, arg1 int64) (db.InspectionReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInspectionReportByRequestID", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInspectionReportByRequestID indicates an expected call of GetInspectionReportByRequestID.
func (mr *MockStoreMockRecorder) GetInspectionReportByRequestID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInspectionReportByRequestID", reflect.TypeOf((*MockStore)(nil).GetInspectionReportByRequestID), arg0, arg1)
}

// GetInspectionReportWithDetails mocks base method.
func (m *MockStore) GetInspectionReportWithDetails(arg0 context.Context, arg1 int64) (db.GetInspectionReportWithDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInspectionReportWithDetails", arg0, arg1)
	ret0, _ := ret[0].(db.GetInspectionReportWithDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInspectionReportWithDetails indicates an expected call of GetInspectionReportWithDetails.
func (mr *MockStoreMockRecorder) GetInspectionReportWithDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInspectionReportWithDetails", reflect.TypeOf((*MockStore)(nil).GetInspectionReportWithDetails), arg0, arg1)
}

// GetInspectionRequestByID mocks base method.
func (m *MockStore) GetInspectionRequestByID(arg0 context.Context, arg1 int64) (db.InspectionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInspectionRequestByID", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInspectionRequestByID indicates an expected call of GetInspectionRequestByID.
func (mr *MockStoreMockRecorder) GetInspectionRequestByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInspectionRequestByID", reflect.TypeOf((*MockStore)(nil).GetInspectionRequestByID), arg0, arg1)
}

// GetInspectionRequestWithDetails mocks base method.
func (m *MockStore) GetInspectionRequestWithDetails(arg0 context.Context, arg1 int64) (db.GetInspectionRequestWithDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInspectionRequestWithDetails", arg0, arg1)
	ret0, _ := ret[0].(db.GetInspectionRequestWithDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInspectionRequestWithDetails indicates an expected call of GetInspectionRequestWithDetails.
func (mr *MockStoreMockRecorder) GetInspectionRequestWithDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInspectionRequestWithDetails", reflect.TypeOf((*MockStore)(nil).GetInspectionRequestWithDetails), arg0, arg1)
}

// GetInspectionsByDateRange mocks base method.
func (m *MockStore) GetInspectionsByDateRange(arg0 context.Context, arg1 db.GetInspectionsByDateRangeParams) ([]db.GetInspectionsByDateRangeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInspectionsByDateRange", arg0, arg1)
	ret0, _ := ret[0].([]db.GetInspectionsByDateRangeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInspectionsByDateRange indicates an expected call of GetInspectionsByDateRange.
func (mr *MockStoreMockRecorder) GetInspectionsByDateRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInspectionsByDateRange", reflect.TypeOf((*MockStore)(nil).GetInspectionsByDateRange), arg0, arg1)
}

// GetIntentStatistics mocks base method.
func (m *MockStore) GetIntentStatistics(arg0 context.Context, arg1 db.GetIntentStatisticsParams) ([]db.GetIntentStatisticsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntentStatistics", arg0, arg1)
	ret0, _ := ret[0].([]db.GetIntentStatisticsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntentStatistics indicates an expected call of GetIntentStatistics.
func (mr *MockStoreMockRecorder) GetIntentStatistics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntentStatistics", reflect.TypeOf((*MockStore)(nil).GetIntentStatistics), arg0, arg1)
}

// GetLandlordApplicationStats mocks base method.
func (m *MockStore) GetLandlordApplicationStats(arg0 context.Context, arg1 int64) (db.GetLandlordApplicationStatsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandlordApplicationStats", arg0, arg1)
	ret0, _ := ret[0].(db.GetLandlordApplicationStatsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandlordApplicationStats indicates an expected call of GetLandlordApplicationStats.
func (mr *MockStoreMockRecorder) GetLandlordApplicationStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandlordApplicationStats", reflect.TypeOf((*MockStore)(nil).GetLandlordApplicationStats), arg0, arg1)
}

// GetLandlordInquiries mocks base method.
func (m *MockStore) GetLandlordInquiries(arg0 context.Context, arg1 db.GetLandlordInquiriesParams) ([]db.GetLandlordInquiriesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandlordInquiries", arg0, arg1)
	ret0, _ := ret[0].([]db.GetLandlordInquiriesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandlordInquiries indicates an expected call of GetLandlordInquiries.
func (mr *MockStoreMockRecorder) GetLandlordInquiries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandlordInquiries", reflect.TypeOf((*MockStore)(nil).GetLandlordInquiries), arg0, arg1)
}

// GetLandlordInquiryStats mocks base method.
func (m *MockStore) GetLandlordInquiryStats(arg0 context.Context, arg1 int64) (db.GetLandlordInquiryStatsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandlordInquiryStats", arg0, arg1)
	ret0, _ := ret[0].(db.GetLandlordInquiryStatsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandlordInquiryStats indicates an expected call of GetLandlordInquiryStats.
func (mr *MockStoreMockRecorder) GetLandlordInquiryStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandlordInquiryStats", reflect.TypeOf((*MockStore)(nil).GetLandlordInquiryStats), arg0, arg1)
}

// GetLandlordInspectionRequests mocks base method.
func (m *MockStore) GetLandlordInspectionRequests(arg0 context.Context, arg1 db.GetLandlordInspectionRequestsParams) ([]db.GetLandlordInspectionRequestsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandlordInspectionRequests", arg0, arg1)
	ret0, _ := ret[0].([]db.GetLandlordInspectionRequestsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandlordInspectionRequests indicates an expected call of GetLandlordInspectionRequests.
func (mr *MockStoreMockRecorder) GetLandlordInspectionRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandlordInspectionRequests", reflect.TypeOf((*MockStore)(nil).GetLandlordInspectionRequests), arg0, arg1)
}

// GetLandlordProfileByID mocks base method.
func (m *MockStore) GetLandlordProfileByID(arg0 context.Context, arg1 int64) (db.LandlordProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandlordProfileByID", arg0, arg1)
	ret0, _ := ret[0].(db.LandlordProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandlordProfileByID indicates an expected call of GetLandlordProfileByID.
func (mr *MockStoreMockRecorder) GetLandlordProfileByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandlordProfileByID", reflect.TypeOf((*MockStore)(nil).GetLandlordProfileByID), arg0, arg1)
}

// GetLandlordProfileByUserID mocks base method.
func (m *MockStore) GetLandlordProfileByUserID(arg0 context.Context, arg1 int64) (db.LandlordProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandlordProfileByUserID", arg0, arg1)
	ret0, _ := ret[0].(db.LandlordProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandlordProfileByUserID indicates an expected call of GetLandlordProfileByUserID.
func (mr *MockStoreMockRecorder) GetLandlordProfileByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandlordProfileByUserID", reflect.TypeOf((*MockStore)(nil).GetLandlordProfileByUserID), arg0, arg1)
}

// GetLandlordRatings mocks base method.
func (m *MockStore) GetLandlordRatings(arg0 context.Context, arg1 db.GetLandlordRatingsParams) ([]db.GetLandlordRatingsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandlordRatings", arg0, arg1)
	ret0, _ := ret[0].([]db.GetLandlordRatingsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandlordRatings indicates an expected call of GetLandlordRatings.
func (mr *MockStoreMockRecorder) GetLandlordRatings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandlordRatings", reflect.TypeOf((*MockStore)(nil).GetLandlordRatings), arg0, arg1)
}

// GetLandlordRentalAgreements mocks base method.
func (m *MockStore) GetLandlordRentalAgreements(arg0 context.Context, arg1 db.GetLandlordRentalAgreementsParams) ([]db.GetLandlordRentalAgreementsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandlordRentalAgreements", arg0, arg1)
	ret0, _ := ret[0].([]db.GetLandlordRentalAgreementsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandlordRentalAgreements indicates an expected call of GetLandlordRentalAgreements.
func (mr *MockStoreMockRecorder) GetLandlordRentalAgreements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandlordRentalAgreements", reflect.TypeOf((*MockStore)(nil).GetLandlordRentalAgreements), arg0, arg1)
}

// GetLandlordRentalApplications mocks base method.
func (m *MockStore) GetLandlordRentalApplications(arg0 context.Context, arg1 db.GetLandlordRentalApplicationsParams) ([]db.GetLandlordRentalApplicationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLandlordRentalApplications", arg0, arg1)
	ret0, _ := ret[0].([]db.GetLandlordRentalApplicationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLandlordRentalApplications indicates an expected call of GetLandlordRentalApplications.
func (mr *MockStoreMockRecorder) GetLandlordRentalApplications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLandlordRentalApplications", reflect.TypeOf((*MockStore)(nil).GetLandlordRentalApplications), arg0, arg1)
}

// GetLowConfidenceConversations mocks base method.
func (m *MockStore) GetLowConfidenceConversations(arg0 context.Context, arg1 db.GetLowConfidenceConversationsParams) ([]db.GetLowConfidenceConversationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLowConfidenceConversations", arg0, arg1)
	ret0, _ := ret[0].([]db.GetLowConfidenceConversationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLowConfidenceConversations indicates an expected call of GetLowConfidenceConversations.
func (mr *MockStoreMockRecorder) GetLowConfidenceConversations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLowConfidenceConversations", reflect.TypeOf((*MockStore)(nil).GetLowConfidenceConversations), arg0, arg1)
}

// GetMessageByID mocks base method.
func (m *MockStore) GetMessageByID(arg0 context.Context, arg1 int64) (db.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByID", arg0, arg1)
	ret0, _ := ret[0].(db.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByID indicates an expected call of GetMessageByID.
func (mr *MockStoreMockRecorder) GetMessageByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByID", reflect.TypeOf((*MockStore)(nil).GetMessageByID), arg0, arg1)
}

// GetMessageWithSenderDetails mocks base method.
func (m *MockStore) GetMessageWithSenderDetails(arg0 context.Context, arg1 int64) (db.GetMessageWithSenderDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageWithSenderDetails", arg0, arg1)
	ret0, _ := ret[0].(db.GetMessageWithSenderDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageWithSenderDetails indicates an expected call of GetMessageWithSenderDetails.
func (mr *MockStoreMockRecorder) GetMessageWithSenderDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageWithSenderDetails", reflect.TypeOf((*MockStore)(nil).GetMessageWithSenderDetails), arg0, arg1)
}

// GetMessagesByProperty mocks base method.
func (m *MockStore) GetMessagesByProperty(arg0 context.Context, arg1 db.GetMessagesByPropertyParams) ([]db.GetMessagesByPropertyRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesByProperty", arg0, arg1)
	ret0, _ := ret[0].([]db.GetMessagesByPropertyRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByProperty indicates an expected call of GetMessagesByProperty.
func (mr *MockStoreMockRecorder) GetMessagesByProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesByProperty", reflect.TypeOf((*MockStore)(nil).GetMessagesByProperty), arg0, arg1)
}

// GetMostCachedSearches mocks base method.
func (m *MockStore) GetMostCachedSearches(arg0 context.Context, arg1 db.GetMostCachedSearchesParams) ([]db.GetMostCachedSearchesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostCachedSearches", arg0, arg1)
	ret0, _ := ret[0].([]db.GetMostCachedSearchesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostCachedSearches indicates an expected call of GetMostCachedSearches.
func (mr *MockStoreMockRecorder) GetMostCachedSearches(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostCachedSearches", reflect.TypeOf((*MockStore)(nil).GetMostCachedSearches), arg0, arg1)
}

// GetMostSavedProperties mocks base method.
func (m *MockStore) GetMostSavedProperties(arg0 context.Context, arg1 db.GetMostSavedPropertiesParams) ([]db.GetMostSavedPropertiesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostSavedProperties", arg0, arg1)
	ret0, _ := ret[0].([]db.GetMostSavedPropertiesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostSavedProperties indicates an expected call of GetMostSavedProperties.
func (mr *MockStoreMockRecorder) GetMostSavedProperties(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostSavedProperties", reflect.TypeOf((*MockStore)(nil).GetMostSavedProperties), arg0, arg1)
}

// GetNotificationByID mocks base method.
func (m *MockStore) GetNotificationByID(arg0 context.Context, arg1 int64) (db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationByID", arg0, arg1)
	ret0, _ := ret[0].(db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationByID indicates an expected call of GetNotificationByID.
func (mr *MockStoreMockRecorder) GetNotificationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationByID", reflect.TypeOf((*MockStore)(nil).GetNotificationByID), arg0, arg1)
}

// GetNotificationsByDateRange mocks base method.
func (m *MockStore) GetNotificationsByDateRange(arg0 context.Context, arg1 db.GetNotificationsByDateRangeParams) ([]db.GetNotificationsByDateRangeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationsByDateRange", arg0, arg1)
	ret0, _ := ret[0].([]db.GetNotificationsByDateRangeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationsByDateRange indicates an expected call of GetNotificationsByDateRange.
func (mr *MockStoreMockRecorder) GetNotificationsByDateRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationsByDateRange", reflect.TypeOf((*MockStore)(nil).GetNotificationsByDateRange), arg0, arg1)
}

// GetNotificationsByEntity mocks base method.
func (m *MockStore) GetNotificationsByEntity(arg0 context.Context, arg1 db.GetNotificationsByEntityParams) ([]db.GetNotificationsByEntityRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationsByEntity", arg0, arg1)
	ret0, _ := ret[0].([]db.GetNotificationsByEntityRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationsByEntity indicates an expected call of GetNotificationsByEntity.
func (mr *MockStoreMockRecorder) GetNotificationsByEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationsByEntity", reflect.TypeOf((*MockStore)(nil).GetNotificationsByEntity), arg0, arg1)
}

// GetNotificationsByTypeForUser mocks base method.
func (m *MockStore) GetNotificationsByTypeForUser(arg0 context.Context, arg1 db.GetNotificationsByTypeForUserParams) ([]db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationsByTypeForUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationsByTypeForUser indicates an expected call of GetNotificationsByTypeForUser.
func (mr *MockStoreMockRecorder) GetNotificationsByTypeForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationsByTypeForUser", reflect.TypeOf((*MockStore)(nil).GetNotificationsByTypeForUser), arg0, arg1)
}

// GetOpenDisputes mocks base method.
func (m *MockStore) GetOpenDisputes(arg0 context.Context, arg1 db.GetOpenDisputesParams) ([]db.GetOpenDisputesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenDisputes", arg0, arg1)
	ret0, _ := ret[0].([]db.GetOpenDisputesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenDisputes indicates an expected call of GetOpenDisputes.
func (mr *MockStoreMockRecorder) GetOpenDisputes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenDisputes", reflect.TypeOf((*MockStore)(nil).GetOpenDisputes), arg0, arg1)
}

// GetPaymentAuditLogs mocks base method.
func (m *MockStore) GetPaymentAuditLogs(arg0 context.Context, arg1 db.GetPaymentAuditLogsParams) ([]db.GetPaymentAuditLogsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentAuditLogs", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPaymentAuditLogsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentAuditLogs indicates an expected call of GetPaymentAuditLogs.
func (mr *MockStoreMockRecorder) GetPaymentAuditLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentAuditLogs", reflect.TypeOf((*MockStore)(nil).GetPaymentAuditLogs), arg0, arg1)
}

// GetPaymentByGatewayReference mocks base method.
func (m *MockStore) GetPaymentByGatewayReference(arg0 context.Context, arg1 pgtype.Text) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByGatewayReference", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByGatewayReference indicates an expected call of GetPaymentByGatewayReference.
func (mr *MockStoreMockRecorder) GetPaymentByGatewayReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByGatewayReference", reflect.TypeOf((*MockStore)(nil).GetPaymentByGatewayReference), arg0, arg1)
}

// GetPaymentByID mocks base method.
func (m *MockStore) GetPaymentByID(arg0 context.Context, arg1 int64) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByID", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByID indicates an expected call of GetPaymentByID.
func (mr *MockStoreMockRecorder) GetPaymentByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByID", reflect.TypeOf((*MockStore)(nil).GetPaymentByID), arg0, arg1)
}

// GetPaymentByReference mocks base method.
func (m *MockStore) GetPaymentByReference(arg0 context.Context, arg1 string) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByReference", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByReference indicates an expected call of GetPaymentByReference.
func (mr *MockStoreMockRecorder) GetPaymentByReference(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByReference", reflect.TypeOf((*MockStore)(nil).GetPaymentByReference), arg0, arg1)
}

// GetPaymentStatistics mocks base method.
func (m *MockStore) GetPaymentStatistics(arg0 context.Context) (db.GetPaymentStatisticsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentStatistics", arg0)
	ret0, _ := ret[0].(db.GetPaymentStatisticsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentStatistics indicates an expected call of GetPaymentStatistics.
func (mr *MockStoreMockRecorder) GetPaymentStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentStatistics", reflect.TypeOf((*MockStore)(nil).GetPaymentStatistics), arg0)
}

// GetPaymentWithDetails mocks base method.
func (m *MockStore) GetPaymentWithDetails(arg0 context.Context, arg1 int64) (db.GetPaymentWithDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentWithDetails", arg0, arg1)
	ret0, _ := ret[0].(db.GetPaymentWithDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentWithDetails indicates an expected call of GetPaymentWithDetails.
func (mr *MockStoreMockRecorder) GetPaymentWithDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentWithDetails", reflect.TypeOf((*MockStore)(nil).GetPaymentWithDetails), arg0, arg1)
}

// GetPaymentsByDateRange mocks base method.
func (m *MockStore) GetPaymentsByDateRange(arg0 context.Context, arg1 db.GetPaymentsByDateRangeParams) ([]db.GetPaymentsByDateRangeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByDateRange", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPaymentsByDateRangeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByDateRange indicates an expected call of GetPaymentsByDateRange.
func (mr *MockStoreMockRecorder) GetPaymentsByDateRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByDateRange", reflect.TypeOf((*MockStore)(nil).GetPaymentsByDateRange), arg0, arg1)
}

// GetPaymentsByEntity mocks base method.
func (m *MockStore) GetPaymentsByEntity(arg0 context.Context, arg1 db.GetPaymentsByEntityParams) ([]db.GetPaymentsByEntityRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByEntity", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPaymentsByEntityRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByEntity indicates an expected call of GetPaymentsByEntity.
func (mr *MockStoreMockRecorder) GetPaymentsByEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByEntity", reflect.TypeOf((*MockStore)(nil).GetPaymentsByEntity), arg0, arg1)
}

// GetPaymentsByStatus mocks base method.
func (m *MockStore) GetPaymentsByStatus(arg0 context.Context, arg1 db.GetPaymentsByStatusParams) ([]db.GetPaymentsByStatusRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByStatus", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPaymentsByStatusRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByStatus indicates an expected call of GetPaymentsByStatus.
func (mr *MockStoreMockRecorder) GetPaymentsByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByStatus", reflect.TypeOf((*MockStore)(nil).GetPaymentsByStatus), arg0, arg1)
}

// GetPaymentsByType mocks base method.
func (m *MockStore) GetPaymentsByType(arg0 context.Context, arg1 db.GetPaymentsByTypeParams) ([]db.GetPaymentsByTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsByType", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPaymentsByTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsByType indicates an expected call of GetPaymentsByType.
func (mr *MockStoreMockRecorder) GetPaymentsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsByType", reflect.TypeOf((*MockStore)(nil).GetPaymentsByType), arg0, arg1)
}

// GetPendingApplicationsForLandlord mocks base method.
func (m *MockStore) GetPendingApplicationsForLandlord(arg0 context.Context, arg1 db.GetPendingApplicationsForLandlordParams) ([]db.GetPendingApplicationsForLandlordRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingApplicationsForLandlord", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPendingApplicationsForLandlordRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingApplicationsForLandlord indicates an expected call of GetPendingApplicationsForLandlord.
func (mr *MockStoreMockRecorder) GetPendingApplicationsForLandlord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingApplicationsForLandlord", reflect.TypeOf((*MockStore)(nil).GetPendingApplicationsForLandlord), arg0, arg1)
}

// GetPendingApprovalReports mocks base method.
func (m *MockStore) GetPendingApprovalReports(arg0 context.Context, arg1 db.GetPendingApprovalReportsParams) ([]db.GetPendingApprovalReportsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingApprovalReports", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPendingApprovalReportsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingApprovalReports indicates an expected call of GetPendingApprovalReports.
func (mr *MockStoreMockRecorder) GetPendingApprovalReports(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingApprovalReports", reflect.TypeOf((*MockStore)(nil).GetPendingApprovalReports), arg0, arg1)
}

// GetPendingEmailNotifications mocks base method.
func (m *MockStore) GetPendingEmailNotifications(arg0 context.Context, arg1 db.GetPendingEmailNotificationsParams) ([]db.GetPendingEmailNotificationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingEmailNotifications", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPendingEmailNotificationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingEmailNotifications indicates an expected call of GetPendingEmailNotifications.
func (mr *MockStoreMockRecorder) GetPendingEmailNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingEmailNotifications", reflect.TypeOf((*MockStore)(nil).GetPendingEmailNotifications), arg0, arg1)
}

// GetPendingInspectionsForAgents mocks base method.
func (m *MockStore) GetPendingInspectionsForAgents(arg0 context.Context, arg1 db.GetPendingInspectionsForAgentsParams) ([]db.GetPendingInspectionsForAgentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingInspectionsForAgents", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPendingInspectionsForAgentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingInspectionsForAgents indicates an expected call of GetPendingInspectionsForAgents.
func (mr *MockStoreMockRecorder) GetPendingInspectionsForAgents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingInspectionsForAgents", reflect.TypeOf((*MockStore)(nil).GetPendingInspectionsForAgents), arg0, arg1)
}

// GetPendingPayments mocks base method.
func (m *MockStore) GetPendingPayments(arg0 context.Context, arg1 db.GetPendingPaymentsParams) ([]db.GetPendingPaymentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingPayments", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPendingPaymentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingPayments indicates an expected call of GetPendingPayments.
func (mr *MockStoreMockRecorder) GetPendingPayments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingPayments", reflect.TypeOf((*MockStore)(nil).GetPendingPayments), arg0, arg1)
}

// GetPendingPushNotifications mocks base method.
func (m *MockStore) GetPendingPushNotifications(arg0 context.Context, arg1 db.GetPendingPushNotificationsParams) ([]db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingPushNotifications", arg0, arg1)
	ret0, _ := ret[0].([]db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingPushNotifications indicates an expected call of GetPendingPushNotifications.
func (mr *MockStoreMockRecorder) GetPendingPushNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingPushNotifications", reflect.TypeOf((*MockStore)(nil).GetPendingPushNotifications), arg0, arg1)
}

// GetPendingSMSNotifications mocks base method.
func (m *MockStore) GetPendingSMSNotifications(arg0 context.Context, arg1 db.GetPendingSMSNotificationsParams) ([]db.GetPendingSMSNotificationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingSMSNotifications", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPendingSMSNotificationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingSMSNotifications indicates an expected call of GetPendingSMSNotifications.
func (mr *MockStoreMockRecorder) GetPendingSMSNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingSMSNotifications", reflect.TypeOf((*MockStore)(nil).GetPendingSMSNotifications), arg0, arg1)
}

// GetPopularSearchCaches mocks base method.
func (m *MockStore) GetPopularSearchCaches(arg0 context.Context, arg1 db.GetPopularSearchCachesParams) ([]db.GetPopularSearchCachesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopularSearchCaches", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPopularSearchCachesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopularSearchCaches indicates an expected call of GetPopularSearchCaches.
func (mr *MockStoreMockRecorder) GetPopularSearchCaches(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopularSearchCaches", reflect.TypeOf((*MockStore)(nil).GetPopularSearchCaches), arg0, arg1)
}

// GetPrimaryPropertyMedia mocks base method.
func (m *MockStore) GetPrimaryPropertyMedia(arg0 context.Context, arg1 int64) (db.PropertyMedium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrimaryPropertyMedia", arg0, arg1)
	ret0, _ := ret[0].(db.PropertyMedium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrimaryPropertyMedia indicates an expected call of GetPrimaryPropertyMedia.
func (mr *MockStoreMockRecorder) GetPrimaryPropertyMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrimaryPropertyMedia", reflect.TypeOf((*MockStore)(nil).GetPrimaryPropertyMedia), arg0, arg1)
}

// GetPropertyAverageRatings mocks base method.
func (m *MockStore) GetPropertyAverageRatings(arg0 context.Context, arg1 int64) (db.GetPropertyAverageRatingsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyAverageRatings", arg0, arg1)
	ret0, _ := ret[0].(db.GetPropertyAverageRatingsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyAverageRatings indicates an expected call of GetPropertyAverageRatings.
func (mr *MockStoreMockRecorder) GetPropertyAverageRatings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyAverageRatings", reflect.TypeOf((*MockStore)(nil).GetPropertyAverageRatings), arg0, arg1)
}

// GetPropertyByID mocks base method.
func (m *MockStore) GetPropertyByID(arg0 context.Context, arg1 int64) (db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyByID", arg0, arg1)
	ret0, _ := ret[0].(db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyByID indicates an expected call of GetPropertyByID.
func (mr *MockStoreMockRecorder) GetPropertyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyByID", reflect.TypeOf((*MockStore)(nil).GetPropertyByID), arg0, arg1)
}

// GetPropertyCommunityReviewByID mocks base method.
func (m *MockStore) GetPropertyCommunityReviewByID(arg0 context.Context, arg1 int64) (db.PropertyCommunityReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyCommunityReviewByID", arg0, arg1)
	ret0, _ := ret[0].(db.PropertyCommunityReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyCommunityReviewByID indicates an expected call of GetPropertyCommunityReviewByID.
func (mr *MockStoreMockRecorder) GetPropertyCommunityReviewByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyCommunityReviewByID", reflect.TypeOf((*MockStore)(nil).GetPropertyCommunityReviewByID), arg0, arg1)
}

// GetPropertyCommunityReviews mocks base method.
func (m *MockStore) GetPropertyCommunityReviews(arg0 context.Context, arg1 db.GetPropertyCommunityReviewsParams) ([]db.GetPropertyCommunityReviewsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyCommunityReviews", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPropertyCommunityReviewsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyCommunityReviews indicates an expected call of GetPropertyCommunityReviews.
func (mr *MockStoreMockRecorder) GetPropertyCommunityReviews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyCommunityReviews", reflect.TypeOf((*MockStore)(nil).GetPropertyCommunityReviews), arg0, arg1)
}

// GetPropertyConversation mocks base method.
func (m *MockStore) GetPropertyConversation(arg0 context.Context, arg1 db.GetPropertyConversationParams) ([]db.GetPropertyConversationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyConversation", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPropertyConversationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyConversation indicates an expected call of GetPropertyConversation.
func (mr *MockStoreMockRecorder) GetPropertyConversation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyConversation", reflect.TypeOf((*MockStore)(nil).GetPropertyConversation), arg0, arg1)
}

// GetPropertyInquiries mocks base method.
func (m *MockStore) GetPropertyInquiries(arg0 context.Context, arg1 db.GetPropertyInquiriesParams) ([]db.GetPropertyInquiriesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyInquiries", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPropertyInquiriesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyInquiries indicates an expected call of GetPropertyInquiries.
func (mr *MockStoreMockRecorder) GetPropertyInquiries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyInquiries", reflect.TypeOf((*MockStore)(nil).GetPropertyInquiries), arg0, arg1)
}

// GetPropertyInquiryByID mocks base method.
func (m *MockStore) GetPropertyInquiryByID(arg0 context.Context, arg1 int64) (db.PropertyInquiry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyInquiryByID", arg0, arg1)
	ret0, _ := ret[0].(db.PropertyInquiry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyInquiryByID indicates an expected call of GetPropertyInquiryByID.
func (mr *MockStoreMockRecorder) GetPropertyInquiryByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyInquiryByID", reflect.TypeOf((*MockStore)(nil).GetPropertyInquiryByID), arg0, arg1)
}

// GetPropertyInquiryWithDetails mocks base method.
func (m *MockStore) GetPropertyInquiryWithDetails(arg0 context.Context, arg1 int64) (db.GetPropertyInquiryWithDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyInquiryWithDetails", arg0, arg1)
	ret0, _ := ret[0].(db.GetPropertyInquiryWithDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyInquiryWithDetails indicates an expected call of GetPropertyInquiryWithDetails.
func (mr *MockStoreMockRecorder) GetPropertyInquiryWithDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyInquiryWithDetails", reflect.TypeOf((*MockStore)(nil).GetPropertyInquiryWithDetails), arg0, arg1)
}

// GetPropertyMediaByID mocks base method.
func (m *MockStore) GetPropertyMediaByID(arg0 context.Context, arg1 int64) (db.PropertyMedium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyMediaByID", arg0, arg1)
	ret0, _ := ret[0].(db.PropertyMedium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyMediaByID indicates an expected call of GetPropertyMediaByID.
func (mr *MockStoreMockRecorder) GetPropertyMediaByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyMediaByID", reflect.TypeOf((*MockStore)(nil).GetPropertyMediaByID), arg0, arg1)
}

// GetPropertyMediaByPropertyID mocks base method.
func (m *MockStore) GetPropertyMediaByPropertyID(arg0 context.Context, arg1 int64) ([]db.PropertyMedium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyMediaByPropertyID", arg0, arg1)
	ret0, _ := ret[0].([]db.PropertyMedium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyMediaByPropertyID indicates an expected call of GetPropertyMediaByPropertyID.
func (mr *MockStoreMockRecorder) GetPropertyMediaByPropertyID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyMediaByPropertyID", reflect.TypeOf((*MockStore)(nil).GetPropertyMediaByPropertyID), arg0, arg1)
}

// GetPropertyMediaByType mocks base method.
func (m *MockStore) GetPropertyMediaByType(arg0 context.Context, arg1 db.GetPropertyMediaByTypeParams) ([]db.PropertyMedium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyMediaByType", arg0, arg1)
	ret0, _ := ret[0].([]db.PropertyMedium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyMediaByType indicates an expected call of GetPropertyMediaByType.
func (mr *MockStoreMockRecorder) GetPropertyMediaByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyMediaByType", reflect.TypeOf((*MockStore)(nil).GetPropertyMediaByType), arg0, arg1)
}

// GetPropertyRentalApplications mocks base method.
func (m *MockStore) GetPropertyRentalApplications(arg0 context.Context, arg1 db.GetPropertyRentalApplicationsParams) ([]db.GetPropertyRentalApplicationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyRentalApplications", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPropertyRentalApplicationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyRentalApplications indicates an expected call of GetPropertyRentalApplications.
func (mr *MockStoreMockRecorder) GetPropertyRentalApplications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyRentalApplications", reflect.TypeOf((*MockStore)(nil).GetPropertyRentalApplications), arg0, arg1)
}

// GetPropertySearchCacheByID mocks base method.
func (m *MockStore) GetPropertySearchCacheByID(arg0 context.Context, arg1 int64) (db.PropertySearchCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertySearchCacheByID", arg0, arg1)
	ret0, _ := ret[0].(db.PropertySearchCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertySearchCacheByID indicates an expected call of GetPropertySearchCacheByID.
func (mr *MockStoreMockRecorder) GetPropertySearchCacheByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertySearchCacheByID", reflect.TypeOf((*MockStore)(nil).GetPropertySearchCacheByID), arg0, arg1)
}

// GetPropertyWithLandlord mocks base method.
func (m *MockStore) GetPropertyWithLandlord(arg0 context.Context, arg1 int64) (db.GetPropertyWithLandlordRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPropertyWithLandlord", arg0, arg1)
	ret0, _ := ret[0].(db.GetPropertyWithLandlordRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPropertyWithLandlord indicates an expected call of GetPropertyWithLandlord.
func (mr *MockStoreMockRecorder) GetPropertyWithLandlord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPropertyWithLandlord", reflect.TypeOf((*MockStore)(nil).GetPropertyWithLandlord), arg0, arg1)
}

// GetPublicSystemSettings mocks base method.
func (m *MockStore) GetPublicSystemSettings(arg0 context.Context) ([]db.GetPublicSystemSettingsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicSystemSettings", arg0)
	ret0, _ := ret[0].([]db.GetPublicSystemSettingsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicSystemSettings indicates an expected call of GetPublicSystemSettings.
func (mr *MockStoreMockRecorder) GetPublicSystemSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicSystemSettings", reflect.TypeOf((*MockStore)(nil).GetPublicSystemSettings), arg0)
}

// GetRatingForEntity mocks base method.
func (m *MockStore) GetRatingForEntity(arg0 context.Context, arg1 db.GetRatingForEntityParams) (db.GetRatingForEntityRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingForEntity", arg0, arg1)
	ret0, _ := ret[0].(db.GetRatingForEntityRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatingForEntity indicates an expected call of GetRatingForEntity.
func (mr *MockStoreMockRecorder) GetRatingForEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingForEntity", reflect.TypeOf((*MockStore)(nil).GetRatingForEntity), arg0, arg1)
}

// GetRatingsByTypeForUser mocks base method.
func (m *MockStore) GetRatingsByTypeForUser(arg0 context.Context, arg1 db.GetRatingsByTypeForUserParams) ([]db.GetRatingsByTypeForUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingsByTypeForUser", arg0, arg1)
	ret0, _ := ret[0].([]db.GetRatingsByTypeForUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatingsByTypeForUser indicates an expected call of GetRatingsByTypeForUser.
func (mr *MockStoreMockRecorder) GetRatingsByTypeForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingsByTypeForUser", reflect.TypeOf((*MockStore)(nil).GetRatingsByTypeForUser), arg0, arg1)
}

// GetRatingsByUser mocks base method.
func (m *MockStore) GetRatingsByUser(arg0 context.Context, arg1 db.GetRatingsByUserParams) ([]db.GetRatingsByUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingsByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.GetRatingsByUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatingsByUser indicates an expected call of GetRatingsByUser.
func (mr *MockStoreMockRecorder) GetRatingsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingsByUser", reflect.TypeOf((*MockStore)(nil).GetRatingsByUser), arg0, arg1)
}

// GetRatingsForUser mocks base method.
func (m *MockStore) GetRatingsForUser(arg0 context.Context, arg1 db.GetRatingsForUserParams) ([]db.GetRatingsForUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRatingsForUser", arg0, arg1)
	ret0, _ := ret[0].([]db.GetRatingsForUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRatingsForUser indicates an expected call of GetRatingsForUser.
func (mr *MockStoreMockRecorder) GetRatingsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRatingsForUser", reflect.TypeOf((*MockStore)(nil).GetRatingsForUser), arg0, arg1)
}

// GetRecentAuditLogs mocks base method.
func (m *MockStore) GetRecentAuditLogs(arg0 context.Context, arg1 db.GetRecentAuditLogsParams) ([]db.GetRecentAuditLogsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentAuditLogs", arg0, arg1)
	ret0, _ := ret[0].([]db.GetRecentAuditLogsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentAuditLogs indicates an expected call of GetRecentAuditLogs.
func (mr *MockStoreMockRecorder) GetRecentAuditLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentAuditLogs", reflect.TypeOf((*MockStore)(nil).GetRecentAuditLogs), arg0, arg1)
}

// GetRecentChatbotConversations mocks base method.
func (m *MockStore) GetRecentChatbotConversations(arg0 context.Context, arg1 db.GetRecentChatbotConversationsParams) ([]db.GetRecentChatbotConversationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentChatbotConversations", arg0, arg1)
	ret0, _ := ret[0].([]db.GetRecentChatbotConversationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentChatbotConversations indicates an expected call of GetRecentChatbotConversations.
func (mr *MockStoreMockRecorder) GetRecentChatbotConversations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentChatbotConversations", reflect.TypeOf((*MockStore)(nil).GetRecentChatbotConversations), arg0, arg1)
}

// GetRecentMessages mocks base method.
func (m *MockStore) GetRecentMessages(arg0 context.Context, arg1 db.GetRecentMessagesParams) ([]db.GetRecentMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.GetRecentMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentMessages indicates an expected call of GetRecentMessages.
func (mr *MockStoreMockRecorder) GetRecentMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentMessages", reflect.TypeOf((*MockStore)(nil).GetRecentMessages), arg0, arg1)
}

// GetRecentNotifications mocks base method.
func (m *MockStore) GetRecentNotifications(arg0 context.Context, arg1 db.GetRecentNotificationsParams) ([]db.GetRecentNotificationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentNotifications", arg0, arg1)
	ret0, _ := ret[0].([]db.GetRecentNotificationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentNotifications indicates an expected call of GetRecentNotifications.
func (mr *MockStoreMockRecorder) GetRecentNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentNotifications", reflect.TypeOf((*MockStore)(nil).GetRecentNotifications), arg0, arg1)
}

// GetRecentRatings mocks base method.
func (m *MockStore) GetRecentRatings(arg0 context.Context, arg1 db.GetRecentRatingsParams) ([]db.GetRecentRatingsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentRatings", arg0, arg1)
	ret0, _ := ret[0].([]db.GetRecentRatingsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentRatings indicates an expected call of GetRecentRatings.
func (mr *MockStoreMockRecorder) GetRecentRatings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentRatings", reflect.TypeOf((*MockStore)(nil).GetRecentRatings), arg0, arg1)
}

// GetRecentlyUpdatedSettings mocks base method.
func (m *MockStore) GetRecentlyUpdatedSettings(arg0 context.Context, arg1 db.GetRecentlyUpdatedSettingsParams) ([]db.GetRecentlyUpdatedSettingsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentlyUpdatedSettings", arg0, arg1)
	ret0, _ := ret[0].([]db.GetRecentlyUpdatedSettingsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentlyUpdatedSettings indicates an expected call of GetRecentlyUpdatedSettings.
func (mr *MockStoreMockRecorder) GetRecentlyUpdatedSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentlyUpdatedSettings", reflect.TypeOf((*MockStore)(nil).GetRecentlyUpdatedSettings), arg0, arg1)
}

// GetRentalAgreementByApplicationID mocks base method.
func (m *MockStore) GetRentalAgreementByApplicationID(arg0 context.Context, arg1 int64) (db.RentalAgreement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRentalAgreementByApplicationID", arg0, arg1)
	ret0, _ := ret[0].(db.RentalAgreement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRentalAgreementByApplicationID indicates an expected call of GetRentalAgreementByApplicationID.
func (mr *MockStoreMockRecorder) GetRentalAgreementByApplicationID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRentalAgreementByApplicationID", reflect.TypeOf((*MockStore)(nil).GetRentalAgreementByApplicationID), arg0, arg1)
}

// GetRentalAgreementByID mocks base method.
func (m *MockStore) GetRentalAgreementByID(arg0 context.Context, arg1 int64) (db.RentalAgreement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRentalAgreementByID", arg0, arg1)
	ret0, _ := ret[0].(db.RentalAgreement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRentalAgreementByID indicates an expected call of GetRentalAgreementByID.
func (mr *MockStoreMockRecorder) GetRentalAgreementByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRentalAgreementByID", reflect.TypeOf((*MockStore)(nil).GetRentalAgreementByID), arg0, arg1)
}

// GetRentalAgreementWithDetails mocks base method.
func (m *MockStore) GetRentalAgreementWithDetails(arg0 context.Context, arg1 int64) (db.GetRentalAgreementWithDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRentalAgreementWithDetails", arg0, arg1)
	ret0, _ := ret[0].(db.GetRentalAgreementWithDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRentalAgreementWithDetails indicates an expected call of GetRentalAgreementWithDetails.
func (mr *MockStoreMockRecorder) GetRentalAgreementWithDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRentalAgreementWithDetails", reflect.TypeOf((*MockStore)(nil).GetRentalAgreementWithDetails), arg0, arg1)
}

// GetRentalApplicationByID mocks base method.
func (m *MockStore) GetRentalApplicationByID(arg0 context.Context, arg1 int64) (db.RentalApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRentalApplicationByID", arg0, arg1)
	ret0, _ := ret[0].(db.RentalApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRentalApplicationByID indicates an expected call of GetRentalApplicationByID.
func (mr *MockStoreMockRecorder) GetRentalApplicationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRentalApplicationByID", reflect.TypeOf((*MockStore)(nil).GetRentalApplicationByID), arg0, arg1)
}

// GetRentalApplicationWithDetails mocks base method.
func (m *MockStore) GetRentalApplicationWithDetails(arg0 context.Context, arg1 int64) (db.GetRentalApplicationWithDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRentalApplicationWithDetails", arg0, arg1)
	ret0, _ := ret[0].(db.GetRentalApplicationWithDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRentalApplicationWithDetails indicates an expected call of GetRentalApplicationWithDetails.
func (mr *MockStoreMockRecorder) GetRentalApplicationWithDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRentalApplicationWithDetails", reflect.TypeOf((*MockStore)(nil).GetRentalApplicationWithDetails), arg0, arg1)
}

// GetReportStatistics mocks base method.
func (m *MockStore) GetReportStatistics(arg0 context.Context) (db.GetReportStatisticsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportStatistics", arg0)
	ret0, _ := ret[0].(db.GetReportStatisticsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportStatistics indicates an expected call of GetReportStatistics.
func (mr *MockStoreMockRecorder) GetReportStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportStatistics", reflect.TypeOf((*MockStore)(nil).GetReportStatistics), arg0)
}

// GetReportsByAgent mocks base method.
func (m *MockStore) GetReportsByAgent(arg0 context.Context, arg1 db.GetReportsByAgentParams) ([]db.GetReportsByAgentRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportsByAgent", arg0, arg1)
	ret0, _ := ret[0].([]db.GetReportsByAgentRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportsByAgent indicates an expected call of GetReportsByAgent.
func (mr *MockStoreMockRecorder) GetReportsByAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportsByAgent", reflect.TypeOf((*MockStore)(nil).GetReportsByAgent), arg0, arg1)
}

// GetSavedPropertyByID mocks base method.
func (m *MockStore) GetSavedPropertyByID(arg0 context.Context, arg1 int64) (db.SavedProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavedPropertyByID", arg0, arg1)
	ret0, _ := ret[0].(db.SavedProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavedPropertyByID indicates an expected call of GetSavedPropertyByID.
func (mr *MockStoreMockRecorder) GetSavedPropertyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedPropertyByID", reflect.TypeOf((*MockStore)(nil).GetSavedPropertyByID), arg0, arg1)
}

// GetSessionStatistics mocks base method.
func (m *MockStore) GetSessionStatistics(arg0 context.Context) (db.GetSessionStatisticsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionStatistics", arg0)
	ret0, _ := ret[0].(db.GetSessionStatisticsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionStatistics indicates an expected call of GetSessionStatistics.
func (mr *MockStoreMockRecorder) GetSessionStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionStatistics", reflect.TypeOf((*MockStore)(nil).GetSessionStatistics), arg0)
}

// GetSessionWithUserDetails mocks base method.
func (m *MockStore) GetSessionWithUserDetails(arg0 context.Context, arg1 string) (db.GetSessionWithUserDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionWithUserDetails", arg0, arg1)
	ret0, _ := ret[0].(db.GetSessionWithUserDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionWithUserDetails indicates an expected call of GetSessionWithUserDetails.
func (mr *MockStoreMockRecorder) GetSessionWithUserDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionWithUserDetails", reflect.TypeOf((*MockStore)(nil).GetSessionWithUserDetails), arg0, arg1)
}

// GetSessionsByIPAddress mocks base method.
func (m *MockStore) GetSessionsByIPAddress(arg0 context.Context, arg1 db.GetSessionsByIPAddressParams) ([]db.GetSessionsByIPAddressRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionsByIPAddress", arg0, arg1)
	ret0, _ := ret[0].([]db.GetSessionsByIPAddressRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionsByIPAddress indicates an expected call of GetSessionsByIPAddress.
func (mr *MockStoreMockRecorder) GetSessionsByIPAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionsByIPAddress", reflect.TypeOf((*MockStore)(nil).GetSessionsByIPAddress), arg0, arg1)
}

// GetSettingStatistics mocks base method.
func (m *MockStore) GetSettingStatistics(arg0 context.Context) (db.GetSettingStatisticsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingStatistics", arg0)
	ret0, _ := ret[0].(db.GetSettingStatisticsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingStatistics indicates an expected call of GetSettingStatistics.
func (mr *MockStoreMockRecorder) GetSettingStatistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingStatistics", reflect.TypeOf((*MockStore)(nil).GetSettingStatistics), arg0)
}

// GetSettingsByType mocks base method.
func (m *MockStore) GetSettingsByType(arg0 context.Context, arg1 db.GetSettingsByTypeParams) ([]db.SystemSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingsByType", arg0, arg1)
	ret0, _ := ret[0].([]db.SystemSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingsByType indicates an expected call of GetSettingsByType.
func (mr *MockStoreMockRecorder) GetSettingsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingsByType", reflect.TypeOf((*MockStore)(nil).GetSettingsByType), arg0, arg1)
}

// GetSettingsWithUpdaterInfo mocks base method.
func (m *MockStore) GetSettingsWithUpdaterInfo(arg0 context.Context, arg1 db.GetSettingsWithUpdaterInfoParams) ([]db.GetSettingsWithUpdaterInfoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingsWithUpdaterInfo", arg0, arg1)
	ret0, _ := ret[0].([]db.GetSettingsWithUpdaterInfoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingsWithUpdaterInfo indicates an expected call of GetSettingsWithUpdaterInfo.
func (mr *MockStoreMockRecorder) GetSettingsWithUpdaterInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingsWithUpdaterInfo", reflect.TypeOf((*MockStore)(nil).GetSettingsWithUpdaterInfo), arg0, arg1)
}

// GetSystemSettingByID mocks base method.
func (m *MockStore) GetSystemSettingByID(arg0 context.Context, arg1 int64) (db.SystemSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemSettingByID", arg0, arg1)
	ret0, _ := ret[0].(db.SystemSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemSettingByID indicates an expected call of GetSystemSettingByID.
func (mr *MockStoreMockRecorder) GetSystemSettingByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemSettingByID", reflect.TypeOf((*MockStore)(nil).GetSystemSettingByID), arg0, arg1)
}

// GetSystemSettingByKey mocks base method.
func (m *MockStore) GetSystemSettingByKey(arg0 context.Context, arg1 string) (db.SystemSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemSettingByKey", arg0, arg1)
	ret0, _ := ret[0].(db.SystemSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemSettingByKey indicates an expected call of GetSystemSettingByKey.
func (mr *MockStoreMockRecorder) GetSystemSettingByKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemSettingByKey", reflect.TypeOf((*MockStore)(nil).GetSystemSettingByKey), arg0, arg1)
}

// GetTenantInquiries mocks base method.
func (m *MockStore) GetTenantInquiries(arg0 context.Context, arg1 db.GetTenantInquiriesParams) ([]db.GetTenantInquiriesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantInquiries", arg0, arg1)
	ret0, _ := ret[0].([]db.GetTenantInquiriesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantInquiries indicates an expected call of GetTenantInquiries.
func (mr *MockStoreMockRecorder) GetTenantInquiries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantInquiries", reflect.TypeOf((*MockStore)(nil).GetTenantInquiries), arg0, arg1)
}

// GetTenantInspectionRequests mocks base method.
func (m *MockStore) GetTenantInspectionRequests(arg0 context.Context, arg1 db.GetTenantInspectionRequestsParams) ([]db.GetTenantInspectionRequestsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantInspectionRequests", arg0, arg1)
	ret0, _ := ret[0].([]db.GetTenantInspectionRequestsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantInspectionRequests indicates an expected call of GetTenantInspectionRequests.
func (mr *MockStoreMockRecorder) GetTenantInspectionRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantInspectionRequests", reflect.TypeOf((*MockStore)(nil).GetTenantInspectionRequests), arg0, arg1)
}

// GetTenantProfileByID mocks base method.
func (m *MockStore) GetTenantProfileByID(arg0 context.Context, arg1 int64) (db.TenantProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantProfileByID", arg0, arg1)
	ret0, _ := ret[0].(db.TenantProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantProfileByID indicates an expected call of GetTenantProfileByID.
func (mr *MockStoreMockRecorder) GetTenantProfileByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantProfileByID", reflect.TypeOf((*MockStore)(nil).GetTenantProfileByID), arg0, arg1)
}

// GetTenantProfileByUserID mocks base method.
func (m *MockStore) GetTenantProfileByUserID(arg0 context.Context, arg1 int64) (db.TenantProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantProfileByUserID", arg0, arg1)
	ret0, _ := ret[0].(db.TenantProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantProfileByUserID indicates an expected call of GetTenantProfileByUserID.
func (mr *MockStoreMockRecorder) GetTenantProfileByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantProfileByUserID", reflect.TypeOf((*MockStore)(nil).GetTenantProfileByUserID), arg0, arg1)
}

// GetTenantRatings mocks base method.
func (m *MockStore) GetTenantRatings(arg0 context.Context, arg1 db.GetTenantRatingsParams) ([]db.GetTenantRatingsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantRatings", arg0, arg1)
	ret0, _ := ret[0].([]db.GetTenantRatingsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantRatings indicates an expected call of GetTenantRatings.
func (mr *MockStoreMockRecorder) GetTenantRatings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantRatings", reflect.TypeOf((*MockStore)(nil).GetTenantRatings), arg0, arg1)
}

// GetTenantRentalAgreements mocks base method.
func (m *MockStore) GetTenantRentalAgreements(arg0 context.Context, arg1 db.GetTenantRentalAgreementsParams) ([]db.GetTenantRentalAgreementsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantRentalAgreements", arg0, arg1)
	ret0, _ := ret[0].([]db.GetTenantRentalAgreementsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantRentalAgreements indicates an expected call of GetTenantRentalAgreements.
func (mr *MockStoreMockRecorder) GetTenantRentalAgreements(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantRentalAgreements", reflect.TypeOf((*MockStore)(nil).GetTenantRentalAgreements), arg0, arg1)
}

// GetTenantRentalApplications mocks base method.
func (m *MockStore) GetTenantRentalApplications(arg0 context.Context, arg1 db.GetTenantRentalApplicationsParams) ([]db.GetTenantRentalApplicationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantRentalApplications", arg0, arg1)
	ret0, _ := ret[0].([]db.GetTenantRentalApplicationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantRentalApplications indicates an expected call of GetTenantRentalApplications.
func (mr *MockStoreMockRecorder) GetTenantRentalApplications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantRentalApplications", reflect.TypeOf((*MockStore)(nil).GetTenantRentalApplications), arg0, arg1)
}

// GetUnassignedDisputes mocks base method.
func (m *MockStore) GetUnassignedDisputes(arg0 context.Context, arg1 db.GetUnassignedDisputesParams) ([]db.GetUnassignedDisputesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnassignedDisputes", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUnassignedDisputesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnassignedDisputes indicates an expected call of GetUnassignedDisputes.
func (mr *MockStoreMockRecorder) GetUnassignedDisputes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnassignedDisputes", reflect.TypeOf((*MockStore)(nil).GetUnassignedDisputes), arg0, arg1)
}

// GetUnreadLandlordInquiries mocks base method.
func (m *MockStore) GetUnreadLandlordInquiries(arg0 context.Context, arg1 db.GetUnreadLandlordInquiriesParams) ([]db.GetUnreadLandlordInquiriesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadLandlordInquiries", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUnreadLandlordInquiriesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadLandlordInquiries indicates an expected call of GetUnreadLandlordInquiries.
func (mr *MockStoreMockRecorder) GetUnreadLandlordInquiries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadLandlordInquiries", reflect.TypeOf((*MockStore)(nil).GetUnreadLandlordInquiries), arg0, arg1)
}

// GetUnreadMessages mocks base method.
func (m *MockStore) GetUnreadMessages(arg0 context.Context, arg1 db.GetUnreadMessagesParams) ([]db.GetUnreadMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUnreadMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadMessages indicates an expected call of GetUnreadMessages.
func (mr *MockStoreMockRecorder) GetUnreadMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadMessages", reflect.TypeOf((*MockStore)(nil).GetUnreadMessages), arg0, arg1)
}

// GetUnreadUserNotifications mocks base method.
func (m *MockStore) GetUnreadUserNotifications(arg0 context.Context, arg1 db.GetUnreadUserNotificationsParams) ([]db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnreadUserNotifications", arg0, arg1)
	ret0, _ := ret[0].([]db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnreadUserNotifications indicates an expected call of GetUnreadUserNotifications.
func (mr *MockStoreMockRecorder) GetUnreadUserNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnreadUserNotifications", reflect.TypeOf((*MockStore)(nil).GetUnreadUserNotifications), arg0, arg1)
}

// GetUserActiveSessions mocks base method.
func (m *MockStore) GetUserActiveSessions(arg0 context.Context, arg1 db.GetUserActiveSessionsParams) ([]db.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserActiveSessions", arg0, arg1)
	ret0, _ := ret[0].([]db.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserActiveSessions indicates an expected call of GetUserActiveSessions.
func (mr *MockStoreMockRecorder) GetUserActiveSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserActiveSessions", reflect.TypeOf((*MockStore)(nil).GetUserActiveSessions), arg0, arg1)
}

// GetUserActivitySummary mocks base method.
func (m *MockStore) GetUserActivitySummary(arg0 context.Context, arg1 db.GetUserActivitySummaryParams) (db.GetUserActivitySummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserActivitySummary", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserActivitySummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserActivitySummary indicates an expected call of GetUserActivitySummary.
func (mr *MockStoreMockRecorder) GetUserActivitySummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserActivitySummary", reflect.TypeOf((*MockStore)(nil).GetUserActivitySummary), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), arg0, arg1)
}

// GetUserByPhone mocks base method.
func (m *MockStore) GetUserByPhone(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhone", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhone indicates an expected call of GetUserByPhone.
func (mr *MockStoreMockRecorder) GetUserByPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhone", reflect.TypeOf((*MockStore)(nil).GetUserByPhone), arg0, arg1)
}

// GetUserChatbotSessions mocks base method.
func (m *MockStore) GetUserChatbotSessions(arg0 context.Context, arg1 db.GetUserChatbotSessionsParams) ([]db.GetUserChatbotSessionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChatbotSessions", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserChatbotSessionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChatbotSessions indicates an expected call of GetUserChatbotSessions.
func (mr *MockStoreMockRecorder) GetUserChatbotSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChatbotSessions", reflect.TypeOf((*MockStore)(nil).GetUserChatbotSessions), arg0, arg1)
}

// GetUserConversationSummary mocks base method.
func (m *MockStore) GetUserConversationSummary(arg0 context.Context, arg1 int64) (db.GetUserConversationSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserConversationSummary", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserConversationSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConversationSummary indicates an expected call of GetUserConversationSummary.
func (mr *MockStoreMockRecorder) GetUserConversationSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConversationSummary", reflect.TypeOf((*MockStore)(nil).GetUserConversationSummary), arg0, arg1)
}

// GetUserConversations mocks base method.
func (m *MockStore) GetUserConversations(arg0 context.Context, arg1 db.GetUserConversationsParams) ([]db.GetUserConversationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserConversations", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserConversationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConversations indicates an expected call of GetUserConversations.
func (mr *MockStoreMockRecorder) GetUserConversations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConversations", reflect.TypeOf((*MockStore)(nil).GetUserConversations), arg0, arg1)
}

// GetUserEarningSummary mocks base method.
func (m *MockStore) GetUserEarningSummary(arg0 context.Context, arg1 pgtype.Int8) (db.GetUserEarningSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEarningSummary", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserEarningSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEarningSummary indicates an expected call of GetUserEarningSummary.
func (mr *MockStoreMockRecorder) GetUserEarningSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEarningSummary", reflect.TypeOf((*MockStore)(nil).GetUserEarningSummary), arg0, arg1)
}

// GetUserEarnings mocks base method.
func (m *MockStore) GetUserEarnings(arg0 context.Context, arg1 db.GetUserEarningsParams) ([]db.GetUserEarningsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEarnings", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserEarningsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEarnings indicates an expected call of GetUserEarnings.
func (mr *MockStoreMockRecorder) GetUserEarnings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEarnings", reflect.TypeOf((*MockStore)(nil).GetUserEarnings), arg0, arg1)
}

// GetUserLoginLogs mocks base method.
func (m *MockStore) GetUserLoginLogs(arg0 context.Context, arg1 db.GetUserLoginLogsParams) ([]db.GetUserLoginLogsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLoginLogs", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserLoginLogsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserLoginLogs indicates an expected call of GetUserLoginLogs.
func (mr *MockStoreMockRecorder) GetUserLoginLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLoginLogs", reflect.TypeOf((*MockStore)(nil).GetUserLoginLogs), arg0, arg1)
}

// GetUserNotificationStats mocks base method.
func (m *MockStore) GetUserNotificationStats(arg0 context.Context, arg1 int64) (db.GetUserNotificationStatsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNotificationStats", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserNotificationStatsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNotificationStats indicates an expected call of GetUserNotificationStats.
func (mr *MockStoreMockRecorder) GetUserNotificationStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNotificationStats", reflect.TypeOf((*MockStore)(nil).GetUserNotificationStats), arg0, arg1)
}

// GetUserNotifications mocks base method.
func (m *MockStore) GetUserNotifications(arg0 context.Context, arg1 db.GetUserNotificationsParams) ([]db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNotifications", arg0, arg1)
	ret0, _ := ret[0].([]db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNotifications indicates an expected call of GetUserNotifications.
func (mr *MockStoreMockRecorder) GetUserNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNotifications", reflect.TypeOf((*MockStore)(nil).GetUserNotifications), arg0, arg1)
}

// GetUserPaymentSummary mocks base method.
func (m *MockStore) GetUserPaymentSummary(arg0 context.Context, arg1 int64) (db.GetUserPaymentSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPaymentSummary", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserPaymentSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPaymentSummary indicates an expected call of GetUserPaymentSummary.
func (mr *MockStoreMockRecorder) GetUserPaymentSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPaymentSummary", reflect.TypeOf((*MockStore)(nil).GetUserPaymentSummary), arg0, arg1)
}

// GetUserPayments mocks base method.
func (m *MockStore) GetUserPayments(arg0 context.Context, arg1 db.GetUserPaymentsParams) ([]db.GetUserPaymentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPayments", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserPaymentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPayments indicates an expected call of GetUserPayments.
func (mr *MockStoreMockRecorder) GetUserPayments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPayments", reflect.TypeOf((*MockStore)(nil).GetUserPayments), arg0, arg1)
}

// GetUserPropertyReview mocks base method.
func (m *MockStore) GetUserPropertyReview(arg0 context.Context, arg1 db.GetUserPropertyReviewParams) (db.PropertyCommunityReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPropertyReview", arg0, arg1)
	ret0, _ := ret[0].(db.PropertyCommunityReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPropertyReview indicates an expected call of GetUserPropertyReview.
func (mr *MockStoreMockRecorder) GetUserPropertyReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPropertyReview", reflect.TypeOf((*MockStore)(nil).GetUserPropertyReview), arg0, arg1)
}

// GetUserRatingByID mocks base method.
func (m *MockStore) GetUserRatingByID(arg0 context.Context, arg1 int64) (db.UserRating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRatingByID", arg0, arg1)
	ret0, _ := ret[0].(db.UserRating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRatingByID indicates an expected call of GetUserRatingByID.
func (mr *MockStoreMockRecorder) GetUserRatingByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRatingByID", reflect.TypeOf((*MockStore)(nil).GetUserRatingByID), arg0, arg1)
}

// GetUserRatingStatistics mocks base method.
func (m *MockStore) GetUserRatingStatistics(arg0 context.Context, arg1 int64) (db.GetUserRatingStatisticsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRatingStatistics", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserRatingStatisticsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRatingStatistics indicates an expected call of GetUserRatingStatistics.
func (mr *MockStoreMockRecorder) GetUserRatingStatistics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRatingStatistics", reflect.TypeOf((*MockStore)(nil).GetUserRatingStatistics), arg0, arg1)
}

// GetUserRatingWithDetails mocks base method.
func (m *MockStore) GetUserRatingWithDetails(arg0 context.Context, arg1 int64) (db.GetUserRatingWithDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRatingWithDetails", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserRatingWithDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRatingWithDetails indicates an expected call of GetUserRatingWithDetails.
func (mr *MockStoreMockRecorder) GetUserRatingWithDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRatingWithDetails", reflect.TypeOf((*MockStore)(nil).GetUserRatingWithDetails), arg0, arg1)
}

// GetUserSavedProperties mocks base method.
func (m *MockStore) GetUserSavedProperties(arg0 context.Context, arg1 db.GetUserSavedPropertiesParams) ([]db.GetUserSavedPropertiesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSavedProperties", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserSavedPropertiesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSavedProperties indicates an expected call of GetUserSavedProperties.
func (mr *MockStoreMockRecorder) GetUserSavedProperties(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSavedProperties", reflect.TypeOf((*MockStore)(nil).GetUserSavedProperties), arg0, arg1)
}

// GetUserSavedPropertiesWithLandlord mocks base method.
func (m *MockStore) GetUserSavedPropertiesWithLandlord(arg0 context.Context, arg1 db.GetUserSavedPropertiesWithLandlordParams) ([]db.GetUserSavedPropertiesWithLandlordRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSavedPropertiesWithLandlord", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserSavedPropertiesWithLandlordRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSavedPropertiesWithLandlord indicates an expected call of GetUserSavedPropertiesWithLandlord.
func (mr *MockStoreMockRecorder) GetUserSavedPropertiesWithLandlord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSavedPropertiesWithLandlord", reflect.TypeOf((*MockStore)(nil).GetUserSavedPropertiesWithLandlord), arg0, arg1)
}

// GetUserSessionByID mocks base method.
func (m *MockStore) GetUserSessionByID(arg0 context.Context, arg1 int64) (db.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSessionByID", arg0, arg1)
	ret0, _ := ret[0].(db.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSessionByID indicates an expected call of GetUserSessionByID.
func (mr *MockStoreMockRecorder) GetUserSessionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSessionByID", reflect.TypeOf((*MockStore)(nil).GetUserSessionByID), arg0, arg1)
}

// GetUserSessionByToken mocks base method.
func (m *MockStore) GetUserSessionByToken(arg0 context.Context, arg1 string) (db.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSessionByToken", arg0, arg1)
	ret0, _ := ret[0].(db.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSessionByToken indicates an expected call of GetUserSessionByToken.
func (mr *MockStoreMockRecorder) GetUserSessionByToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSessionByToken", reflect.TypeOf((*MockStore)(nil).GetUserSessionByToken), arg0, arg1)
}

// GetUserSessionSummary mocks base method.
func (m *MockStore) GetUserSessionSummary(arg0 context.Context, arg1 int64) (db.GetUserSessionSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSessionSummary", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserSessionSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSessionSummary indicates an expected call of GetUserSessionSummary.
func (mr *MockStoreMockRecorder) GetUserSessionSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSessionSummary", reflect.TypeOf((*MockStore)(nil).GetUserSessionSummary), arg0, arg1)
}

// GetUserSessions mocks base method.
func (m *MockStore) GetUserSessions(arg0 context.Context, arg1 db.GetUserSessionsParams) ([]db.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSessions", arg0, arg1)
	ret0, _ := ret[0].([]db.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSessions indicates an expected call of GetUserSessions.
func (mr *MockStoreMockRecorder) GetUserSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSessions", reflect.TypeOf((*MockStore)(nil).GetUserSessions), arg0, arg1)
}

// GetUserVerificationByID mocks base method.
func (m *MockStore) GetUserVerificationByID(arg0 context.Context, arg1 int64) (db.UserVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserVerificationByID", arg0, arg1)
	ret0, _ := ret[0].(db.UserVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserVerificationByID indicates an expected call of GetUserVerificationByID.
func (mr *MockStoreMockRecorder) GetUserVerificationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserVerificationByID", reflect.TypeOf((*MockStore)(nil).GetUserVerificationByID), arg0, arg1)
}

// GetUserVerificationByType mocks base method.
func (m *MockStore) GetUserVerificationByType(arg0 context.Context, arg1 db.GetUserVerificationByTypeParams) (db.UserVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserVerificationByType", arg0, arg1)
	ret0, _ := ret[0].(db.UserVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserVerificationByType indicates an expected call of GetUserVerificationByType.
func (mr *MockStoreMockRecorder) GetUserVerificationByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserVerificationByType", reflect.TypeOf((*MockStore)(nil).GetUserVerificationByType), arg0, arg1)
}

// GetUserVerificationsByUserID mocks base method.
func (m *MockStore) GetUserVerificationsByUserID(arg0 context.Context, arg1 int64) ([]db.UserVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserVerificationsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]db.UserVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserVerificationsByUserID indicates an expected call of GetUserVerificationsByUserID.
func (mr *MockStoreMockRecorder) GetUserVerificationsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserVerificationsByUserID", reflect.TypeOf((*MockStore)(nil).GetUserVerificationsByUserID), arg0, arg1)
}

// GetVerificationAuditLogs mocks base method.
func (m *MockStore) GetVerificationAuditLogs(arg0 context.Context, arg1 db.GetVerificationAuditLogsParams) ([]db.GetVerificationAuditLogsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationAuditLogs", arg0, arg1)
	ret0, _ := ret[0].([]db.GetVerificationAuditLogsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationAuditLogs indicates an expected call of GetVerificationAuditLogs.
func (mr *MockStoreMockRecorder) GetVerificationAuditLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationAuditLogs", reflect.TypeOf((*MockStore)(nil).GetVerificationAuditLogs), arg0, arg1)
}

// GetVerifiedPropertyCommunityReviews mocks base method.
func (m *MockStore) GetVerifiedPropertyCommunityReviews(arg0 context.Context, arg1 db.GetVerifiedPropertyCommunityReviewsParams) ([]db.GetVerifiedPropertyCommunityReviewsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifiedPropertyCommunityReviews", arg0, arg1)
	ret0, _ := ret[0].([]db.GetVerifiedPropertyCommunityReviewsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifiedPropertyCommunityReviews indicates an expected call of GetVerifiedPropertyCommunityReviews.
func (mr *MockStoreMockRecorder) GetVerifiedPropertyCommunityReviews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifiedPropertyCommunityReviews", reflect.TypeOf((*MockStore)(nil).GetVerifiedPropertyCommunityReviews), arg0, arg1)
}

// GetVerifiedRatingsForUser mocks base method.
func (m *MockStore) GetVerifiedRatingsForUser(arg0 context.Context, arg1 db.GetVerifiedRatingsForUserParams) ([]db.GetVerifiedRatingsForUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifiedRatingsForUser", arg0, arg1)
	ret0, _ := ret[0].([]db.GetVerifiedRatingsForUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerifiedRatingsForUser indicates an expected call of GetVerifiedRatingsForUser.
func (mr *MockStoreMockRecorder) GetVerifiedRatingsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifiedRatingsForUser", reflect.TypeOf((*MockStore)(nil).GetVerifiedRatingsForUser), arg0, arg1)
}

// IncrementAgentInspectionCount mocks base method.
func (m *MockStore) IncrementAgentInspectionCount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementAgentInspectionCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementAgentInspectionCount indicates an expected call of IncrementAgentInspectionCount.
func (mr *MockStoreMockRecorder) IncrementAgentInspectionCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementAgentInspectionCount", reflect.TypeOf((*MockStore)(nil).IncrementAgentInspectionCount), arg0, arg1)
}

// IncrementLandlordPropertyCount mocks base method.
func (m *MockStore) IncrementLandlordPropertyCount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementLandlordPropertyCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementLandlordPropertyCount indicates an expected call of IncrementLandlordPropertyCount.
func (mr *MockStoreMockRecorder) IncrementLandlordPropertyCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementLandlordPropertyCount", reflect.TypeOf((*MockStore)(nil).IncrementLandlordPropertyCount), arg0, arg1)
}

// IncrementPropertyViews mocks base method.
func (m *MockStore) IncrementPropertyViews(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementPropertyViews", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementPropertyViews indicates an expected call of IncrementPropertyViews.
func (mr *MockStoreMockRecorder) IncrementPropertyViews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementPropertyViews", reflect.TypeOf((*MockStore)(nil).IncrementPropertyViews), arg0, arg1)
}

// IncrementReviewHelpfulVotes mocks base method.
func (m *MockStore) IncrementReviewHelpfulVotes(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementReviewHelpfulVotes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementReviewHelpfulVotes indicates an expected call of IncrementReviewHelpfulVotes.
func (mr *MockStoreMockRecorder) IncrementReviewHelpfulVotes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementReviewHelpfulVotes", reflect.TypeOf((*MockStore)(nil).IncrementReviewHelpfulVotes), arg0, arg1)
}

// IsPropertySavedByUser mocks base method.
func (m *MockStore) IsPropertySavedByUser(arg0 context.Context, arg1 db.IsPropertySavedByUserParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPropertySavedByUser", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPropertySavedByUser indicates an expected call of IsPropertySavedByUser.
func (mr *MockStoreMockRecorder) IsPropertySavedByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPropertySavedByUser", reflect.TypeOf((*MockStore)(nil).IsPropertySavedByUser), arg0, arg1)
}

// LandlordSignAgreement mocks base method.
func (m *MockStore) LandlordSignAgreement(arg0 context.Context, arg1 int64) (db.RentalAgreement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LandlordSignAgreement", arg0, arg1)
	ret0, _ := ret[0].(db.RentalAgreement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LandlordSignAgreement indicates an expected call of LandlordSignAgreement.
func (mr *MockStoreMockRecorder) LandlordSignAgreement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LandlordSignAgreement", reflect.TypeOf((*MockStore)(nil).LandlordSignAgreement), arg0, arg1)
}

// ListApprovedAgentsByArea mocks base method.
func (m *MockStore) ListApprovedAgentsByArea(arg0 context.Context, arg1 db.ListApprovedAgentsByAreaParams) ([]db.ListApprovedAgentsByAreaRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApprovedAgentsByArea", arg0, arg1)
	ret0, _ := ret[0].([]db.ListApprovedAgentsByAreaRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApprovedAgentsByArea indicates an expected call of ListApprovedAgentsByArea.
func (mr *MockStoreMockRecorder) ListApprovedAgentsByArea(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApprovedAgentsByArea", reflect.TypeOf((*MockStore)(nil).ListApprovedAgentsByArea), arg0, arg1)
}

// ListFeaturedProperties mocks base method.
func (m *MockStore) ListFeaturedProperties(arg0 context.Context, arg1 db.ListFeaturedPropertiesParams) ([]db.ListFeaturedPropertiesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeaturedProperties", arg0, arg1)
	ret0, _ := ret[0].([]db.ListFeaturedPropertiesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeaturedProperties indicates an expected call of ListFeaturedProperties.
func (mr *MockStoreMockRecorder) ListFeaturedProperties(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeaturedProperties", reflect.TypeOf((*MockStore)(nil).ListFeaturedProperties), arg0, arg1)
}

// ListLandlordsByPropertyCount mocks base method.
func (m *MockStore) ListLandlordsByPropertyCount(arg0 context.Context, arg1 db.ListLandlordsByPropertyCountParams) ([]db.ListLandlordsByPropertyCountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLandlordsByPropertyCount", arg0, arg1)
	ret0, _ := ret[0].([]db.ListLandlordsByPropertyCountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLandlordsByPropertyCount indicates an expected call of ListLandlordsByPropertyCount.
func (mr *MockStoreMockRecorder) ListLandlordsByPropertyCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLandlordsByPropertyCount", reflect.TypeOf((*MockStore)(nil).ListLandlordsByPropertyCount), arg0, arg1)
}

// ListPendingAgentApplications mocks base method.
func (m *MockStore) ListPendingAgentApplications(arg0 context.Context, arg1 db.ListPendingAgentApplicationsParams) ([]db.ListPendingAgentApplicationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingAgentApplications", arg0, arg1)
	ret0, _ := ret[0].([]db.ListPendingAgentApplicationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingAgentApplications indicates an expected call of ListPendingAgentApplications.
func (mr *MockStoreMockRecorder) ListPendingAgentApplications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingAgentApplications", reflect.TypeOf((*MockStore)(nil).ListPendingAgentApplications), arg0, arg1)
}

// ListPendingVerifications mocks base method.
func (m *MockStore) ListPendingVerifications(arg0 context.Context, arg1 db.ListPendingVerificationsParams) ([]db.ListPendingVerificationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingVerifications", arg0, arg1)
	ret0, _ := ret[0].([]db.ListPendingVerificationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingVerifications indicates an expected call of ListPendingVerifications.
func (mr *MockStoreMockRecorder) ListPendingVerifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingVerifications", reflect.TypeOf((*MockStore)(nil).ListPendingVerifications), arg0, arg1)
}

// ListProperties mocks base method.
func (m *MockStore) ListProperties(arg0 context.Context, arg1 db.ListPropertiesParams) ([]db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProperties", arg0, arg1)
	ret0, _ := ret[0].([]db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProperties indicates an expected call of ListProperties.
func (mr *MockStoreMockRecorder) ListProperties(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProperties", reflect.TypeOf((*MockStore)(nil).ListProperties), arg0, arg1)
}

// ListPropertiesByLandlord mocks base method.
func (m *MockStore) ListPropertiesByLandlord(arg0 context.Context, arg1 db.ListPropertiesByLandlordParams) ([]db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPropertiesByLandlord", arg0, arg1)
	ret0, _ := ret[0].([]db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPropertiesByLandlord indicates an expected call of ListPropertiesByLandlord.
func (mr *MockStoreMockRecorder) ListPropertiesByLandlord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPropertiesByLandlord", reflect.TypeOf((*MockStore)(nil).ListPropertiesByLandlord), arg0, arg1)
}

// ListPropertiesByLocation mocks base method.
func (m *MockStore) ListPropertiesByLocation(arg0 context.Context, arg1 db.ListPropertiesByLocationParams) ([]db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPropertiesByLocation", arg0, arg1)
	ret0, _ := ret[0].([]db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPropertiesByLocation indicates an expected call of ListPropertiesByLocation.
func (mr *MockStoreMockRecorder) ListPropertiesByLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPropertiesByLocation", reflect.TypeOf((*MockStore)(nil).ListPropertiesByLocation), arg0, arg1)
}

// ListRecentProperties mocks base method.
func (m *MockStore) ListRecentProperties(arg0 context.Context, arg1 db.ListRecentPropertiesParams) ([]db.ListRecentPropertiesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecentProperties", arg0, arg1)
	ret0, _ := ret[0].([]db.ListRecentPropertiesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecentProperties indicates an expected call of ListRecentProperties.
func (mr *MockStoreMockRecorder) ListRecentProperties(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecentProperties", reflect.TypeOf((*MockStore)(nil).ListRecentProperties), arg0, arg1)
}

// ListRecentPropertyReviews mocks base method.
func (m *MockStore) ListRecentPropertyReviews(arg0 context.Context, arg1 db.ListRecentPropertyReviewsParams) ([]db.ListRecentPropertyReviewsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecentPropertyReviews", arg0, arg1)
	ret0, _ := ret[0].([]db.ListRecentPropertyReviewsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecentPropertyReviews indicates an expected call of ListRecentPropertyReviews.
func (mr *MockStoreMockRecorder) ListRecentPropertyReviews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecentPropertyReviews", reflect.TypeOf((*MockStore)(nil).ListRecentPropertyReviews), arg0, arg1)
}

// ListTopAgentsByRating mocks base method.
func (m *MockStore) ListTopAgentsByRating(arg0 context.Context, arg1 db.ListTopAgentsByRatingParams) ([]db.ListTopAgentsByRatingRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopAgentsByRating", arg0, arg1)
	ret0, _ := ret[0].([]db.ListTopAgentsByRatingRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopAgentsByRating indicates an expected call of ListTopAgentsByRating.
func (mr *MockStoreMockRecorder) ListTopAgentsByRating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopAgentsByRating", reflect.TypeOf((*MockStore)(nil).ListTopAgentsByRating), arg0, arg1)
}

// ListTopLandlordsByRating mocks base method.
func (m *MockStore) ListTopLandlordsByRating(arg0 context.Context, arg1 db.ListTopLandlordsByRatingParams) ([]db.ListTopLandlordsByRatingRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTopLandlordsByRating", arg0, arg1)
	ret0, _ := ret[0].([]db.ListTopLandlordsByRatingRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopLandlordsByRating indicates an expected call of ListTopLandlordsByRating.
func (mr *MockStoreMockRecorder) ListTopLandlordsByRating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopLandlordsByRating", reflect.TypeOf((*MockStore)(nil).ListTopLandlordsByRating), arg0, arg1)
}

// ListUsersByType mocks base method.
func (m *MockStore) ListUsersByType(arg0 context.Context, arg1 db.ListUsersByTypeParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersByType", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByType indicates an expected call of ListUsersByType.
func (mr *MockStoreMockRecorder) ListUsersByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByType", reflect.TypeOf((*MockStore)(nil).ListUsersByType), arg0, arg1)
}

// ListVerificationsByTypeAndStatus mocks base method.
func (m *MockStore) ListVerificationsByTypeAndStatus(arg0 context.Context, arg1 db.ListVerificationsByTypeAndStatusParams) ([]db.ListVerificationsByTypeAndStatusRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVerificationsByTypeAndStatus", arg0, arg1)
	ret0, _ := ret[0].([]db.ListVerificationsByTypeAndStatusRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVerificationsByTypeAndStatus indicates an expected call of ListVerificationsByTypeAndStatus.
func (mr *MockStoreMockRecorder) ListVerificationsByTypeAndStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVerificationsByTypeAndStatus", reflect.TypeOf((*MockStore)(nil).ListVerificationsByTypeAndStatus), arg0, arg1)
}

// MarkAllUserNotificationsAsRead mocks base method.
func (m *MockStore) MarkAllUserNotificationsAsRead(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAllUserNotificationsAsRead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAllUserNotificationsAsRead indicates an expected call of MarkAllUserNotificationsAsRead.
func (mr *MockStoreMockRecorder) MarkAllUserNotificationsAsRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAllUserNotificationsAsRead", reflect.TypeOf((*MockStore)(nil).MarkAllUserNotificationsAsRead), arg0, arg1)
}

// MarkInquiryAsRead mocks base method.
func (m *MockStore) MarkInquiryAsRead(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkInquiryAsRead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkInquiryAsRead indicates an expected call of MarkInquiryAsRead.
func (mr *MockStoreMockRecorder) MarkInquiryAsRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkInquiryAsRead", reflect.TypeOf((*MockStore)(nil).MarkInquiryAsRead), arg0, arg1)
}

// MarkMessageAsRead mocks base method.
func (m *MockStore) MarkMessageAsRead(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMessageAsRead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMessageAsRead indicates an expected call of MarkMessageAsRead.
func (mr *MockStoreMockRecorder) MarkMessageAsRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMessageAsRead", reflect.TypeOf((*MockStore)(nil).MarkMessageAsRead), arg0, arg1)
}

// MarkMessagesAsRead mocks base method.
func (m *MockStore) MarkMessagesAsRead(arg0 context.Context, arg1 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMessagesAsRead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMessagesAsRead indicates an expected call of MarkMessagesAsRead.
func (mr *MockStoreMockRecorder) MarkMessagesAsRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMessagesAsRead", reflect.TypeOf((*MockStore)(nil).MarkMessagesAsRead), arg0, arg1)
}

// MarkNotificationAsRead mocks base method.
func (m *MockStore) MarkNotificationAsRead(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkNotificationAsRead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkNotificationAsRead indicates an expected call of MarkNotificationAsRead.
func (mr *MockStoreMockRecorder) MarkNotificationAsRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkNotificationAsRead", reflect.TypeOf((*MockStore)(nil).MarkNotificationAsRead), arg0, arg1)
}

// MarkNotificationsAsRead mocks base method.
func (m *MockStore) MarkNotificationsAsRead(arg0 context.Context, arg1 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkNotificationsAsRead", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkNotificationsAsRead indicates an expected call of MarkNotificationsAsRead.
func (mr *MockStoreMockRecorder) MarkNotificationsAsRead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkNotificationsAsRead", reflect.TypeOf((*MockStore)(nil).MarkNotificationsAsRead), arg0, arg1)
}

// ProcessPayment mocks base method.
func (m *MockStore) ProcessPayment(arg0 context.Context, arg1 db.ProcessPaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockStoreMockRecorder) ProcessPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockStore)(nil).ProcessPayment), arg0, arg1)
}

// RefundPayment mocks base method.
func (m *MockStore) RefundPayment(arg0 context.Context, arg1 db.RefundPaymentParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefundPayment", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefundPayment indicates an expected call of RefundPayment.
func (mr *MockStoreMockRecorder) RefundPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundPayment", reflect.TypeOf((*MockStore)(nil).RefundPayment), arg0, arg1)
}

// RejectInspectionAgent mocks base method.
func (m *MockStore) RejectInspectionAgent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectInspectionAgent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectInspectionAgent indicates an expected call of RejectInspectionAgent.
func (mr *MockStoreMockRecorder) RejectInspectionAgent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInspectionAgent", reflect.TypeOf((*MockStore)(nil).RejectInspectionAgent), arg0, arg1)
}

// RejectInspectionReport mocks base method.
func (m *MockStore) RejectInspectionReport(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectInspectionReport", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectInspectionReport indicates an expected call of RejectInspectionReport.
func (mr *MockStoreMockRecorder) RejectInspectionReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectInspectionReport", reflect.TypeOf((*MockStore)(nil).RejectInspectionReport), arg0, arg1)
}

// RejectRentalApplication mocks base method.
func (m *MockStore) RejectRentalApplication(arg0 context.Context, arg1 db.RejectRentalApplicationParams) (db.RentalApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectRentalApplication", arg0, arg1)
	ret0, _ := ret[0].(db.RentalApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectRentalApplication indicates an expected call of RejectRentalApplication.
func (mr *MockStoreMockRecorder) RejectRentalApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectRentalApplication", reflect.TypeOf((*MockStore)(nil).RejectRentalApplication), arg0, arg1)
}

// ResolveDispute mocks base method.
func (m *MockStore) ResolveDispute(arg0 context.Context, arg1 db.ResolveDisputeParams) (db.DisputeCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveDispute", arg0, arg1)
	ret0, _ := ret[0].(db.DisputeCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveDispute indicates an expected call of ResolveDispute.
func (mr *MockStoreMockRecorder) ResolveDispute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveDispute", reflect.TypeOf((*MockStore)(nil).ResolveDispute), arg0, arg1)
}

// RespondToInquiry mocks base method.
func (m *MockStore) RespondToInquiry(arg0 context.Context, arg1 db.RespondToInquiryParams) (db.PropertyInquiry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToInquiry", arg0, arg1)
	ret0, _ := ret[0].(db.PropertyInquiry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RespondToInquiry indicates an expected call of RespondToInquiry.
func (mr *MockStoreMockRecorder) RespondToInquiry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToInquiry", reflect.TypeOf((*MockStore)(nil).RespondToInquiry), arg0, arg1)
}

// SaveProperty mocks base method.
func (m *MockStore) SaveProperty(arg0 context.Context, arg1 db.SavePropertyParams) (db.SavedProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProperty", arg0, arg1)
	ret0, _ := ret[0].(db.SavedProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveProperty indicates an expected call of SaveProperty.
func (mr *MockStoreMockRecorder) SaveProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProperty", reflect.TypeOf((*MockStore)(nil).SaveProperty), arg0, arg1)
}

// SearchCacheEntries mocks base method.
func (m *MockStore) SearchCacheEntries(arg0 context.Context, arg1 db.SearchCacheEntriesParams) ([]db.PropertySearchCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCacheEntries", arg0, arg1)
	ret0, _ := ret[0].([]db.PropertySearchCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCacheEntries indicates an expected call of SearchCacheEntries.
func (mr *MockStoreMockRecorder) SearchCacheEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCacheEntries", reflect.TypeOf((*MockStore)(nil).SearchCacheEntries), arg0, arg1)
}

// SearchChatbotConversations mocks base method.
func (m *MockStore) SearchChatbotConversations(arg0 context.Context, arg1 db.SearchChatbotConversationsParams) ([]db.SearchChatbotConversationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchChatbotConversations", arg0, arg1)
	ret0, _ := ret[0].([]db.SearchChatbotConversationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchChatbotConversations indicates an expected call of SearchChatbotConversations.
func (mr *MockStoreMockRecorder) SearchChatbotConversations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchChatbotConversations", reflect.TypeOf((*MockStore)(nil).SearchChatbotConversations), arg0, arg1)
}

// SearchMessages mocks base method.
func (m *MockStore) SearchMessages(arg0 context.Context, arg1 db.SearchMessagesParams) ([]db.SearchMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMessages", arg0, arg1)
	ret0, _ := ret[0].([]db.SearchMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMessages indicates an expected call of SearchMessages.
func (mr *MockStoreMockRecorder) SearchMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMessages", reflect.TypeOf((*MockStore)(nil).SearchMessages), arg0, arg1)
}

// SearchProperties mocks base method.
func (m *MockStore) SearchProperties(arg0 context.Context, arg1 db.SearchPropertiesParams) ([]db.SearchPropertiesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProperties", arg0, arg1)
	ret0, _ := ret[0].([]db.SearchPropertiesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProperties indicates an expected call of SearchProperties.
func (mr *MockStoreMockRecorder) SearchProperties(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProperties", reflect.TypeOf((*MockStore)(nil).SearchProperties), arg0, arg1)
}

// SearchSettings mocks base method.
func (m *MockStore) SearchSettings(arg0 context.Context, arg1 db.SearchSettingsParams) ([]db.SystemSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSettings", arg0, arg1)
	ret0, _ := ret[0].([]db.SystemSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSettings indicates an expected call of SearchSettings.
func (mr *MockStoreMockRecorder) SearchSettings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSettings", reflect.TypeOf((*MockStore)(nil).SearchSettings), arg0, arg1)
}

// SearchTenantProfiles mocks base method.
func (m *MockStore) SearchTenantProfiles(arg0 context.Context, arg1 db.SearchTenantProfilesParams) ([]db.SearchTenantProfilesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTenantProfiles", arg0, arg1)
	ret0, _ := ret[0].([]db.SearchTenantProfilesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTenantProfiles indicates an expected call of SearchTenantProfiles.
func (mr *MockStoreMockRecorder) SearchTenantProfiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTenantProfiles", reflect.TypeOf((*MockStore)(nil).SearchTenantProfiles), arg0, arg1)
}

// SearchUsers mocks base method.
func (m *MockStore) SearchUsers(arg0 context.Context, arg1 db.SearchUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUsers indicates an expected call of SearchUsers.
func (mr *MockStoreMockRecorder) SearchUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*MockStore)(nil).SearchUsers), arg0, arg1)
}

// SetPrimaryMedia mocks base method.
func (m *MockStore) SetPrimaryMedia(arg0 context.Context, arg1 db.SetPrimaryMediaParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrimaryMedia", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPrimaryMedia indicates an expected call of SetPrimaryMedia.
func (mr *MockStoreMockRecorder) SetPrimaryMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrimaryMedia", reflect.TypeOf((*MockStore)(nil).SetPrimaryMedia), arg0, arg1)
}

// TenantSignAgreement mocks base method.
func (m *MockStore) TenantSignAgreement(arg0 context.Context, arg1 int64) (db.RentalAgreement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantSignAgreement", arg0, arg1)
	ret0, _ := ret[0].(db.RentalAgreement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TenantSignAgreement indicates an expected call of TenantSignAgreement.
func (mr *MockStoreMockRecorder) TenantSignAgreement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantSignAgreement", reflect.TypeOf((*MockStore)(nil).TenantSignAgreement), arg0, arg1)
}

// TerminateAgreement mocks base method.
func (m *MockStore) TerminateAgreement(arg0 context.Context, arg1 int64) (db.RentalAgreement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateAgreement", arg0, arg1)
	ret0, _ := ret[0].(db.RentalAgreement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateAgreement indicates an expected call of TerminateAgreement.
func (mr *MockStoreMockRecorder) TerminateAgreement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateAgreement", reflect.TypeOf((*MockStore)(nil).TerminateAgreement), arg0, arg1)
}

// UnsaveProperty mocks base method.
func (m *MockStore) UnsaveProperty(arg0 context.Context, arg1 db.UnsavePropertyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsaveProperty", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsaveProperty indicates an expected call of UnsaveProperty.
func (mr *MockStoreMockRecorder) UnsaveProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsaveProperty", reflect.TypeOf((*MockStore)(nil).UnsaveProperty), arg0, arg1)
}

// UpdateAgentBankingDetails mocks base method.
func (m *MockStore) UpdateAgentBankingDetails(arg0 context.Context, arg1 db.UpdateAgentBankingDetailsParams) (db.InspectionAgentProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentBankingDetails", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionAgentProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentBankingDetails indicates an expected call of UpdateAgentBankingDetails.
func (mr *MockStoreMockRecorder) UpdateAgentBankingDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentBankingDetails", reflect.TypeOf((*MockStore)(nil).UpdateAgentBankingDetails), arg0, arg1)
}

// UpdateAgentEarnings mocks base method.
func (m *MockStore) UpdateAgentEarnings(arg0 context.Context, arg1 db.UpdateAgentEarningsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentEarnings", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentEarnings indicates an expected call of UpdateAgentEarnings.
func (mr *MockStoreMockRecorder) UpdateAgentEarnings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentEarnings", reflect.TypeOf((*MockStore)(nil).UpdateAgentEarnings), arg0, arg1)
}

// UpdateAgentServiceDetails mocks base method.
func (m *MockStore) UpdateAgentServiceDetails(arg0 context.Context, arg1 db.UpdateAgentServiceDetailsParams) (db.InspectionAgentProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentServiceDetails", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionAgentProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentServiceDetails indicates an expected call of UpdateAgentServiceDetails.
func (mr *MockStoreMockRecorder) UpdateAgentServiceDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentServiceDetails", reflect.TypeOf((*MockStore)(nil).UpdateAgentServiceDetails), arg0, arg1)
}

// UpdateAgentStats mocks base method.
func (m *MockStore) UpdateAgentStats(arg0 context.Context, arg1 db.UpdateAgentStatsParams) (db.InspectionAgentProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentStats", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionAgentProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentStats indicates an expected call of UpdateAgentStats.
func (mr *MockStoreMockRecorder) UpdateAgentStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentStats", reflect.TypeOf((*MockStore)(nil).UpdateAgentStats), arg0, arg1)
}

// UpdateAgreementDocument mocks base method.
func (m *MockStore) UpdateAgreementDocument(arg0 context.Context, arg1 db.UpdateAgreementDocumentParams) (db.RentalAgreement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgreementDocument", arg0, arg1)
	ret0, _ := ret[0].(db.RentalAgreement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgreementDocument indicates an expected call of UpdateAgreementDocument.
func (mr *MockStoreMockRecorder) UpdateAgreementDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgreementDocument", reflect.TypeOf((*MockStore)(nil).UpdateAgreementDocument), arg0, arg1)
}

// UpdateAgreementStatus mocks base method.
func (m *MockStore) UpdateAgreementStatus(arg0 context.Context, arg1 db.UpdateAgreementStatusParams) (db.RentalAgreement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgreementStatus", arg0, arg1)
	ret0, _ := ret[0].(db.RentalAgreement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgreementStatus indicates an expected call of UpdateAgreementStatus.
func (mr *MockStoreMockRecorder) UpdateAgreementStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgreementStatus", reflect.TypeOf((*MockStore)(nil).UpdateAgreementStatus), arg0, arg1)
}

// UpdateApplicationDocuments mocks base method.
func (m *MockStore) UpdateApplicationDocuments(arg0 context.Context, arg1 db.UpdateApplicationDocumentsParams) (db.RentalApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationDocuments", arg0, arg1)
	ret0, _ := ret[0].(db.RentalApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationDocuments indicates an expected call of UpdateApplicationDocuments.
func (mr *MockStoreMockRecorder) UpdateApplicationDocuments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationDocuments", reflect.TypeOf((*MockStore)(nil).UpdateApplicationDocuments), arg0, arg1)
}

// UpdateApplicationEmploymentDetails mocks base method.
func (m *MockStore) UpdateApplicationEmploymentDetails(arg0 context.Context, arg1 db.UpdateApplicationEmploymentDetailsParams) (db.RentalApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationEmploymentDetails", arg0, arg1)
	ret0, _ := ret[0].(db.RentalApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationEmploymentDetails indicates an expected call of UpdateApplicationEmploymentDetails.
func (mr *MockStoreMockRecorder) UpdateApplicationEmploymentDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationEmploymentDetails", reflect.TypeOf((*MockStore)(nil).UpdateApplicationEmploymentDetails), arg0, arg1)
}

// UpdateApplicationReferences mocks base method.
func (m *MockStore) UpdateApplicationReferences(arg0 context.Context, arg1 db.UpdateApplicationReferencesParams) (db.RentalApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationReferences", arg0, arg1)
	ret0, _ := ret[0].(db.RentalApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationReferences indicates an expected call of UpdateApplicationReferences.
func (mr *MockStoreMockRecorder) UpdateApplicationReferences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationReferences", reflect.TypeOf((*MockStore)(nil).UpdateApplicationReferences), arg0, arg1)
}

// UpdateDisputeCase mocks base method.
func (m *MockStore) UpdateDisputeCase(arg0 context.Context, arg1 db.UpdateDisputeCaseParams) (db.DisputeCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDisputeCase", arg0, arg1)
	ret0, _ := ret[0].(db.DisputeCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDisputeCase indicates an expected call of UpdateDisputeCase.
func (mr *MockStoreMockRecorder) UpdateDisputeCase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDisputeCase", reflect.TypeOf((*MockStore)(nil).UpdateDisputeCase), arg0, arg1)
}

// UpdateDisputeStatus mocks base method.
func (m *MockStore) UpdateDisputeStatus(arg0 context.Context, arg1 db.UpdateDisputeStatusParams) (db.DisputeCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDisputeStatus", arg0, arg1)
	ret0, _ := ret[0].(db.DisputeCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDisputeStatus indicates an expected call of UpdateDisputeStatus.
func (mr *MockStoreMockRecorder) UpdateDisputeStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDisputeStatus", reflect.TypeOf((*MockStore)(nil).UpdateDisputeStatus), arg0, arg1)
}

// UpdateInquiryStatus mocks base method.
func (m *MockStore) UpdateInquiryStatus(arg0 context.Context, arg1 db.UpdateInquiryStatusParams) (db.PropertyInquiry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInquiryStatus", arg0, arg1)
	ret0, _ := ret[0].(db.PropertyInquiry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInquiryStatus indicates an expected call of UpdateInquiryStatus.
func (mr *MockStoreMockRecorder) UpdateInquiryStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInquiryStatus", reflect.TypeOf((*MockStore)(nil).UpdateInquiryStatus), arg0, arg1)
}

// UpdateInspectionAgentProfile mocks base method.
func (m *MockStore) UpdateInspectionAgentProfile(arg0 context.Context, arg1 db.UpdateInspectionAgentProfileParams) (db.InspectionAgentProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInspectionAgentProfile", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionAgentProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInspectionAgentProfile indicates an expected call of UpdateInspectionAgentProfile.
func (mr *MockStoreMockRecorder) UpdateInspectionAgentProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInspectionAgentProfile", reflect.TypeOf((*MockStore)(nil).UpdateInspectionAgentProfile), arg0, arg1)
}

// UpdateInspectionPaymentStatus mocks base method.
func (m *MockStore) UpdateInspectionPaymentStatus(arg0 context.Context, arg1 db.UpdateInspectionPaymentStatusParams) (db.InspectionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInspectionPaymentStatus", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInspectionPaymentStatus indicates an expected call of UpdateInspectionPaymentStatus.
func (mr *MockStoreMockRecorder) UpdateInspectionPaymentStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInspectionPaymentStatus", reflect.TypeOf((*MockStore)(nil).UpdateInspectionPaymentStatus), arg0, arg1)
}

// UpdateInspectionReport mocks base method.
func (m *MockStore) UpdateInspectionReport(arg0 context.Context, arg1 db.UpdateInspectionReportParams) (db.InspectionReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInspectionReport", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInspectionReport indicates an expected call of UpdateInspectionReport.
func (mr *MockStoreMockRecorder) UpdateInspectionReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInspectionReport", reflect.TypeOf((*MockStore)(nil).UpdateInspectionReport), arg0, arg1)
}

// UpdateInspectionRequestStatus mocks base method.
func (m *MockStore) UpdateInspectionRequestStatus(arg0 context.Context, arg1 db.UpdateInspectionRequestStatusParams) (db.InspectionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInspectionRequestStatus", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInspectionRequestStatus indicates an expected call of UpdateInspectionRequestStatus.
func (mr *MockStoreMockRecorder) UpdateInspectionRequestStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInspectionRequestStatus", reflect.TypeOf((*MockStore)(nil).UpdateInspectionRequestStatus), arg0, arg1)
}

// UpdateLandlordBankingDetails mocks base method.
func (m *MockStore) UpdateLandlordBankingDetails(arg0 context.Context, arg1 db.UpdateLandlordBankingDetailsParams) (db.LandlordProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLandlordBankingDetails", arg0, arg1)
	ret0, _ := ret[0].(db.LandlordProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLandlordBankingDetails indicates an expected call of UpdateLandlordBankingDetails.
func (mr *MockStoreMockRecorder) UpdateLandlordBankingDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLandlordBankingDetails", reflect.TypeOf((*MockStore)(nil).UpdateLandlordBankingDetails), arg0, arg1)
}

// UpdateLandlordBusinessDetails mocks base method.
func (m *MockStore) UpdateLandlordBusinessDetails(arg0 context.Context, arg1 db.UpdateLandlordBusinessDetailsParams) (db.LandlordProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLandlordBusinessDetails", arg0, arg1)
	ret0, _ := ret[0].(db.LandlordProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLandlordBusinessDetails indicates an expected call of UpdateLandlordBusinessDetails.
func (mr *MockStoreMockRecorder) UpdateLandlordBusinessDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLandlordBusinessDetails", reflect.TypeOf((*MockStore)(nil).UpdateLandlordBusinessDetails), arg0, arg1)
}

// UpdateLandlordGuarantorDetails mocks base method.
func (m *MockStore) UpdateLandlordGuarantorDetails(arg0 context.Context, arg1 db.UpdateLandlordGuarantorDetailsParams) (db.LandlordProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLandlordGuarantorDetails", arg0, arg1)
	ret0, _ := ret[0].(db.LandlordProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLandlordGuarantorDetails indicates an expected call of UpdateLandlordGuarantorDetails.
func (mr *MockStoreMockRecorder) UpdateLandlordGuarantorDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLandlordGuarantorDetails", reflect.TypeOf((*MockStore)(nil).UpdateLandlordGuarantorDetails), arg0, arg1)
}

// UpdateLandlordProfile mocks base method.
func (m *MockStore) UpdateLandlordProfile(arg0 context.Context, arg1 db.UpdateLandlordProfileParams) (db.LandlordProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLandlordProfile", arg0, arg1)
	ret0, _ := ret[0].(db.LandlordProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLandlordProfile indicates an expected call of UpdateLandlordProfile.
func (mr *MockStoreMockRecorder) UpdateLandlordProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLandlordProfile", reflect.TypeOf((*MockStore)(nil).UpdateLandlordProfile), arg0, arg1)
}

// UpdateLandlordStats mocks base method.
func (m *MockStore) UpdateLandlordStats(arg0 context.Context, arg1 db.UpdateLandlordStatsParams) (db.LandlordProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLandlordStats", arg0, arg1)
	ret0, _ := ret[0].(db.LandlordProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLandlordStats indicates an expected call of UpdateLandlordStats.
func (mr *MockStoreMockRecorder) UpdateLandlordStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLandlordStats", reflect.TypeOf((*MockStore)(nil).UpdateLandlordStats), arg0, arg1)
}

// UpdateMediaCaption mocks base method.
func (m *MockStore) UpdateMediaCaption(arg0 context.Context, arg1 db.UpdateMediaCaptionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMediaCaption", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMediaCaption indicates an expected call of UpdateMediaCaption.
func (mr *MockStoreMockRecorder) UpdateMediaCaption(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMediaCaption", reflect.TypeOf((*MockStore)(nil).UpdateMediaCaption), arg0, arg1)
}

// UpdateMediaDisplayOrder mocks base method.
func (m *MockStore) UpdateMediaDisplayOrder(arg0 context.Context, arg1 db.UpdateMediaDisplayOrderParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMediaDisplayOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMediaDisplayOrder indicates an expected call of UpdateMediaDisplayOrder.
func (mr *MockStoreMockRecorder) UpdateMediaDisplayOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMediaDisplayOrder", reflect.TypeOf((*MockStore)(nil).UpdateMediaDisplayOrder), arg0, arg1)
}

// UpdateNotification mocks base method.
func (m *MockStore) UpdateNotification(arg0 context.Context, arg1 db.UpdateNotificationParams) (db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotification", arg0, arg1)
	ret0, _ := ret[0].(db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotification indicates an expected call of UpdateNotification.
func (mr *MockStoreMockRecorder) UpdateNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotification", reflect.TypeOf((*MockStore)(nil).UpdateNotification), arg0, arg1)
}

// UpdateNotificationEmailSent mocks base method.
func (m *MockStore) UpdateNotificationEmailSent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationEmailSent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationEmailSent indicates an expected call of UpdateNotificationEmailSent.
func (mr *MockStoreMockRecorder) UpdateNotificationEmailSent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationEmailSent", reflect.TypeOf((*MockStore)(nil).UpdateNotificationEmailSent), arg0, arg1)
}

// UpdateNotificationPushSent mocks base method.
func (m *MockStore) UpdateNotificationPushSent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationPushSent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationPushSent indicates an expected call of UpdateNotificationPushSent.
func (mr *MockStoreMockRecorder) UpdateNotificationPushSent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationPushSent", reflect.TypeOf((*MockStore)(nil).UpdateNotificationPushSent), arg0, arg1)
}

// UpdateNotificationSMSSent mocks base method.
func (m *MockStore) UpdateNotificationSMSSent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationSMSSent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationSMSSent indicates an expected call of UpdateNotificationSMSSent.
func (mr *MockStoreMockRecorder) UpdateNotificationSMSSent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationSMSSent", reflect.TypeOf((*MockStore)(nil).UpdateNotificationSMSSent), arg0, arg1)
}

// UpdatePaymentStatus mocks base method.
func (m *MockStore) UpdatePaymentStatus(arg0 context.Context, arg1 db.UpdatePaymentStatusParams) (db.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentStatus", arg0, arg1)
	ret0, _ := ret[0].(db.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentStatus indicates an expected call of UpdatePaymentStatus.
func (mr *MockStoreMockRecorder) UpdatePaymentStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentStatus", reflect.TypeOf((*MockStore)(nil).UpdatePaymentStatus), arg0, arg1)
}

// UpdateProperty mocks base method.
func (m *MockStore) UpdateProperty(arg0 context.Context, arg1 db.UpdatePropertyParams) (db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProperty", arg0, arg1)
	ret0, _ := ret[0].(db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProperty indicates an expected call of UpdateProperty.
func (mr *MockStoreMockRecorder) UpdateProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProperty", reflect.TypeOf((*MockStore)(nil).UpdateProperty), arg0, arg1)
}

// UpdatePropertyAvailability mocks base method.
func (m *MockStore) UpdatePropertyAvailability(arg0 context.Context, arg1 db.UpdatePropertyAvailabilityParams) (db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePropertyAvailability", arg0, arg1)
	ret0, _ := ret[0].(db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePropertyAvailability indicates an expected call of UpdatePropertyAvailability.
func (mr *MockStoreMockRecorder) UpdatePropertyAvailability(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePropertyAvailability", reflect.TypeOf((*MockStore)(nil).UpdatePropertyAvailability), arg0, arg1)
}

// UpdatePropertyCommunityReview mocks base method.
func (m *MockStore) UpdatePropertyCommunityReview(arg0 context.Context, arg1 db.UpdatePropertyCommunityReviewParams) (db.PropertyCommunityReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePropertyCommunityReview", arg0, arg1)
	ret0, _ := ret[0].(db.PropertyCommunityReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePropertyCommunityReview indicates an expected call of UpdatePropertyCommunityReview.
func (mr *MockStoreMockRecorder) UpdatePropertyCommunityReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePropertyCommunityReview", reflect.TypeOf((*MockStore)(nil).UpdatePropertyCommunityReview), arg0, arg1)
}

// UpdatePropertyMedia mocks base method.
func (m *MockStore) UpdatePropertyMedia(arg0 context.Context, arg1 db.UpdatePropertyMediaParams) (db.PropertyMedium, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePropertyMedia", arg0, arg1)
	ret0, _ := ret[0].(db.PropertyMedium)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePropertyMedia indicates an expected call of UpdatePropertyMedia.
func (mr *MockStoreMockRecorder) UpdatePropertyMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePropertyMedia", reflect.TypeOf((*MockStore)(nil).UpdatePropertyMedia), arg0, arg1)
}

// UpdatePropertyStatus mocks base method.
func (m *MockStore) UpdatePropertyStatus(arg0 context.Context, arg1 db.UpdatePropertyStatusParams) (db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePropertyStatus", arg0, arg1)
	ret0, _ := ret[0].(db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePropertyStatus indicates an expected call of UpdatePropertyStatus.
func (mr *MockStoreMockRecorder) UpdatePropertyStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePropertyStatus", reflect.TypeOf((*MockStore)(nil).UpdatePropertyStatus), arg0, arg1)
}

// UpdateRentalAgreement mocks base method.
func (m *MockStore) UpdateRentalAgreement(arg0 context.Context, arg1 db.UpdateRentalAgreementParams) (db.RentalAgreement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRentalAgreement", arg0, arg1)
	ret0, _ := ret[0].(db.RentalAgreement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRentalAgreement indicates an expected call of UpdateRentalAgreement.
func (mr *MockStoreMockRecorder) UpdateRentalAgreement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRentalAgreement", reflect.TypeOf((*MockStore)(nil).UpdateRentalAgreement), arg0, arg1)
}

// UpdateRentalApplicationStatus mocks base method.
func (m *MockStore) UpdateRentalApplicationStatus(arg0 context.Context, arg1 db.UpdateRentalApplicationStatusParams) (db.RentalApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRentalApplicationStatus", arg0, arg1)
	ret0, _ := ret[0].(db.RentalApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRentalApplicationStatus indicates an expected call of UpdateRentalApplicationStatus.
func (mr *MockStoreMockRecorder) UpdateRentalApplicationStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRentalApplicationStatus", reflect.TypeOf((*MockStore)(nil).UpdateRentalApplicationStatus), arg0, arg1)
}

// UpdateReportMedia mocks base method.
func (m *MockStore) UpdateReportMedia(arg0 context.Context, arg1 db.UpdateReportMediaParams) (db.InspectionReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReportMedia", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReportMedia indicates an expected call of UpdateReportMedia.
func (mr *MockStoreMockRecorder) UpdateReportMedia(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReportMedia", reflect.TypeOf((*MockStore)(nil).UpdateReportMedia), arg0, arg1)
}

// UpdateReportSummary mocks base method.
func (m *MockStore) UpdateReportSummary(arg0 context.Context, arg1 db.UpdateReportSummaryParams) (db.InspectionReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReportSummary", arg0, arg1)
	ret0, _ := ret[0].(db.InspectionReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReportSummary indicates an expected call of UpdateReportSummary.
func (mr *MockStoreMockRecorder) UpdateReportSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReportSummary", reflect.TypeOf((*MockStore)(nil).UpdateReportSummary), arg0, arg1)
}

// UpdateSearchCache mocks base method.
func (m *MockStore) UpdateSearchCache(arg0 context.Context, arg1 db.UpdateSearchCacheParams) (db.PropertySearchCache, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSearchCache", arg0, arg1)
	ret0, _ := ret[0].(db.PropertySearchCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSearchCache indicates an expected call of UpdateSearchCache.
func (mr *MockStoreMockRecorder) UpdateSearchCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSearchCache", reflect.TypeOf((*MockStore)(nil).UpdateSearchCache), arg0, arg1)
}

// UpdateSessionActivity mocks base method.
func (m *MockStore) UpdateSessionActivity(arg0 context.Context, arg1 db.UpdateSessionActivityParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionActivity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSessionActivity indicates an expected call of UpdateSessionActivity.
func (mr *MockStoreMockRecorder) UpdateSessionActivity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionActivity", reflect.TypeOf((*MockStore)(nil).UpdateSessionActivity), arg0, arg1)
}

// UpdateSessionLocation mocks base method.
func (m *MockStore) UpdateSessionLocation(arg0 context.Context, arg1 db.UpdateSessionLocationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionLocation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSessionLocation indicates an expected call of UpdateSessionLocation.
func (mr *MockStoreMockRecorder) UpdateSessionLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionLocation", reflect.TypeOf((*MockStore)(nil).UpdateSessionLocation), arg0, arg1)
}

// UpdateSettingValue mocks base method.
func (m *MockStore) UpdateSettingValue(arg0 context.Context, arg1 db.UpdateSettingValueParams) (db.SystemSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSettingValue", arg0, arg1)
	ret0, _ := ret[0].(db.SystemSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSettingValue indicates an expected call of UpdateSettingValue.
func (mr *MockStoreMockRecorder) UpdateSettingValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettingValue", reflect.TypeOf((*MockStore)(nil).UpdateSettingValue), arg0, arg1)
}

// UpdateSettingVisibility mocks base method.
func (m *MockStore) UpdateSettingVisibility(arg0 context.Context, arg1 db.UpdateSettingVisibilityParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSettingVisibility", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSettingVisibility indicates an expected call of UpdateSettingVisibility.
func (mr *MockStoreMockRecorder) UpdateSettingVisibility(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettingVisibility", reflect.TypeOf((*MockStore)(nil).UpdateSettingVisibility), arg0, arg1)
}

// UpdateSystemSetting mocks base method.
func (m *MockStore) UpdateSystemSetting(arg0 context.Context, arg1 db.UpdateSystemSettingParams) (db.SystemSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSystemSetting", arg0, arg1)
	ret0, _ := ret[0].(db.SystemSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSystemSetting indicates an expected call of UpdateSystemSetting.
func (mr *MockStoreMockRecorder) UpdateSystemSetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSystemSetting", reflect.TypeOf((*MockStore)(nil).UpdateSystemSetting), arg0, arg1)
}

// UpdateTenantBudget mocks base method.
func (m *MockStore) UpdateTenantBudget(arg0 context.Context, arg1 db.UpdateTenantBudgetParams) (db.TenantProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTenantBudget", arg0, arg1)
	ret0, _ := ret[0].(db.TenantProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTenantBudget indicates an expected call of UpdateTenantBudget.
func (mr *MockStoreMockRecorder) UpdateTenantBudget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTenantBudget", reflect.TypeOf((*MockStore)(nil).UpdateTenantBudget), arg0, arg1)
}

// UpdateTenantEmploymentDetails mocks base method.
func (m *MockStore) UpdateTenantEmploymentDetails(arg0 context.Context, arg1 db.UpdateTenantEmploymentDetailsParams) (db.TenantProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTenantEmploymentDetails", arg0, arg1)
	ret0, _ := ret[0].(db.TenantProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTenantEmploymentDetails indicates an expected call of UpdateTenantEmploymentDetails.
func (mr *MockStoreMockRecorder) UpdateTenantEmploymentDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTenantEmploymentDetails", reflect.TypeOf((*MockStore)(nil).UpdateTenantEmploymentDetails), arg0, arg1)
}

// UpdateTenantPreferences mocks base method.
func (m *MockStore) UpdateTenantPreferences(arg0 context.Context, arg1 db.UpdateTenantPreferencesParams) (db.TenantProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTenantPreferences", arg0, arg1)
	ret0, _ := ret[0].(db.TenantProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTenantPreferences indicates an expected call of UpdateTenantPreferences.
func (mr *MockStoreMockRecorder) UpdateTenantPreferences(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTenantPreferences", reflect.TypeOf((*MockStore)(nil).UpdateTenantPreferences), arg0, arg1)
}

// UpdateTenantProfile mocks base method.
func (m *MockStore) UpdateTenantProfile(arg0 context.Context, arg1 db.UpdateTenantProfileParams) (db.TenantProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTenantProfile", arg0, arg1)
	ret0, _ := ret[0].(db.TenantProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTenantProfile indicates an expected call of UpdateTenantProfile.
func (mr *MockStoreMockRecorder) UpdateTenantProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTenantProfile", reflect.TypeOf((*MockStore)(nil).UpdateTenantProfile), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserActiveStatus mocks base method.
func (m *MockStore) UpdateUserActiveStatus(arg0 context.Context, arg1 db.UpdateUserActiveStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserActiveStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserActiveStatus indicates an expected call of UpdateUserActiveStatus.
func (mr *MockStoreMockRecorder) UpdateUserActiveStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserActiveStatus", reflect.TypeOf((*MockStore)(nil).UpdateUserActiveStatus), arg0, arg1)
}

// UpdateUserLastLogin mocks base method.
func (m *MockStore) UpdateUserLastLogin(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLastLogin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLastLogin indicates an expected call of UpdateUserLastLogin.
func (mr *MockStoreMockRecorder) UpdateUserLastLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLastLogin", reflect.TypeOf((*MockStore)(nil).UpdateUserLastLogin), arg0, arg1)
}

// UpdateUserPassword mocks base method.
func (m *MockStore) UpdateUserPassword(arg0 context.Context, arg1 db.UpdateUserPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockStoreMockRecorder) UpdateUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockStore)(nil).UpdateUserPassword), arg0, arg1)
}

// UpdateUserRating mocks base method.
func (m *MockStore) UpdateUserRating(arg0 context.Context, arg1 db.UpdateUserRatingParams) (db.UserRating, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRating", arg0, arg1)
	ret0, _ := ret[0].(db.UserRating)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRating indicates an expected call of UpdateUserRating.
func (mr *MockStoreMockRecorder) UpdateUserRating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRating", reflect.TypeOf((*MockStore)(nil).UpdateUserRating), arg0, arg1)
}

// UpdateUserVerificationStatus mocks base method.
func (m *MockStore) UpdateUserVerificationStatus(arg0 context.Context, arg1 db.UpdateUserVerificationStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserVerificationStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserVerificationStatus indicates an expected call of UpdateUserVerificationStatus.
func (mr *MockStoreMockRecorder) UpdateUserVerificationStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserVerificationStatus", reflect.TypeOf((*MockStore)(nil).UpdateUserVerificationStatus), arg0, arg1)
}

// UpdateVerificationData mocks base method.
func (m *MockStore) UpdateVerificationData(arg0 context.Context, arg1 db.UpdateVerificationDataParams) (db.UserVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerificationData", arg0, arg1)
	ret0, _ := ret[0].(db.UserVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerificationData indicates an expected call of UpdateVerificationData.
func (mr *MockStoreMockRecorder) UpdateVerificationData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerificationData", reflect.TypeOf((*MockStore)(nil).UpdateVerificationData), arg0, arg1)
}

// UpdateVerificationStatus mocks base method.
func (m *MockStore) UpdateVerificationStatus(arg0 context.Context, arg1 db.UpdateVerificationStatusParams) (db.UserVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerificationStatus", arg0, arg1)
	ret0, _ := ret[0].(db.UserVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerificationStatus indicates an expected call of UpdateVerificationStatus.
func (mr *MockStoreMockRecorder) UpdateVerificationStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerificationStatus", reflect.TypeOf((*MockStore)(nil).UpdateVerificationStatus), arg0, arg1)
}

// VerifyEmailTx mocks base method.
func (m *MockStore) VerifyEmailTx(arg0 context.Context, arg1 db.VerifyEmailTxParams) (db.VerifyEmailTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailTx", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmailTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailTx indicates an expected call of VerifyEmailTx.
func (mr *MockStoreMockRecorder) VerifyEmailTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailTx", reflect.TypeOf((*MockStore)(nil).VerifyEmailTx), arg0, arg1)
}

// VerifyProperty mocks base method.
func (m *MockStore) VerifyProperty(arg0 context.Context, arg1 db.VerifyPropertyParams) (db.Property, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyProperty", arg0, arg1)
	ret0, _ := ret[0].(db.Property)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyProperty indicates an expected call of VerifyProperty.
func (mr *MockStoreMockRecorder) VerifyProperty(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyProperty", reflect.TypeOf((*MockStore)(nil).VerifyProperty), arg0, arg1)
}

// VerifyPropertyReview mocks base method.
func (m *MockStore) VerifyPropertyReview(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPropertyReview", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyPropertyReview indicates an expected call of VerifyPropertyReview.
func (mr *MockStoreMockRecorder) VerifyPropertyReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPropertyReview", reflect.TypeOf((*MockStore)(nil).VerifyPropertyReview), arg0, arg1)
}

// VerifyRating mocks base method.
func (m *MockStore) VerifyRating(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRating", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyRating indicates an expected call of VerifyRating.
func (mr *MockStoreMockRecorder) VerifyRating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRating", reflect.TypeOf((*MockStore)(nil).VerifyRating), arg0, arg1)
}

// WithdrawRentalApplication mocks base method.
func (m *MockStore) WithdrawRentalApplication(arg0 context.Context, arg1 int64) (db.RentalApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawRentalApplication", arg0, arg1)
	ret0, _ := ret[0].(db.RentalApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithdrawRentalApplication indicates an expected call of WithdrawRentalApplication.
func (mr *MockStoreMockRecorder) WithdrawRentalApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawRentalApplication", reflect.TypeOf((*MockStore)(nil).WithdrawRentalApplication), arg0, arg1)
}
