// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: inspection_request.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignInspectionAgent = `-- name: AssignInspectionAgent :one
UPDATE inspection_requests 
SET inspection_agent_id = $2, status = 'agent_assigned', updated_at = NOW()
WHERE id = $1 
RETURNING id, property_id, tenant_id, landlord_id, inspection_agent_id, inspection_type, requested_date, requested_time, special_requirements, inspection_fee, status, payment_status, payment_reference, confirmed_date, confirmed_time, completed_at, cancellation_reason, cancelled_at, created_at, updated_at
`

type AssignInspectionAgentParams struct {
	ID                int64       `json:"id"`
	InspectionAgentID pgtype.Int8 `json:"inspection_agent_id"`
}

// Assign inspection agent
func (q *Queries) AssignInspectionAgent(ctx context.Context, arg AssignInspectionAgentParams) (InspectionRequest, error) {
	row := q.db.QueryRow(ctx, assignInspectionAgent, arg.ID, arg.InspectionAgentID)
	var i InspectionRequest
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.TenantID,
		&i.LandlordID,
		&i.InspectionAgentID,
		&i.InspectionType,
		&i.RequestedDate,
		&i.RequestedTime,
		&i.SpecialRequirements,
		&i.InspectionFee,
		&i.Status,
		&i.PaymentStatus,
		&i.PaymentReference,
		&i.ConfirmedDate,
		&i.ConfirmedTime,
		&i.CompletedAt,
		&i.CancellationReason,
		&i.CancelledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const cancelInspection = `-- name: CancelInspection :one
UPDATE inspection_requests 
SET cancellation_reason = $2, cancelled_at = NOW(), status = 'cancelled', updated_at = NOW()
WHERE id = $1 
RETURNING id, property_id, tenant_id, landlord_id, inspection_agent_id, inspection_type, requested_date, requested_time, special_requirements, inspection_fee, status, payment_status, payment_reference, confirmed_date, confirmed_time, completed_at, cancellation_reason, cancelled_at, created_at, updated_at
`

type CancelInspectionParams struct {
	ID                 int64       `json:"id"`
	CancellationReason pgtype.Text `json:"cancellation_reason"`
}

// Cancel inspection
func (q *Queries) CancelInspection(ctx context.Context, arg CancelInspectionParams) (InspectionRequest, error) {
	row := q.db.QueryRow(ctx, cancelInspection, arg.ID, arg.CancellationReason)
	var i InspectionRequest
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.TenantID,
		&i.LandlordID,
		&i.InspectionAgentID,
		&i.InspectionType,
		&i.RequestedDate,
		&i.RequestedTime,
		&i.SpecialRequirements,
		&i.InspectionFee,
		&i.Status,
		&i.PaymentStatus,
		&i.PaymentReference,
		&i.ConfirmedDate,
		&i.ConfirmedTime,
		&i.CompletedAt,
		&i.CancellationReason,
		&i.CancelledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const completeInspection = `-- name: CompleteInspection :one
UPDATE inspection_requests 
SET completed_at = NOW(), status = 'completed', updated_at = NOW()
WHERE id = $1 
RETURNING id, property_id, tenant_id, landlord_id, inspection_agent_id, inspection_type, requested_date, requested_time, special_requirements, inspection_fee, status, payment_status, payment_reference, confirmed_date, confirmed_time, completed_at, cancellation_reason, cancelled_at, created_at, updated_at
`

// Complete inspection
func (q *Queries) CompleteInspection(ctx context.Context, id int64) (InspectionRequest, error) {
	row := q.db.QueryRow(ctx, completeInspection, id)
	var i InspectionRequest
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.TenantID,
		&i.LandlordID,
		&i.InspectionAgentID,
		&i.InspectionType,
		&i.RequestedDate,
		&i.RequestedTime,
		&i.SpecialRequirements,
		&i.InspectionFee,
		&i.Status,
		&i.PaymentStatus,
		&i.PaymentReference,
		&i.ConfirmedDate,
		&i.ConfirmedTime,
		&i.CompletedAt,
		&i.CancellationReason,
		&i.CancelledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const confirmInspection = `-- name: ConfirmInspection :one
UPDATE inspection_requests 
SET confirmed_date = $2, confirmed_time = $3, status = 'confirmed', updated_at = NOW()
WHERE id = $1 
RETURNING id, property_id, tenant_id, landlord_id, inspection_agent_id, inspection_type, requested_date, requested_time, special_requirements, inspection_fee, status, payment_status, payment_reference, confirmed_date, confirmed_time, completed_at, cancellation_reason, cancelled_at, created_at, updated_at
`

type ConfirmInspectionParams struct {
	ID            int64       `json:"id"`
	ConfirmedDate pgtype.Date `json:"confirmed_date"`
	ConfirmedTime pgtype.Time `json:"confirmed_time"`
}

// Confirm inspection
func (q *Queries) ConfirmInspection(ctx context.Context, arg ConfirmInspectionParams) (InspectionRequest, error) {
	row := q.db.QueryRow(ctx, confirmInspection, arg.ID, arg.ConfirmedDate, arg.ConfirmedTime)
	var i InspectionRequest
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.TenantID,
		&i.LandlordID,
		&i.InspectionAgentID,
		&i.InspectionType,
		&i.RequestedDate,
		&i.RequestedTime,
		&i.SpecialRequirements,
		&i.InspectionFee,
		&i.Status,
		&i.PaymentStatus,
		&i.PaymentReference,
		&i.ConfirmedDate,
		&i.ConfirmedTime,
		&i.CompletedAt,
		&i.CancellationReason,
		&i.CancelledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countAgentInspectionRequests = `-- name: CountAgentInspectionRequests :one
SELECT COUNT(*) FROM inspection_requests 
WHERE inspection_agent_id = $1
`

// Count agent's inspection requests
func (q *Queries) CountAgentInspectionRequests(ctx context.Context, inspectionAgentID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, countAgentInspectionRequests, inspectionAgentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countInspectionRequestsByStatus = `-- name: CountInspectionRequestsByStatus :one
SELECT COUNT(*) FROM inspection_requests 
WHERE status = $1
`

// Count inspection requests by status
func (q *Queries) CountInspectionRequestsByStatus(ctx context.Context, status NullInspectionStatusEnum) (int64, error) {
	row := q.db.QueryRow(ctx, countInspectionRequestsByStatus, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTenantInspectionRequests = `-- name: CountTenantInspectionRequests :one
SELECT COUNT(*) FROM inspection_requests 
WHERE tenant_id = $1
`

// Count tenant's inspection requests
func (q *Queries) CountTenantInspectionRequests(ctx context.Context, tenantID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countTenantInspectionRequests, tenantID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createInspectionRequest = `-- name: CreateInspectionRequest :one
INSERT INTO inspection_requests (
  property_id, tenant_id, landlord_id, inspection_type, requested_date,
  requested_time, special_requirements, inspection_fee
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, property_id, tenant_id, landlord_id, inspection_agent_id, inspection_type, requested_date, requested_time, special_requirements, inspection_fee, status, payment_status, payment_reference, confirmed_date, confirmed_time, completed_at, cancellation_reason, cancelled_at, created_at, updated_at
`

type CreateInspectionRequestParams struct {
	PropertyID          int64              `json:"property_id"`
	TenantID            int64              `json:"tenant_id"`
	LandlordID          int64              `json:"landlord_id"`
	InspectionType      InspectionTypeEnum `json:"inspection_type"`
	RequestedDate       pgtype.Date        `json:"requested_date"`
	RequestedTime       pgtype.Time        `json:"requested_time"`
	SpecialRequirements pgtype.Text        `json:"special_requirements"`
	InspectionFee       pgtype.Numeric     `json:"inspection_fee"`
}

// Create inspection request
func (q *Queries) CreateInspectionRequest(ctx context.Context, arg CreateInspectionRequestParams) (InspectionRequest, error) {
	row := q.db.QueryRow(ctx, createInspectionRequest,
		arg.PropertyID,
		arg.TenantID,
		arg.LandlordID,
		arg.InspectionType,
		arg.RequestedDate,
		arg.RequestedTime,
		arg.SpecialRequirements,
		arg.InspectionFee,
	)
	var i InspectionRequest
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.TenantID,
		&i.LandlordID,
		&i.InspectionAgentID,
		&i.InspectionType,
		&i.RequestedDate,
		&i.RequestedTime,
		&i.SpecialRequirements,
		&i.InspectionFee,
		&i.Status,
		&i.PaymentStatus,
		&i.PaymentReference,
		&i.ConfirmedDate,
		&i.ConfirmedTime,
		&i.CompletedAt,
		&i.CancellationReason,
		&i.CancelledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInspectionRequest = `-- name: DeleteInspectionRequest :exec
DELETE FROM inspection_requests 
WHERE id = $1
`

// Delete inspection request
func (q *Queries) DeleteInspectionRequest(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInspectionRequest, id)
	return err
}

const getAgentInspectionRequests = `-- name: GetAgentInspectionRequests :many
SELECT ir.id, ir.property_id, ir.tenant_id, ir.landlord_id, ir.inspection_agent_id, ir.inspection_type, ir.requested_date, ir.requested_time, ir.special_requirements, ir.inspection_fee, ir.status, ir.payment_status, ir.payment_reference, ir.confirmed_date, ir.confirmed_time, ir.completed_at, ir.cancellation_reason, ir.cancelled_at, ir.created_at, ir.updated_at, p.title as property_title, p.address as property_address,
       t.first_name as tenant_first_name, t.last_name as tenant_last_name, t.phone as tenant_phone,
       l.first_name as landlord_first_name, l.last_name as landlord_last_name
FROM inspection_requests ir
JOIN properties p ON ir.property_id = p.id
JOIN users t ON ir.tenant_id = t.id
JOIN users l ON ir.landlord_id = l.id
WHERE ir.inspection_agent_id = $1
ORDER BY ir.requested_date ASC, ir.requested_time ASC
LIMIT $2 OFFSET $3
`

type GetAgentInspectionRequestsParams struct {
	InspectionAgentID pgtype.Int8 `json:"inspection_agent_id"`
	Limit             int32       `json:"limit"`
	Offset            int32       `json:"offset"`
}

type GetAgentInspectionRequestsRow struct {
	ID                  int64                    `json:"id"`
	PropertyID          int64                    `json:"property_id"`
	TenantID            int64                    `json:"tenant_id"`
	LandlordID          int64                    `json:"landlord_id"`
	InspectionAgentID   pgtype.Int8              `json:"inspection_agent_id"`
	InspectionType      InspectionTypeEnum       `json:"inspection_type"`
	RequestedDate       pgtype.Date              `json:"requested_date"`
	RequestedTime       pgtype.Time              `json:"requested_time"`
	SpecialRequirements pgtype.Text              `json:"special_requirements"`
	InspectionFee       pgtype.Numeric           `json:"inspection_fee"`
	Status              NullInspectionStatusEnum `json:"status"`
	PaymentStatus       NullPaymentStatusEnum    `json:"payment_status"`
	PaymentReference    pgtype.Text              `json:"payment_reference"`
	ConfirmedDate       pgtype.Date              `json:"confirmed_date"`
	ConfirmedTime       pgtype.Time              `json:"confirmed_time"`
	CompletedAt         pgtype.Timestamptz       `json:"completed_at"`
	CancellationReason  pgtype.Text              `json:"cancellation_reason"`
	CancelledAt         pgtype.Timestamptz       `json:"cancelled_at"`
	CreatedAt           pgtype.Timestamptz       `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz       `json:"updated_at"`
	PropertyTitle       string                   `json:"property_title"`
	PropertyAddress     string                   `json:"property_address"`
	TenantFirstName     string                   `json:"tenant_first_name"`
	TenantLastName      string                   `json:"tenant_last_name"`
	TenantPhone         string                   `json:"tenant_phone"`
	LandlordFirstName   string                   `json:"landlord_first_name"`
	LandlordLastName    string                   `json:"landlord_last_name"`
}

// Get agent's inspection requests
func (q *Queries) GetAgentInspectionRequests(ctx context.Context, arg GetAgentInspectionRequestsParams) ([]GetAgentInspectionRequestsRow, error) {
	rows, err := q.db.Query(ctx, getAgentInspectionRequests, arg.InspectionAgentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAgentInspectionRequestsRow{}
	for rows.Next() {
		var i GetAgentInspectionRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.TenantID,
			&i.LandlordID,
			&i.InspectionAgentID,
			&i.InspectionType,
			&i.RequestedDate,
			&i.RequestedTime,
			&i.SpecialRequirements,
			&i.InspectionFee,
			&i.Status,
			&i.PaymentStatus,
			&i.PaymentReference,
			&i.ConfirmedDate,
			&i.ConfirmedTime,
			&i.CompletedAt,
			&i.CancellationReason,
			&i.CancelledAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PropertyTitle,
			&i.PropertyAddress,
			&i.TenantFirstName,
			&i.TenantLastName,
			&i.TenantPhone,
			&i.LandlordFirstName,
			&i.LandlordLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAgentInspectionStats = `-- name: GetAgentInspectionStats :one
SELECT 
  COUNT(*) as total_inspections,
  COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_inspections,
  COUNT(CASE WHEN status = 'cancelled' THEN 1 END) as cancelled_inspections,
  SUM(CASE WHEN status = 'completed' THEN inspection_fee ELSE 0 END) as total_earnings
FROM inspection_requests 
WHERE inspection_agent_id = $1
`

type GetAgentInspectionStatsRow struct {
	TotalInspections     int64 `json:"total_inspections"`
	CompletedInspections int64 `json:"completed_inspections"`
	CancelledInspections int64 `json:"cancelled_inspections"`
	TotalEarnings        int64 `json:"total_earnings"`
}

// Get inspection statistics for agent
func (q *Queries) GetAgentInspectionStats(ctx context.Context, inspectionAgentID pgtype.Int8) (GetAgentInspectionStatsRow, error) {
	row := q.db.QueryRow(ctx, getAgentInspectionStats, inspectionAgentID)
	var i GetAgentInspectionStatsRow
	err := row.Scan(
		&i.TotalInspections,
		&i.CompletedInspections,
		&i.CancelledInspections,
		&i.TotalEarnings,
	)
	return i, err
}

const getInspectionRequestByID = `-- name: GetInspectionRequestByID :one
SELECT id, property_id, tenant_id, landlord_id, inspection_agent_id, inspection_type, requested_date, requested_time, special_requirements, inspection_fee, status, payment_status, payment_reference, confirmed_date, confirmed_time, completed_at, cancellation_reason, cancelled_at, created_at, updated_at FROM inspection_requests 
WHERE id = $1 LIMIT 1
`

// Get inspection request by ID
func (q *Queries) GetInspectionRequestByID(ctx context.Context, id int64) (InspectionRequest, error) {
	row := q.db.QueryRow(ctx, getInspectionRequestByID, id)
	var i InspectionRequest
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.TenantID,
		&i.LandlordID,
		&i.InspectionAgentID,
		&i.InspectionType,
		&i.RequestedDate,
		&i.RequestedTime,
		&i.SpecialRequirements,
		&i.InspectionFee,
		&i.Status,
		&i.PaymentStatus,
		&i.PaymentReference,
		&i.ConfirmedDate,
		&i.ConfirmedTime,
		&i.CompletedAt,
		&i.CancellationReason,
		&i.CancelledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInspectionRequestWithDetails = `-- name: GetInspectionRequestWithDetails :one
SELECT ir.id, ir.property_id, ir.tenant_id, ir.landlord_id, ir.inspection_agent_id, ir.inspection_type, ir.requested_date, ir.requested_time, ir.special_requirements, ir.inspection_fee, ir.status, ir.payment_status, ir.payment_reference, ir.confirmed_date, ir.confirmed_time, ir.completed_at, ir.cancellation_reason, ir.cancelled_at, ir.created_at, ir.updated_at, p.title as property_title, p.address as property_address,
       t.first_name as tenant_first_name, t.last_name as tenant_last_name, t.email as tenant_email, t.phone as tenant_phone,
       l.first_name as landlord_first_name, l.last_name as landlord_last_name, l.email as landlord_email,
       a.first_name as agent_first_name, a.last_name as agent_last_name, a.email as agent_email, a.phone as agent_phone
FROM inspection_requests ir
JOIN properties p ON ir.property_id = p.id
JOIN users t ON ir.tenant_id = t.id
JOIN users l ON ir.landlord_id = l.id
LEFT JOIN users a ON ir.inspection_agent_id = a.id
WHERE ir.id = $1 LIMIT 1
`

type GetInspectionRequestWithDetailsRow struct {
	ID                  int64                    `json:"id"`
	PropertyID          int64                    `json:"property_id"`
	TenantID            int64                    `json:"tenant_id"`
	LandlordID          int64                    `json:"landlord_id"`
	InspectionAgentID   pgtype.Int8              `json:"inspection_agent_id"`
	InspectionType      InspectionTypeEnum       `json:"inspection_type"`
	RequestedDate       pgtype.Date              `json:"requested_date"`
	RequestedTime       pgtype.Time              `json:"requested_time"`
	SpecialRequirements pgtype.Text              `json:"special_requirements"`
	InspectionFee       pgtype.Numeric           `json:"inspection_fee"`
	Status              NullInspectionStatusEnum `json:"status"`
	PaymentStatus       NullPaymentStatusEnum    `json:"payment_status"`
	PaymentReference    pgtype.Text              `json:"payment_reference"`
	ConfirmedDate       pgtype.Date              `json:"confirmed_date"`
	ConfirmedTime       pgtype.Time              `json:"confirmed_time"`
	CompletedAt         pgtype.Timestamptz       `json:"completed_at"`
	CancellationReason  pgtype.Text              `json:"cancellation_reason"`
	CancelledAt         pgtype.Timestamptz       `json:"cancelled_at"`
	CreatedAt           pgtype.Timestamptz       `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz       `json:"updated_at"`
	PropertyTitle       string                   `json:"property_title"`
	PropertyAddress     string                   `json:"property_address"`
	TenantFirstName     string                   `json:"tenant_first_name"`
	TenantLastName      string                   `json:"tenant_last_name"`
	TenantEmail         string                   `json:"tenant_email"`
	TenantPhone         string                   `json:"tenant_phone"`
	LandlordFirstName   string                   `json:"landlord_first_name"`
	LandlordLastName    string                   `json:"landlord_last_name"`
	LandlordEmail       string                   `json:"landlord_email"`
	AgentFirstName      pgtype.Text              `json:"agent_first_name"`
	AgentLastName       pgtype.Text              `json:"agent_last_name"`
	AgentEmail          pgtype.Text              `json:"agent_email"`
	AgentPhone          pgtype.Text              `json:"agent_phone"`
}

// Get inspection request with details
func (q *Queries) GetInspectionRequestWithDetails(ctx context.Context, id int64) (GetInspectionRequestWithDetailsRow, error) {
	row := q.db.QueryRow(ctx, getInspectionRequestWithDetails, id)
	var i GetInspectionRequestWithDetailsRow
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.TenantID,
		&i.LandlordID,
		&i.InspectionAgentID,
		&i.InspectionType,
		&i.RequestedDate,
		&i.RequestedTime,
		&i.SpecialRequirements,
		&i.InspectionFee,
		&i.Status,
		&i.PaymentStatus,
		&i.PaymentReference,
		&i.ConfirmedDate,
		&i.ConfirmedTime,
		&i.CompletedAt,
		&i.CancellationReason,
		&i.CancelledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PropertyTitle,
		&i.PropertyAddress,
		&i.TenantFirstName,
		&i.TenantLastName,
		&i.TenantEmail,
		&i.TenantPhone,
		&i.LandlordFirstName,
		&i.LandlordLastName,
		&i.LandlordEmail,
		&i.AgentFirstName,
		&i.AgentLastName,
		&i.AgentEmail,
		&i.AgentPhone,
	)
	return i, err
}

const getInspectionsByDateRange = `-- name: GetInspectionsByDateRange :many
SELECT ir.id, ir.property_id, ir.tenant_id, ir.landlord_id, ir.inspection_agent_id, ir.inspection_type, ir.requested_date, ir.requested_time, ir.special_requirements, ir.inspection_fee, ir.status, ir.payment_status, ir.payment_reference, ir.confirmed_date, ir.confirmed_time, ir.completed_at, ir.cancellation_reason, ir.cancelled_at, ir.created_at, ir.updated_at, p.title as property_title,
       t.first_name as tenant_first_name, t.last_name as tenant_last_name,
       a.first_name as agent_first_name, a.last_name as agent_last_name
FROM inspection_requests ir
JOIN properties p ON ir.property_id = p.id
JOIN users t ON ir.tenant_id = t.id
LEFT JOIN users a ON ir.inspection_agent_id = a.id
WHERE ir.requested_date BETWEEN $1 AND $2
ORDER BY ir.requested_date ASC, ir.requested_time ASC
LIMIT $3 OFFSET $4
`

type GetInspectionsByDateRangeParams struct {
	RequestedDate   pgtype.Date `json:"requested_date"`
	RequestedDate_2 pgtype.Date `json:"requested_date_2"`
	Limit           int32       `json:"limit"`
	Offset          int32       `json:"offset"`
}

type GetInspectionsByDateRangeRow struct {
	ID                  int64                    `json:"id"`
	PropertyID          int64                    `json:"property_id"`
	TenantID            int64                    `json:"tenant_id"`
	LandlordID          int64                    `json:"landlord_id"`
	InspectionAgentID   pgtype.Int8              `json:"inspection_agent_id"`
	InspectionType      InspectionTypeEnum       `json:"inspection_type"`
	RequestedDate       pgtype.Date              `json:"requested_date"`
	RequestedTime       pgtype.Time              `json:"requested_time"`
	SpecialRequirements pgtype.Text              `json:"special_requirements"`
	InspectionFee       pgtype.Numeric           `json:"inspection_fee"`
	Status              NullInspectionStatusEnum `json:"status"`
	PaymentStatus       NullPaymentStatusEnum    `json:"payment_status"`
	PaymentReference    pgtype.Text              `json:"payment_reference"`
	ConfirmedDate       pgtype.Date              `json:"confirmed_date"`
	ConfirmedTime       pgtype.Time              `json:"confirmed_time"`
	CompletedAt         pgtype.Timestamptz       `json:"completed_at"`
	CancellationReason  pgtype.Text              `json:"cancellation_reason"`
	CancelledAt         pgtype.Timestamptz       `json:"cancelled_at"`
	CreatedAt           pgtype.Timestamptz       `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz       `json:"updated_at"`
	PropertyTitle       string                   `json:"property_title"`
	TenantFirstName     string                   `json:"tenant_first_name"`
	TenantLastName      string                   `json:"tenant_last_name"`
	AgentFirstName      pgtype.Text              `json:"agent_first_name"`
	AgentLastName       pgtype.Text              `json:"agent_last_name"`
}

// Get inspections by date range
func (q *Queries) GetInspectionsByDateRange(ctx context.Context, arg GetInspectionsByDateRangeParams) ([]GetInspectionsByDateRangeRow, error) {
	rows, err := q.db.Query(ctx, getInspectionsByDateRange,
		arg.RequestedDate,
		arg.RequestedDate_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetInspectionsByDateRangeRow{}
	for rows.Next() {
		var i GetInspectionsByDateRangeRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.TenantID,
			&i.LandlordID,
			&i.InspectionAgentID,
			&i.InspectionType,
			&i.RequestedDate,
			&i.RequestedTime,
			&i.SpecialRequirements,
			&i.InspectionFee,
			&i.Status,
			&i.PaymentStatus,
			&i.PaymentReference,
			&i.ConfirmedDate,
			&i.ConfirmedTime,
			&i.CompletedAt,
			&i.CancellationReason,
			&i.CancelledAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PropertyTitle,
			&i.TenantFirstName,
			&i.TenantLastName,
			&i.AgentFirstName,
			&i.AgentLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLandlordInspectionRequests = `-- name: GetLandlordInspectionRequests :many
SELECT ir.id, ir.property_id, ir.tenant_id, ir.landlord_id, ir.inspection_agent_id, ir.inspection_type, ir.requested_date, ir.requested_time, ir.special_requirements, ir.inspection_fee, ir.status, ir.payment_status, ir.payment_reference, ir.confirmed_date, ir.confirmed_time, ir.completed_at, ir.cancellation_reason, ir.cancelled_at, ir.created_at, ir.updated_at, p.title as property_title,
       t.first_name as tenant_first_name, t.last_name as tenant_last_name, t.email as tenant_email
FROM inspection_requests ir
JOIN properties p ON ir.property_id = p.id
JOIN users t ON ir.tenant_id = t.id
WHERE ir.landlord_id = $1
ORDER BY ir.created_at DESC
LIMIT $2 OFFSET $3
`

type GetLandlordInspectionRequestsParams struct {
	LandlordID int64 `json:"landlord_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

type GetLandlordInspectionRequestsRow struct {
	ID                  int64                    `json:"id"`
	PropertyID          int64                    `json:"property_id"`
	TenantID            int64                    `json:"tenant_id"`
	LandlordID          int64                    `json:"landlord_id"`
	InspectionAgentID   pgtype.Int8              `json:"inspection_agent_id"`
	InspectionType      InspectionTypeEnum       `json:"inspection_type"`
	RequestedDate       pgtype.Date              `json:"requested_date"`
	RequestedTime       pgtype.Time              `json:"requested_time"`
	SpecialRequirements pgtype.Text              `json:"special_requirements"`
	InspectionFee       pgtype.Numeric           `json:"inspection_fee"`
	Status              NullInspectionStatusEnum `json:"status"`
	PaymentStatus       NullPaymentStatusEnum    `json:"payment_status"`
	PaymentReference    pgtype.Text              `json:"payment_reference"`
	ConfirmedDate       pgtype.Date              `json:"confirmed_date"`
	ConfirmedTime       pgtype.Time              `json:"confirmed_time"`
	CompletedAt         pgtype.Timestamptz       `json:"completed_at"`
	CancellationReason  pgtype.Text              `json:"cancellation_reason"`
	CancelledAt         pgtype.Timestamptz       `json:"cancelled_at"`
	CreatedAt           pgtype.Timestamptz       `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz       `json:"updated_at"`
	PropertyTitle       string                   `json:"property_title"`
	TenantFirstName     string                   `json:"tenant_first_name"`
	TenantLastName      string                   `json:"tenant_last_name"`
	TenantEmail         string                   `json:"tenant_email"`
}

// Get landlord's inspection requests
func (q *Queries) GetLandlordInspectionRequests(ctx context.Context, arg GetLandlordInspectionRequestsParams) ([]GetLandlordInspectionRequestsRow, error) {
	rows, err := q.db.Query(ctx, getLandlordInspectionRequests, arg.LandlordID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLandlordInspectionRequestsRow{}
	for rows.Next() {
		var i GetLandlordInspectionRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.TenantID,
			&i.LandlordID,
			&i.InspectionAgentID,
			&i.InspectionType,
			&i.RequestedDate,
			&i.RequestedTime,
			&i.SpecialRequirements,
			&i.InspectionFee,
			&i.Status,
			&i.PaymentStatus,
			&i.PaymentReference,
			&i.ConfirmedDate,
			&i.ConfirmedTime,
			&i.CompletedAt,
			&i.CancellationReason,
			&i.CancelledAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PropertyTitle,
			&i.TenantFirstName,
			&i.TenantLastName,
			&i.TenantEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingInspectionsForAgents = `-- name: GetPendingInspectionsForAgents :many
SELECT ir.id, ir.property_id, ir.tenant_id, ir.landlord_id, ir.inspection_agent_id, ir.inspection_type, ir.requested_date, ir.requested_time, ir.special_requirements, ir.inspection_fee, ir.status, ir.payment_status, ir.payment_reference, ir.confirmed_date, ir.confirmed_time, ir.completed_at, ir.cancellation_reason, ir.cancelled_at, ir.created_at, ir.updated_at, p.title as property_title, p.address as property_address, p.city, p.state,
       t.first_name as tenant_first_name, t.last_name as tenant_last_name, t.phone as tenant_phone
FROM inspection_requests ir
JOIN properties p ON ir.property_id = p.id
JOIN users t ON ir.tenant_id = t.id
WHERE ir.inspection_type = 'agent_inspection' 
  AND ir.status = 'pending' 
  AND ir.payment_status = 'paid'
ORDER BY ir.requested_date ASC, ir.requested_time ASC
LIMIT $1 OFFSET $2
`

type GetPendingInspectionsForAgentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetPendingInspectionsForAgentsRow struct {
	ID                  int64                    `json:"id"`
	PropertyID          int64                    `json:"property_id"`
	TenantID            int64                    `json:"tenant_id"`
	LandlordID          int64                    `json:"landlord_id"`
	InspectionAgentID   pgtype.Int8              `json:"inspection_agent_id"`
	InspectionType      InspectionTypeEnum       `json:"inspection_type"`
	RequestedDate       pgtype.Date              `json:"requested_date"`
	RequestedTime       pgtype.Time              `json:"requested_time"`
	SpecialRequirements pgtype.Text              `json:"special_requirements"`
	InspectionFee       pgtype.Numeric           `json:"inspection_fee"`
	Status              NullInspectionStatusEnum `json:"status"`
	PaymentStatus       NullPaymentStatusEnum    `json:"payment_status"`
	PaymentReference    pgtype.Text              `json:"payment_reference"`
	ConfirmedDate       pgtype.Date              `json:"confirmed_date"`
	ConfirmedTime       pgtype.Time              `json:"confirmed_time"`
	CompletedAt         pgtype.Timestamptz       `json:"completed_at"`
	CancellationReason  pgtype.Text              `json:"cancellation_reason"`
	CancelledAt         pgtype.Timestamptz       `json:"cancelled_at"`
	CreatedAt           pgtype.Timestamptz       `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz       `json:"updated_at"`
	PropertyTitle       string                   `json:"property_title"`
	PropertyAddress     string                   `json:"property_address"`
	City                string                   `json:"city"`
	State               string                   `json:"state"`
	TenantFirstName     string                   `json:"tenant_first_name"`
	TenantLastName      string                   `json:"tenant_last_name"`
	TenantPhone         string                   `json:"tenant_phone"`
}

// Get pending inspections for agents
func (q *Queries) GetPendingInspectionsForAgents(ctx context.Context, arg GetPendingInspectionsForAgentsParams) ([]GetPendingInspectionsForAgentsRow, error) {
	rows, err := q.db.Query(ctx, getPendingInspectionsForAgents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPendingInspectionsForAgentsRow{}
	for rows.Next() {
		var i GetPendingInspectionsForAgentsRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.TenantID,
			&i.LandlordID,
			&i.InspectionAgentID,
			&i.InspectionType,
			&i.RequestedDate,
			&i.RequestedTime,
			&i.SpecialRequirements,
			&i.InspectionFee,
			&i.Status,
			&i.PaymentStatus,
			&i.PaymentReference,
			&i.ConfirmedDate,
			&i.ConfirmedTime,
			&i.CompletedAt,
			&i.CancellationReason,
			&i.CancelledAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PropertyTitle,
			&i.PropertyAddress,
			&i.City,
			&i.State,
			&i.TenantFirstName,
			&i.TenantLastName,
			&i.TenantPhone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTenantInspectionRequests = `-- name: GetTenantInspectionRequests :many
SELECT ir.id, ir.property_id, ir.tenant_id, ir.landlord_id, ir.inspection_agent_id, ir.inspection_type, ir.requested_date, ir.requested_time, ir.special_requirements, ir.inspection_fee, ir.status, ir.payment_status, ir.payment_reference, ir.confirmed_date, ir.confirmed_time, ir.completed_at, ir.cancellation_reason, ir.cancelled_at, ir.created_at, ir.updated_at, p.title as property_title, p.address as property_address,
       l.first_name as landlord_first_name, l.last_name as landlord_last_name
FROM inspection_requests ir
JOIN properties p ON ir.property_id = p.id
JOIN users l ON ir.landlord_id = l.id
WHERE ir.tenant_id = $1
ORDER BY ir.created_at DESC
LIMIT $2 OFFSET $3
`

type GetTenantInspectionRequestsParams struct {
	TenantID int64 `json:"tenant_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

type GetTenantInspectionRequestsRow struct {
	ID                  int64                    `json:"id"`
	PropertyID          int64                    `json:"property_id"`
	TenantID            int64                    `json:"tenant_id"`
	LandlordID          int64                    `json:"landlord_id"`
	InspectionAgentID   pgtype.Int8              `json:"inspection_agent_id"`
	InspectionType      InspectionTypeEnum       `json:"inspection_type"`
	RequestedDate       pgtype.Date              `json:"requested_date"`
	RequestedTime       pgtype.Time              `json:"requested_time"`
	SpecialRequirements pgtype.Text              `json:"special_requirements"`
	InspectionFee       pgtype.Numeric           `json:"inspection_fee"`
	Status              NullInspectionStatusEnum `json:"status"`
	PaymentStatus       NullPaymentStatusEnum    `json:"payment_status"`
	PaymentReference    pgtype.Text              `json:"payment_reference"`
	ConfirmedDate       pgtype.Date              `json:"confirmed_date"`
	ConfirmedTime       pgtype.Time              `json:"confirmed_time"`
	CompletedAt         pgtype.Timestamptz       `json:"completed_at"`
	CancellationReason  pgtype.Text              `json:"cancellation_reason"`
	CancelledAt         pgtype.Timestamptz       `json:"cancelled_at"`
	CreatedAt           pgtype.Timestamptz       `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz       `json:"updated_at"`
	PropertyTitle       string                   `json:"property_title"`
	PropertyAddress     string                   `json:"property_address"`
	LandlordFirstName   string                   `json:"landlord_first_name"`
	LandlordLastName    string                   `json:"landlord_last_name"`
}

// Get tenant's inspection requests
func (q *Queries) GetTenantInspectionRequests(ctx context.Context, arg GetTenantInspectionRequestsParams) ([]GetTenantInspectionRequestsRow, error) {
	rows, err := q.db.Query(ctx, getTenantInspectionRequests, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTenantInspectionRequestsRow{}
	for rows.Next() {
		var i GetTenantInspectionRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.TenantID,
			&i.LandlordID,
			&i.InspectionAgentID,
			&i.InspectionType,
			&i.RequestedDate,
			&i.RequestedTime,
			&i.SpecialRequirements,
			&i.InspectionFee,
			&i.Status,
			&i.PaymentStatus,
			&i.PaymentReference,
			&i.ConfirmedDate,
			&i.ConfirmedTime,
			&i.CompletedAt,
			&i.CancellationReason,
			&i.CancelledAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PropertyTitle,
			&i.PropertyAddress,
			&i.LandlordFirstName,
			&i.LandlordLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInspectionPaymentStatus = `-- name: UpdateInspectionPaymentStatus :one
UPDATE inspection_requests 
SET payment_status = $2, payment_reference = $3, updated_at = NOW()
WHERE id = $1 
RETURNING id, property_id, tenant_id, landlord_id, inspection_agent_id, inspection_type, requested_date, requested_time, special_requirements, inspection_fee, status, payment_status, payment_reference, confirmed_date, confirmed_time, completed_at, cancellation_reason, cancelled_at, created_at, updated_at
`

type UpdateInspectionPaymentStatusParams struct {
	ID               int64                 `json:"id"`
	PaymentStatus    NullPaymentStatusEnum `json:"payment_status"`
	PaymentReference pgtype.Text           `json:"payment_reference"`
}

// Update payment status
func (q *Queries) UpdateInspectionPaymentStatus(ctx context.Context, arg UpdateInspectionPaymentStatusParams) (InspectionRequest, error) {
	row := q.db.QueryRow(ctx, updateInspectionPaymentStatus, arg.ID, arg.PaymentStatus, arg.PaymentReference)
	var i InspectionRequest
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.TenantID,
		&i.LandlordID,
		&i.InspectionAgentID,
		&i.InspectionType,
		&i.RequestedDate,
		&i.RequestedTime,
		&i.SpecialRequirements,
		&i.InspectionFee,
		&i.Status,
		&i.PaymentStatus,
		&i.PaymentReference,
		&i.ConfirmedDate,
		&i.ConfirmedTime,
		&i.CompletedAt,
		&i.CancellationReason,
		&i.CancelledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateInspectionRequestStatus = `-- name: UpdateInspectionRequestStatus :one
UPDATE inspection_requests 
SET status = $2, updated_at = NOW()
WHERE id = $1 
RETURNING id, property_id, tenant_id, landlord_id, inspection_agent_id, inspection_type, requested_date, requested_time, special_requirements, inspection_fee, status, payment_status, payment_reference, confirmed_date, confirmed_time, completed_at, cancellation_reason, cancelled_at, created_at, updated_at
`

type UpdateInspectionRequestStatusParams struct {
	ID     int64                    `json:"id"`
	Status NullInspectionStatusEnum `json:"status"`
}

// Update inspection request status
func (q *Queries) UpdateInspectionRequestStatus(ctx context.Context, arg UpdateInspectionRequestStatusParams) (InspectionRequest, error) {
	row := q.db.QueryRow(ctx, updateInspectionRequestStatus, arg.ID, arg.Status)
	var i InspectionRequest
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.TenantID,
		&i.LandlordID,
		&i.InspectionAgentID,
		&i.InspectionType,
		&i.RequestedDate,
		&i.RequestedTime,
		&i.SpecialRequirements,
		&i.InspectionFee,
		&i.Status,
		&i.PaymentStatus,
		&i.PaymentReference,
		&i.ConfirmedDate,
		&i.ConfirmedTime,
		&i.CompletedAt,
		&i.CancellationReason,
		&i.CancelledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
