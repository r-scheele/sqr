// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUsersByType = `-- name: CountUsersByType :one
SELECT COUNT(*) FROM users 
WHERE user_type = $1 AND is_active = true
`

// Count users by type
func (q *Queries) CountUsersByType(ctx context.Context, userType UserTypeEnum) (int64, error) {
	row := q.db.QueryRow(ctx, countUsersByType, userType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, phone, password_hash, first_name, last_name, user_type, nin, profile_picture_url
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, email, phone, password_hash, first_name, last_name, user_type, nin, is_verified, is_active, profile_picture_url, created_at, updated_at, last_login
`

type CreateUserParams struct {
	Email             string       `json:"email"`
	Phone             string       `json:"phone"`
	PasswordHash      string       `json:"password_hash"`
	FirstName         string       `json:"first_name"`
	LastName          string       `json:"last_name"`
	UserType          UserTypeEnum `json:"user_type"`
	Nin               pgtype.Text  `json:"nin"`
	ProfilePictureUrl pgtype.Text  `json:"profile_picture_url"`
}

// Create a new user
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Phone,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.UserType,
		arg.Nin,
		arg.ProfilePictureUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.UserType,
		&i.Nin,
		&i.IsVerified,
		&i.IsActive,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users 
SET is_active = false, updated_at = NOW()
WHERE id = $1
`

// Delete user (soft delete by setting inactive)
func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, phone, password_hash, first_name, last_name, user_type, nin, is_verified, is_active, profile_picture_url, created_at, updated_at, last_login FROM users 
WHERE email = $1 LIMIT 1
`

// Get user by email
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.UserType,
		&i.Nin,
		&i.IsVerified,
		&i.IsActive,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, phone, password_hash, first_name, last_name, user_type, nin, is_verified, is_active, profile_picture_url, created_at, updated_at, last_login FROM users 
WHERE id = $1 LIMIT 1
`

// Get user by ID
func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.UserType,
		&i.Nin,
		&i.IsVerified,
		&i.IsActive,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, email, phone, password_hash, first_name, last_name, user_type, nin, is_verified, is_active, profile_picture_url, created_at, updated_at, last_login FROM users 
WHERE phone = $1 LIMIT 1
`

// Get user by phone
func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.UserType,
		&i.Nin,
		&i.IsVerified,
		&i.IsActive,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const listUsersByType = `-- name: ListUsersByType :many
SELECT id, email, phone, password_hash, first_name, last_name, user_type, nin, is_verified, is_active, profile_picture_url, created_at, updated_at, last_login FROM users 
WHERE user_type = $1 AND is_active = true
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListUsersByTypeParams struct {
	UserType UserTypeEnum `json:"user_type"`
	Limit    int32        `json:"limit"`
	Offset   int32        `json:"offset"`
}

// List users by type
func (q *Queries) ListUsersByType(ctx context.Context, arg ListUsersByTypeParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersByType, arg.UserType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Phone,
			&i.PasswordHash,
			&i.FirstName,
			&i.LastName,
			&i.UserType,
			&i.Nin,
			&i.IsVerified,
			&i.IsActive,
			&i.ProfilePictureUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUsers = `-- name: SearchUsers :many
SELECT id, email, phone, password_hash, first_name, last_name, user_type, nin, is_verified, is_active, profile_picture_url, created_at, updated_at, last_login FROM users 
WHERE (first_name ILIKE $1 OR last_name ILIKE $1 OR email ILIKE $1) 
  AND is_active = true
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type SearchUsersParams struct {
	FirstName string `json:"first_name"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

// Search users
func (q *Queries) SearchUsers(ctx context.Context, arg SearchUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, searchUsers, arg.FirstName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Phone,
			&i.PasswordHash,
			&i.FirstName,
			&i.LastName,
			&i.UserType,
			&i.Nin,
			&i.IsVerified,
			&i.IsActive,
			&i.ProfilePictureUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET email = $2, phone = $3, first_name = $4, last_name = $5, nin = $6, 
    profile_picture_url = $7, updated_at = NOW()
WHERE id = $1 
RETURNING id, email, phone, password_hash, first_name, last_name, user_type, nin, is_verified, is_active, profile_picture_url, created_at, updated_at, last_login
`

type UpdateUserParams struct {
	ID                int64       `json:"id"`
	Email             string      `json:"email"`
	Phone             string      `json:"phone"`
	FirstName         string      `json:"first_name"`
	LastName          string      `json:"last_name"`
	Nin               pgtype.Text `json:"nin"`
	ProfilePictureUrl pgtype.Text `json:"profile_picture_url"`
}

// Update user
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Phone,
		arg.FirstName,
		arg.LastName,
		arg.Nin,
		arg.ProfilePictureUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.UserType,
		&i.Nin,
		&i.IsVerified,
		&i.IsActive,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const updateUserActiveStatus = `-- name: UpdateUserActiveStatus :exec
UPDATE users 
SET is_active = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateUserActiveStatusParams struct {
	ID       int64       `json:"id"`
	IsActive pgtype.Bool `json:"is_active"`
}

// Update user active status
func (q *Queries) UpdateUserActiveStatus(ctx context.Context, arg UpdateUserActiveStatusParams) error {
	_, err := q.db.Exec(ctx, updateUserActiveStatus, arg.ID, arg.IsActive)
	return err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users 
SET last_login = NOW() 
WHERE id = $1
`

// Update user last login time
func (q *Queries) UpdateUserLastLogin(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateUserLastLogin, id)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users 
SET password_hash = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID           int64  `json:"id"`
	PasswordHash string `json:"password_hash"`
}

// Update user password
func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}

const updateUserVerificationStatus = `-- name: UpdateUserVerificationStatus :exec
UPDATE users 
SET is_verified = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateUserVerificationStatusParams struct {
	ID         int64       `json:"id"`
	IsVerified pgtype.Bool `json:"is_verified"`
}

// Update user verification status
func (q *Queries) UpdateUserVerificationStatus(ctx context.Context, arg UpdateUserVerificationStatusParams) error {
	_, err := q.db.Exec(ctx, updateUserVerificationStatus, arg.ID, arg.IsVerified)
	return err
}
