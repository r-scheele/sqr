// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: inspection_report.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const approveInspectionReport = `-- name: ApproveInspectionReport :one
UPDATE inspection_reports 
SET is_approved = true, approved_at = NOW(), updated_at = NOW()
WHERE id = $1 
RETURNING id, inspection_request_id, inspection_agent_id, overall_condition, structural_condition, electrical_condition, plumbing_condition, safety_assessment, neighborhood_assessment, special_findings, recommendations, photos, videos, checklist_data, report_summary, is_approved, approved_at, created_at, updated_at
`

// Approve inspection report
func (q *Queries) ApproveInspectionReport(ctx context.Context, id int64) (InspectionReport, error) {
	row := q.db.QueryRow(ctx, approveInspectionReport, id)
	var i InspectionReport
	err := row.Scan(
		&i.ID,
		&i.InspectionRequestID,
		&i.InspectionAgentID,
		&i.OverallCondition,
		&i.StructuralCondition,
		&i.ElectricalCondition,
		&i.PlumbingCondition,
		&i.SafetyAssessment,
		&i.NeighborhoodAssessment,
		&i.SpecialFindings,
		&i.Recommendations,
		&i.Photos,
		&i.Videos,
		&i.ChecklistData,
		&i.ReportSummary,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countApprovedReportsByAgent = `-- name: CountApprovedReportsByAgent :one
SELECT COUNT(*) FROM inspection_reports 
WHERE inspection_agent_id = $1 AND is_approved = true
`

// Count approved reports by agent
func (q *Queries) CountApprovedReportsByAgent(ctx context.Context, inspectionAgentID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countApprovedReportsByAgent, inspectionAgentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countPendingApprovalReports = `-- name: CountPendingApprovalReports :one
SELECT COUNT(*) FROM inspection_reports 
WHERE is_approved = false
`

// Count pending approval reports
func (q *Queries) CountPendingApprovalReports(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countPendingApprovalReports)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countReportsByAgent = `-- name: CountReportsByAgent :one
SELECT COUNT(*) FROM inspection_reports 
WHERE inspection_agent_id = $1
`

// Count reports by agent
func (q *Queries) CountReportsByAgent(ctx context.Context, inspectionAgentID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countReportsByAgent, inspectionAgentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createInspectionReport = `-- name: CreateInspectionReport :one
INSERT INTO inspection_reports (
  inspection_request_id, inspection_agent_id, overall_condition, structural_condition,
  electrical_condition, plumbing_condition, safety_assessment, neighborhood_assessment,
  special_findings, recommendations, photos, videos, checklist_data, report_summary
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
) RETURNING id, inspection_request_id, inspection_agent_id, overall_condition, structural_condition, electrical_condition, plumbing_condition, safety_assessment, neighborhood_assessment, special_findings, recommendations, photos, videos, checklist_data, report_summary, is_approved, approved_at, created_at, updated_at
`

type CreateInspectionReportParams struct {
	InspectionRequestID    int64                `json:"inspection_request_id"`
	InspectionAgentID      int64                `json:"inspection_agent_id"`
	OverallCondition       OverallConditionEnum `json:"overall_condition"`
	StructuralCondition    pgtype.Text          `json:"structural_condition"`
	ElectricalCondition    pgtype.Text          `json:"electrical_condition"`
	PlumbingCondition      pgtype.Text          `json:"plumbing_condition"`
	SafetyAssessment       pgtype.Text          `json:"safety_assessment"`
	NeighborhoodAssessment pgtype.Text          `json:"neighborhood_assessment"`
	SpecialFindings        pgtype.Text          `json:"special_findings"`
	Recommendations        pgtype.Text          `json:"recommendations"`
	Photos                 pgtype.Text          `json:"photos"`
	Videos                 pgtype.Text          `json:"videos"`
	ChecklistData          pgtype.Text          `json:"checklist_data"`
	ReportSummary          string               `json:"report_summary"`
}

// Create inspection report
func (q *Queries) CreateInspectionReport(ctx context.Context, arg CreateInspectionReportParams) (InspectionReport, error) {
	row := q.db.QueryRow(ctx, createInspectionReport,
		arg.InspectionRequestID,
		arg.InspectionAgentID,
		arg.OverallCondition,
		arg.StructuralCondition,
		arg.ElectricalCondition,
		arg.PlumbingCondition,
		arg.SafetyAssessment,
		arg.NeighborhoodAssessment,
		arg.SpecialFindings,
		arg.Recommendations,
		arg.Photos,
		arg.Videos,
		arg.ChecklistData,
		arg.ReportSummary,
	)
	var i InspectionReport
	err := row.Scan(
		&i.ID,
		&i.InspectionRequestID,
		&i.InspectionAgentID,
		&i.OverallCondition,
		&i.StructuralCondition,
		&i.ElectricalCondition,
		&i.PlumbingCondition,
		&i.SafetyAssessment,
		&i.NeighborhoodAssessment,
		&i.SpecialFindings,
		&i.Recommendations,
		&i.Photos,
		&i.Videos,
		&i.ChecklistData,
		&i.ReportSummary,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInspectionReport = `-- name: DeleteInspectionReport :exec
DELETE FROM inspection_reports 
WHERE id = $1
`

// Delete inspection report
func (q *Queries) DeleteInspectionReport(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInspectionReport, id)
	return err
}

const getApprovedReportsByDateRange = `-- name: GetApprovedReportsByDateRange :many
SELECT rep.id, rep.inspection_request_id, rep.inspection_agent_id, rep.overall_condition, rep.structural_condition, rep.electrical_condition, rep.plumbing_condition, rep.safety_assessment, rep.neighborhood_assessment, rep.special_findings, rep.recommendations, rep.photos, rep.videos, rep.checklist_data, rep.report_summary, rep.is_approved, rep.approved_at, rep.created_at, rep.updated_at, ir.requested_date, p.title as property_title,
       a.first_name as agent_first_name, a.last_name as agent_last_name
FROM inspection_reports rep
JOIN inspection_requests ir ON rep.inspection_request_id = ir.id
JOIN properties p ON ir.property_id = p.id
JOIN users a ON rep.inspection_agent_id = a.id
WHERE rep.is_approved = true 
  AND rep.created_at BETWEEN $1 AND $2
ORDER BY rep.created_at DESC
LIMIT $3 OFFSET $4
`

type GetApprovedReportsByDateRangeParams struct {
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	CreatedAt_2 pgtype.Timestamptz `json:"created_at_2"`
	Limit       int32              `json:"limit"`
	Offset      int32              `json:"offset"`
}

type GetApprovedReportsByDateRangeRow struct {
	ID                     int64                `json:"id"`
	InspectionRequestID    int64                `json:"inspection_request_id"`
	InspectionAgentID      int64                `json:"inspection_agent_id"`
	OverallCondition       OverallConditionEnum `json:"overall_condition"`
	StructuralCondition    pgtype.Text          `json:"structural_condition"`
	ElectricalCondition    pgtype.Text          `json:"electrical_condition"`
	PlumbingCondition      pgtype.Text          `json:"plumbing_condition"`
	SafetyAssessment       pgtype.Text          `json:"safety_assessment"`
	NeighborhoodAssessment pgtype.Text          `json:"neighborhood_assessment"`
	SpecialFindings        pgtype.Text          `json:"special_findings"`
	Recommendations        pgtype.Text          `json:"recommendations"`
	Photos                 pgtype.Text          `json:"photos"`
	Videos                 pgtype.Text          `json:"videos"`
	ChecklistData          pgtype.Text          `json:"checklist_data"`
	ReportSummary          string               `json:"report_summary"`
	IsApproved             pgtype.Bool          `json:"is_approved"`
	ApprovedAt             pgtype.Timestamptz   `json:"approved_at"`
	CreatedAt              pgtype.Timestamptz   `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz   `json:"updated_at"`
	RequestedDate          pgtype.Date          `json:"requested_date"`
	PropertyTitle          string               `json:"property_title"`
	AgentFirstName         string               `json:"agent_first_name"`
	AgentLastName          string               `json:"agent_last_name"`
}

// Get approved reports by date range
func (q *Queries) GetApprovedReportsByDateRange(ctx context.Context, arg GetApprovedReportsByDateRangeParams) ([]GetApprovedReportsByDateRangeRow, error) {
	rows, err := q.db.Query(ctx, getApprovedReportsByDateRange,
		arg.CreatedAt,
		arg.CreatedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetApprovedReportsByDateRangeRow{}
	for rows.Next() {
		var i GetApprovedReportsByDateRangeRow
		if err := rows.Scan(
			&i.ID,
			&i.InspectionRequestID,
			&i.InspectionAgentID,
			&i.OverallCondition,
			&i.StructuralCondition,
			&i.ElectricalCondition,
			&i.PlumbingCondition,
			&i.SafetyAssessment,
			&i.NeighborhoodAssessment,
			&i.SpecialFindings,
			&i.Recommendations,
			&i.Photos,
			&i.Videos,
			&i.ChecklistData,
			&i.ReportSummary,
			&i.IsApproved,
			&i.ApprovedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RequestedDate,
			&i.PropertyTitle,
			&i.AgentFirstName,
			&i.AgentLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInspectionReportByID = `-- name: GetInspectionReportByID :one
SELECT id, inspection_request_id, inspection_agent_id, overall_condition, structural_condition, electrical_condition, plumbing_condition, safety_assessment, neighborhood_assessment, special_findings, recommendations, photos, videos, checklist_data, report_summary, is_approved, approved_at, created_at, updated_at FROM inspection_reports 
WHERE id = $1 LIMIT 1
`

// Get inspection report by ID
func (q *Queries) GetInspectionReportByID(ctx context.Context, id int64) (InspectionReport, error) {
	row := q.db.QueryRow(ctx, getInspectionReportByID, id)
	var i InspectionReport
	err := row.Scan(
		&i.ID,
		&i.InspectionRequestID,
		&i.InspectionAgentID,
		&i.OverallCondition,
		&i.StructuralCondition,
		&i.ElectricalCondition,
		&i.PlumbingCondition,
		&i.SafetyAssessment,
		&i.NeighborhoodAssessment,
		&i.SpecialFindings,
		&i.Recommendations,
		&i.Photos,
		&i.Videos,
		&i.ChecklistData,
		&i.ReportSummary,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInspectionReportByRequestID = `-- name: GetInspectionReportByRequestID :one
SELECT id, inspection_request_id, inspection_agent_id, overall_condition, structural_condition, electrical_condition, plumbing_condition, safety_assessment, neighborhood_assessment, special_findings, recommendations, photos, videos, checklist_data, report_summary, is_approved, approved_at, created_at, updated_at FROM inspection_reports 
WHERE inspection_request_id = $1 LIMIT 1
`

// Get inspection report by request ID
func (q *Queries) GetInspectionReportByRequestID(ctx context.Context, inspectionRequestID int64) (InspectionReport, error) {
	row := q.db.QueryRow(ctx, getInspectionReportByRequestID, inspectionRequestID)
	var i InspectionReport
	err := row.Scan(
		&i.ID,
		&i.InspectionRequestID,
		&i.InspectionAgentID,
		&i.OverallCondition,
		&i.StructuralCondition,
		&i.ElectricalCondition,
		&i.PlumbingCondition,
		&i.SafetyAssessment,
		&i.NeighborhoodAssessment,
		&i.SpecialFindings,
		&i.Recommendations,
		&i.Photos,
		&i.Videos,
		&i.ChecklistData,
		&i.ReportSummary,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInspectionReportWithDetails = `-- name: GetInspectionReportWithDetails :one
SELECT ir.id, ir.property_id, ir.tenant_id, ir.landlord_id, ir.inspection_agent_id, ir.inspection_type, ir.requested_date, ir.requested_time, ir.special_requirements, ir.inspection_fee, ir.status, ir.payment_status, ir.payment_reference, ir.confirmed_date, ir.confirmed_time, ir.completed_at, ir.cancellation_reason, ir.cancelled_at, ir.created_at, ir.updated_at, rep.id, rep.inspection_request_id, rep.inspection_agent_id, rep.overall_condition, rep.structural_condition, rep.electrical_condition, rep.plumbing_condition, rep.safety_assessment, rep.neighborhood_assessment, rep.special_findings, rep.recommendations, rep.photos, rep.videos, rep.checklist_data, rep.report_summary, rep.is_approved, rep.approved_at, rep.created_at, rep.updated_at, p.title as property_title, p.address as property_address,
       a.first_name as agent_first_name, a.last_name as agent_last_name, a.email as agent_email,
       t.first_name as tenant_first_name, t.last_name as tenant_last_name
FROM inspection_reports rep
JOIN inspection_requests ir ON rep.inspection_request_id = ir.id
JOIN properties p ON ir.property_id = p.id
JOIN users a ON rep.inspection_agent_id = a.id
JOIN users t ON ir.tenant_id = t.id
WHERE rep.id = $1 LIMIT 1
`

type GetInspectionReportWithDetailsRow struct {
	ID                     int64                    `json:"id"`
	PropertyID             int64                    `json:"property_id"`
	TenantID               int64                    `json:"tenant_id"`
	LandlordID             int64                    `json:"landlord_id"`
	InspectionAgentID      pgtype.Int8              `json:"inspection_agent_id"`
	InspectionType         InspectionTypeEnum       `json:"inspection_type"`
	RequestedDate          pgtype.Date              `json:"requested_date"`
	RequestedTime          pgtype.Time              `json:"requested_time"`
	SpecialRequirements    pgtype.Text              `json:"special_requirements"`
	InspectionFee          pgtype.Numeric           `json:"inspection_fee"`
	Status                 NullInspectionStatusEnum `json:"status"`
	PaymentStatus          NullPaymentStatusEnum    `json:"payment_status"`
	PaymentReference       pgtype.Text              `json:"payment_reference"`
	ConfirmedDate          pgtype.Date              `json:"confirmed_date"`
	ConfirmedTime          pgtype.Time              `json:"confirmed_time"`
	CompletedAt            pgtype.Timestamptz       `json:"completed_at"`
	CancellationReason     pgtype.Text              `json:"cancellation_reason"`
	CancelledAt            pgtype.Timestamptz       `json:"cancelled_at"`
	CreatedAt              pgtype.Timestamptz       `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz       `json:"updated_at"`
	ID_2                   int64                    `json:"id_2"`
	InspectionRequestID    int64                    `json:"inspection_request_id"`
	InspectionAgentID_2    int64                    `json:"inspection_agent_id_2"`
	OverallCondition       OverallConditionEnum     `json:"overall_condition"`
	StructuralCondition    pgtype.Text              `json:"structural_condition"`
	ElectricalCondition    pgtype.Text              `json:"electrical_condition"`
	PlumbingCondition      pgtype.Text              `json:"plumbing_condition"`
	SafetyAssessment       pgtype.Text              `json:"safety_assessment"`
	NeighborhoodAssessment pgtype.Text              `json:"neighborhood_assessment"`
	SpecialFindings        pgtype.Text              `json:"special_findings"`
	Recommendations        pgtype.Text              `json:"recommendations"`
	Photos                 pgtype.Text              `json:"photos"`
	Videos                 pgtype.Text              `json:"videos"`
	ChecklistData          pgtype.Text              `json:"checklist_data"`
	ReportSummary          string                   `json:"report_summary"`
	IsApproved             pgtype.Bool              `json:"is_approved"`
	ApprovedAt             pgtype.Timestamptz       `json:"approved_at"`
	CreatedAt_2            pgtype.Timestamptz       `json:"created_at_2"`
	UpdatedAt_2            pgtype.Timestamptz       `json:"updated_at_2"`
	PropertyTitle          string                   `json:"property_title"`
	PropertyAddress        string                   `json:"property_address"`
	AgentFirstName         string                   `json:"agent_first_name"`
	AgentLastName          string                   `json:"agent_last_name"`
	AgentEmail             string                   `json:"agent_email"`
	TenantFirstName        string                   `json:"tenant_first_name"`
	TenantLastName         string                   `json:"tenant_last_name"`
}

// Get inspection report with details
func (q *Queries) GetInspectionReportWithDetails(ctx context.Context, id int64) (GetInspectionReportWithDetailsRow, error) {
	row := q.db.QueryRow(ctx, getInspectionReportWithDetails, id)
	var i GetInspectionReportWithDetailsRow
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.TenantID,
		&i.LandlordID,
		&i.InspectionAgentID,
		&i.InspectionType,
		&i.RequestedDate,
		&i.RequestedTime,
		&i.SpecialRequirements,
		&i.InspectionFee,
		&i.Status,
		&i.PaymentStatus,
		&i.PaymentReference,
		&i.ConfirmedDate,
		&i.ConfirmedTime,
		&i.CompletedAt,
		&i.CancellationReason,
		&i.CancelledAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.InspectionRequestID,
		&i.InspectionAgentID_2,
		&i.OverallCondition,
		&i.StructuralCondition,
		&i.ElectricalCondition,
		&i.PlumbingCondition,
		&i.SafetyAssessment,
		&i.NeighborhoodAssessment,
		&i.SpecialFindings,
		&i.Recommendations,
		&i.Photos,
		&i.Videos,
		&i.ChecklistData,
		&i.ReportSummary,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.PropertyTitle,
		&i.PropertyAddress,
		&i.AgentFirstName,
		&i.AgentLastName,
		&i.AgentEmail,
		&i.TenantFirstName,
		&i.TenantLastName,
	)
	return i, err
}

const getPendingApprovalReports = `-- name: GetPendingApprovalReports :many
SELECT rep.id, rep.inspection_request_id, rep.inspection_agent_id, rep.overall_condition, rep.structural_condition, rep.electrical_condition, rep.plumbing_condition, rep.safety_assessment, rep.neighborhood_assessment, rep.special_findings, rep.recommendations, rep.photos, rep.videos, rep.checklist_data, rep.report_summary, rep.is_approved, rep.approved_at, rep.created_at, rep.updated_at, ir.requested_date, p.title as property_title,
       a.first_name as agent_first_name, a.last_name as agent_last_name
FROM inspection_reports rep
JOIN inspection_requests ir ON rep.inspection_request_id = ir.id
JOIN properties p ON ir.property_id = p.id
JOIN users a ON rep.inspection_agent_id = a.id
WHERE rep.is_approved = false
ORDER BY rep.created_at ASC
LIMIT $1 OFFSET $2
`

type GetPendingApprovalReportsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetPendingApprovalReportsRow struct {
	ID                     int64                `json:"id"`
	InspectionRequestID    int64                `json:"inspection_request_id"`
	InspectionAgentID      int64                `json:"inspection_agent_id"`
	OverallCondition       OverallConditionEnum `json:"overall_condition"`
	StructuralCondition    pgtype.Text          `json:"structural_condition"`
	ElectricalCondition    pgtype.Text          `json:"electrical_condition"`
	PlumbingCondition      pgtype.Text          `json:"plumbing_condition"`
	SafetyAssessment       pgtype.Text          `json:"safety_assessment"`
	NeighborhoodAssessment pgtype.Text          `json:"neighborhood_assessment"`
	SpecialFindings        pgtype.Text          `json:"special_findings"`
	Recommendations        pgtype.Text          `json:"recommendations"`
	Photos                 pgtype.Text          `json:"photos"`
	Videos                 pgtype.Text          `json:"videos"`
	ChecklistData          pgtype.Text          `json:"checklist_data"`
	ReportSummary          string               `json:"report_summary"`
	IsApproved             pgtype.Bool          `json:"is_approved"`
	ApprovedAt             pgtype.Timestamptz   `json:"approved_at"`
	CreatedAt              pgtype.Timestamptz   `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz   `json:"updated_at"`
	RequestedDate          pgtype.Date          `json:"requested_date"`
	PropertyTitle          string               `json:"property_title"`
	AgentFirstName         string               `json:"agent_first_name"`
	AgentLastName          string               `json:"agent_last_name"`
}

// Get pending approval reports
func (q *Queries) GetPendingApprovalReports(ctx context.Context, arg GetPendingApprovalReportsParams) ([]GetPendingApprovalReportsRow, error) {
	rows, err := q.db.Query(ctx, getPendingApprovalReports, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPendingApprovalReportsRow{}
	for rows.Next() {
		var i GetPendingApprovalReportsRow
		if err := rows.Scan(
			&i.ID,
			&i.InspectionRequestID,
			&i.InspectionAgentID,
			&i.OverallCondition,
			&i.StructuralCondition,
			&i.ElectricalCondition,
			&i.PlumbingCondition,
			&i.SafetyAssessment,
			&i.NeighborhoodAssessment,
			&i.SpecialFindings,
			&i.Recommendations,
			&i.Photos,
			&i.Videos,
			&i.ChecklistData,
			&i.ReportSummary,
			&i.IsApproved,
			&i.ApprovedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RequestedDate,
			&i.PropertyTitle,
			&i.AgentFirstName,
			&i.AgentLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReportStatistics = `-- name: GetReportStatistics :one
SELECT 
  COUNT(*) as total_reports,
  COUNT(CASE WHEN is_approved = true THEN 1 END) as approved_reports,
  COUNT(CASE WHEN overall_condition = 'excellent' THEN 1 END) as excellent_condition,
  COUNT(CASE WHEN overall_condition = 'good' THEN 1 END) as good_condition,
  COUNT(CASE WHEN overall_condition = 'fair' THEN 1 END) as fair_condition,
  COUNT(CASE WHEN overall_condition = 'poor' THEN 1 END) as poor_condition
FROM inspection_reports
`

type GetReportStatisticsRow struct {
	TotalReports       int64 `json:"total_reports"`
	ApprovedReports    int64 `json:"approved_reports"`
	ExcellentCondition int64 `json:"excellent_condition"`
	GoodCondition      int64 `json:"good_condition"`
	FairCondition      int64 `json:"fair_condition"`
	PoorCondition      int64 `json:"poor_condition"`
}

// Get report statistics
func (q *Queries) GetReportStatistics(ctx context.Context) (GetReportStatisticsRow, error) {
	row := q.db.QueryRow(ctx, getReportStatistics)
	var i GetReportStatisticsRow
	err := row.Scan(
		&i.TotalReports,
		&i.ApprovedReports,
		&i.ExcellentCondition,
		&i.GoodCondition,
		&i.FairCondition,
		&i.PoorCondition,
	)
	return i, err
}

const getReportsByAgent = `-- name: GetReportsByAgent :many
SELECT rep.id, rep.inspection_request_id, rep.inspection_agent_id, rep.overall_condition, rep.structural_condition, rep.electrical_condition, rep.plumbing_condition, rep.safety_assessment, rep.neighborhood_assessment, rep.special_findings, rep.recommendations, rep.photos, rep.videos, rep.checklist_data, rep.report_summary, rep.is_approved, rep.approved_at, rep.created_at, rep.updated_at, ir.requested_date, p.title as property_title, p.address as property_address
FROM inspection_reports rep
JOIN inspection_requests ir ON rep.inspection_request_id = ir.id
JOIN properties p ON ir.property_id = p.id
WHERE rep.inspection_agent_id = $1
ORDER BY rep.created_at DESC
LIMIT $2 OFFSET $3
`

type GetReportsByAgentParams struct {
	InspectionAgentID int64 `json:"inspection_agent_id"`
	Limit             int32 `json:"limit"`
	Offset            int32 `json:"offset"`
}

type GetReportsByAgentRow struct {
	ID                     int64                `json:"id"`
	InspectionRequestID    int64                `json:"inspection_request_id"`
	InspectionAgentID      int64                `json:"inspection_agent_id"`
	OverallCondition       OverallConditionEnum `json:"overall_condition"`
	StructuralCondition    pgtype.Text          `json:"structural_condition"`
	ElectricalCondition    pgtype.Text          `json:"electrical_condition"`
	PlumbingCondition      pgtype.Text          `json:"plumbing_condition"`
	SafetyAssessment       pgtype.Text          `json:"safety_assessment"`
	NeighborhoodAssessment pgtype.Text          `json:"neighborhood_assessment"`
	SpecialFindings        pgtype.Text          `json:"special_findings"`
	Recommendations        pgtype.Text          `json:"recommendations"`
	Photos                 pgtype.Text          `json:"photos"`
	Videos                 pgtype.Text          `json:"videos"`
	ChecklistData          pgtype.Text          `json:"checklist_data"`
	ReportSummary          string               `json:"report_summary"`
	IsApproved             pgtype.Bool          `json:"is_approved"`
	ApprovedAt             pgtype.Timestamptz   `json:"approved_at"`
	CreatedAt              pgtype.Timestamptz   `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz   `json:"updated_at"`
	RequestedDate          pgtype.Date          `json:"requested_date"`
	PropertyTitle          string               `json:"property_title"`
	PropertyAddress        string               `json:"property_address"`
}

// Get reports by agent
func (q *Queries) GetReportsByAgent(ctx context.Context, arg GetReportsByAgentParams) ([]GetReportsByAgentRow, error) {
	rows, err := q.db.Query(ctx, getReportsByAgent, arg.InspectionAgentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetReportsByAgentRow{}
	for rows.Next() {
		var i GetReportsByAgentRow
		if err := rows.Scan(
			&i.ID,
			&i.InspectionRequestID,
			&i.InspectionAgentID,
			&i.OverallCondition,
			&i.StructuralCondition,
			&i.ElectricalCondition,
			&i.PlumbingCondition,
			&i.SafetyAssessment,
			&i.NeighborhoodAssessment,
			&i.SpecialFindings,
			&i.Recommendations,
			&i.Photos,
			&i.Videos,
			&i.ChecklistData,
			&i.ReportSummary,
			&i.IsApproved,
			&i.ApprovedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RequestedDate,
			&i.PropertyTitle,
			&i.PropertyAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rejectInspectionReport = `-- name: RejectInspectionReport :exec
UPDATE inspection_reports 
SET is_approved = false, approved_at = NULL, updated_at = NOW()
WHERE id = $1
`

// Reject inspection report
func (q *Queries) RejectInspectionReport(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, rejectInspectionReport, id)
	return err
}

const updateInspectionReport = `-- name: UpdateInspectionReport :one
UPDATE inspection_reports 
SET overall_condition = $2, structural_condition = $3, electrical_condition = $4,
    plumbing_condition = $5, safety_assessment = $6, neighborhood_assessment = $7,
    special_findings = $8, recommendations = $9, photos = $10, videos = $11,
    checklist_data = $12, report_summary = $13, updated_at = NOW()
WHERE id = $1 
RETURNING id, inspection_request_id, inspection_agent_id, overall_condition, structural_condition, electrical_condition, plumbing_condition, safety_assessment, neighborhood_assessment, special_findings, recommendations, photos, videos, checklist_data, report_summary, is_approved, approved_at, created_at, updated_at
`

type UpdateInspectionReportParams struct {
	ID                     int64                `json:"id"`
	OverallCondition       OverallConditionEnum `json:"overall_condition"`
	StructuralCondition    pgtype.Text          `json:"structural_condition"`
	ElectricalCondition    pgtype.Text          `json:"electrical_condition"`
	PlumbingCondition      pgtype.Text          `json:"plumbing_condition"`
	SafetyAssessment       pgtype.Text          `json:"safety_assessment"`
	NeighborhoodAssessment pgtype.Text          `json:"neighborhood_assessment"`
	SpecialFindings        pgtype.Text          `json:"special_findings"`
	Recommendations        pgtype.Text          `json:"recommendations"`
	Photos                 pgtype.Text          `json:"photos"`
	Videos                 pgtype.Text          `json:"videos"`
	ChecklistData          pgtype.Text          `json:"checklist_data"`
	ReportSummary          string               `json:"report_summary"`
}

// Update inspection report
func (q *Queries) UpdateInspectionReport(ctx context.Context, arg UpdateInspectionReportParams) (InspectionReport, error) {
	row := q.db.QueryRow(ctx, updateInspectionReport,
		arg.ID,
		arg.OverallCondition,
		arg.StructuralCondition,
		arg.ElectricalCondition,
		arg.PlumbingCondition,
		arg.SafetyAssessment,
		arg.NeighborhoodAssessment,
		arg.SpecialFindings,
		arg.Recommendations,
		arg.Photos,
		arg.Videos,
		arg.ChecklistData,
		arg.ReportSummary,
	)
	var i InspectionReport
	err := row.Scan(
		&i.ID,
		&i.InspectionRequestID,
		&i.InspectionAgentID,
		&i.OverallCondition,
		&i.StructuralCondition,
		&i.ElectricalCondition,
		&i.PlumbingCondition,
		&i.SafetyAssessment,
		&i.NeighborhoodAssessment,
		&i.SpecialFindings,
		&i.Recommendations,
		&i.Photos,
		&i.Videos,
		&i.ChecklistData,
		&i.ReportSummary,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateReportMedia = `-- name: UpdateReportMedia :one
UPDATE inspection_reports 
SET photos = $2, videos = $3, updated_at = NOW()
WHERE id = $1 
RETURNING id, inspection_request_id, inspection_agent_id, overall_condition, structural_condition, electrical_condition, plumbing_condition, safety_assessment, neighborhood_assessment, special_findings, recommendations, photos, videos, checklist_data, report_summary, is_approved, approved_at, created_at, updated_at
`

type UpdateReportMediaParams struct {
	ID     int64       `json:"id"`
	Photos pgtype.Text `json:"photos"`
	Videos pgtype.Text `json:"videos"`
}

// Update report media
func (q *Queries) UpdateReportMedia(ctx context.Context, arg UpdateReportMediaParams) (InspectionReport, error) {
	row := q.db.QueryRow(ctx, updateReportMedia, arg.ID, arg.Photos, arg.Videos)
	var i InspectionReport
	err := row.Scan(
		&i.ID,
		&i.InspectionRequestID,
		&i.InspectionAgentID,
		&i.OverallCondition,
		&i.StructuralCondition,
		&i.ElectricalCondition,
		&i.PlumbingCondition,
		&i.SafetyAssessment,
		&i.NeighborhoodAssessment,
		&i.SpecialFindings,
		&i.Recommendations,
		&i.Photos,
		&i.Videos,
		&i.ChecklistData,
		&i.ReportSummary,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateReportSummary = `-- name: UpdateReportSummary :one
UPDATE inspection_reports 
SET report_summary = $2, updated_at = NOW()
WHERE id = $1 
RETURNING id, inspection_request_id, inspection_agent_id, overall_condition, structural_condition, electrical_condition, plumbing_condition, safety_assessment, neighborhood_assessment, special_findings, recommendations, photos, videos, checklist_data, report_summary, is_approved, approved_at, created_at, updated_at
`

type UpdateReportSummaryParams struct {
	ID            int64  `json:"id"`
	ReportSummary string `json:"report_summary"`
}

// Update report summary
func (q *Queries) UpdateReportSummary(ctx context.Context, arg UpdateReportSummaryParams) (InspectionReport, error) {
	row := q.db.QueryRow(ctx, updateReportSummary, arg.ID, arg.ReportSummary)
	var i InspectionReport
	err := row.Scan(
		&i.ID,
		&i.InspectionRequestID,
		&i.InspectionAgentID,
		&i.OverallCondition,
		&i.StructuralCondition,
		&i.ElectricalCondition,
		&i.PlumbingCondition,
		&i.SafetyAssessment,
		&i.NeighborhoodAssessment,
		&i.SpecialFindings,
		&i.Recommendations,
		&i.Photos,
		&i.Videos,
		&i.ChecklistData,
		&i.ReportSummary,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
