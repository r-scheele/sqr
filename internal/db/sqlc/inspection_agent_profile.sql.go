// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: inspection_agent_profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const approveInspectionAgent = `-- name: ApproveInspectionAgent :one
UPDATE inspection_agent_profiles 
SET is_approved = true, approved_at = NOW(), approved_by = $2, updated_at = NOW()
WHERE user_id = $1 
RETURNING id, user_id, license_number, specializations, service_areas, hourly_rate, availability_schedule, total_inspections, average_rating, completion_rate, total_earnings, bank_name, bank_account, bank_account_name, is_approved, approved_at, approved_by, created_at, updated_at
`

type ApproveInspectionAgentParams struct {
	UserID     int64       `json:"user_id"`
	ApprovedBy pgtype.Int8 `json:"approved_by"`
}

// Approve inspection agent
func (q *Queries) ApproveInspectionAgent(ctx context.Context, arg ApproveInspectionAgentParams) (InspectionAgentProfile, error) {
	row := q.db.QueryRow(ctx, approveInspectionAgent, arg.UserID, arg.ApprovedBy)
	var i InspectionAgentProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LicenseNumber,
		&i.Specializations,
		&i.ServiceAreas,
		&i.HourlyRate,
		&i.AvailabilitySchedule,
		&i.TotalInspections,
		&i.AverageRating,
		&i.CompletionRate,
		&i.TotalEarnings,
		&i.BankName,
		&i.BankAccount,
		&i.BankAccountName,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.ApprovedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createInspectionAgentProfile = `-- name: CreateInspectionAgentProfile :one
INSERT INTO inspection_agent_profiles (
  user_id, license_number, specializations, service_areas, hourly_rate,
  availability_schedule, bank_name, bank_account, bank_account_name
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, user_id, license_number, specializations, service_areas, hourly_rate, availability_schedule, total_inspections, average_rating, completion_rate, total_earnings, bank_name, bank_account, bank_account_name, is_approved, approved_at, approved_by, created_at, updated_at
`

type CreateInspectionAgentProfileParams struct {
	UserID               int64          `json:"user_id"`
	LicenseNumber        pgtype.Text    `json:"license_number"`
	Specializations      pgtype.Text    `json:"specializations"`
	ServiceAreas         pgtype.Text    `json:"service_areas"`
	HourlyRate           pgtype.Numeric `json:"hourly_rate"`
	AvailabilitySchedule pgtype.Text    `json:"availability_schedule"`
	BankName             pgtype.Text    `json:"bank_name"`
	BankAccount          pgtype.Text    `json:"bank_account"`
	BankAccountName      pgtype.Text    `json:"bank_account_name"`
}

// Create a new inspection agent profile
func (q *Queries) CreateInspectionAgentProfile(ctx context.Context, arg CreateInspectionAgentProfileParams) (InspectionAgentProfile, error) {
	row := q.db.QueryRow(ctx, createInspectionAgentProfile,
		arg.UserID,
		arg.LicenseNumber,
		arg.Specializations,
		arg.ServiceAreas,
		arg.HourlyRate,
		arg.AvailabilitySchedule,
		arg.BankName,
		arg.BankAccount,
		arg.BankAccountName,
	)
	var i InspectionAgentProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LicenseNumber,
		&i.Specializations,
		&i.ServiceAreas,
		&i.HourlyRate,
		&i.AvailabilitySchedule,
		&i.TotalInspections,
		&i.AverageRating,
		&i.CompletionRate,
		&i.TotalEarnings,
		&i.BankName,
		&i.BankAccount,
		&i.BankAccountName,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.ApprovedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInspectionAgentProfile = `-- name: DeleteInspectionAgentProfile :exec
DELETE FROM inspection_agent_profiles 
WHERE user_id = $1
`

// Delete inspection agent profile
func (q *Queries) DeleteInspectionAgentProfile(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteInspectionAgentProfile, userID)
	return err
}

const getInspectionAgentProfileByID = `-- name: GetInspectionAgentProfileByID :one
SELECT id, user_id, license_number, specializations, service_areas, hourly_rate, availability_schedule, total_inspections, average_rating, completion_rate, total_earnings, bank_name, bank_account, bank_account_name, is_approved, approved_at, approved_by, created_at, updated_at FROM inspection_agent_profiles 
WHERE id = $1 LIMIT 1
`

// Get inspection agent profile by ID
func (q *Queries) GetInspectionAgentProfileByID(ctx context.Context, id int64) (InspectionAgentProfile, error) {
	row := q.db.QueryRow(ctx, getInspectionAgentProfileByID, id)
	var i InspectionAgentProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LicenseNumber,
		&i.Specializations,
		&i.ServiceAreas,
		&i.HourlyRate,
		&i.AvailabilitySchedule,
		&i.TotalInspections,
		&i.AverageRating,
		&i.CompletionRate,
		&i.TotalEarnings,
		&i.BankName,
		&i.BankAccount,
		&i.BankAccountName,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.ApprovedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInspectionAgentProfileByUserID = `-- name: GetInspectionAgentProfileByUserID :one
SELECT id, user_id, license_number, specializations, service_areas, hourly_rate, availability_schedule, total_inspections, average_rating, completion_rate, total_earnings, bank_name, bank_account, bank_account_name, is_approved, approved_at, approved_by, created_at, updated_at FROM inspection_agent_profiles 
WHERE user_id = $1 LIMIT 1
`

// Get inspection agent profile by user ID
func (q *Queries) GetInspectionAgentProfileByUserID(ctx context.Context, userID int64) (InspectionAgentProfile, error) {
	row := q.db.QueryRow(ctx, getInspectionAgentProfileByUserID, userID)
	var i InspectionAgentProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LicenseNumber,
		&i.Specializations,
		&i.ServiceAreas,
		&i.HourlyRate,
		&i.AvailabilitySchedule,
		&i.TotalInspections,
		&i.AverageRating,
		&i.CompletionRate,
		&i.TotalEarnings,
		&i.BankName,
		&i.BankAccount,
		&i.BankAccountName,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.ApprovedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementAgentInspectionCount = `-- name: IncrementAgentInspectionCount :exec
UPDATE inspection_agent_profiles 
SET total_inspections = total_inspections + 1, updated_at = NOW()
WHERE user_id = $1
`

// Increment agent inspection count
func (q *Queries) IncrementAgentInspectionCount(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, incrementAgentInspectionCount, userID)
	return err
}

const listApprovedAgentsByArea = `-- name: ListApprovedAgentsByArea :many
SELECT iap.id, iap.user_id, iap.license_number, iap.specializations, iap.service_areas, iap.hourly_rate, iap.availability_schedule, iap.total_inspections, iap.average_rating, iap.completion_rate, iap.total_earnings, iap.bank_name, iap.bank_account, iap.bank_account_name, iap.is_approved, iap.approved_at, iap.approved_by, iap.created_at, iap.updated_at, u.first_name, u.last_name, u.email, u.phone 
FROM inspection_agent_profiles iap
JOIN users u ON iap.user_id = u.id
WHERE iap.is_approved = true 
  AND u.is_active = true
  AND ($1::text IS NULL OR iap.service_areas ILIKE '%' || $1 || '%')
ORDER BY iap.average_rating DESC, iap.completion_rate DESC
LIMIT $2 OFFSET $3
`

type ListApprovedAgentsByAreaParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type ListApprovedAgentsByAreaRow struct {
	ID                   int64              `json:"id"`
	UserID               int64              `json:"user_id"`
	LicenseNumber        pgtype.Text        `json:"license_number"`
	Specializations      pgtype.Text        `json:"specializations"`
	ServiceAreas         pgtype.Text        `json:"service_areas"`
	HourlyRate           pgtype.Numeric     `json:"hourly_rate"`
	AvailabilitySchedule pgtype.Text        `json:"availability_schedule"`
	TotalInspections     pgtype.Int4        `json:"total_inspections"`
	AverageRating        pgtype.Numeric     `json:"average_rating"`
	CompletionRate       pgtype.Numeric     `json:"completion_rate"`
	TotalEarnings        pgtype.Numeric     `json:"total_earnings"`
	BankName             pgtype.Text        `json:"bank_name"`
	BankAccount          pgtype.Text        `json:"bank_account"`
	BankAccountName      pgtype.Text        `json:"bank_account_name"`
	IsApproved           pgtype.Bool        `json:"is_approved"`
	ApprovedAt           pgtype.Timestamp   `json:"approved_at"`
	ApprovedBy           pgtype.Int8        `json:"approved_by"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	FirstName            string             `json:"first_name"`
	LastName             string             `json:"last_name"`
	Email                string             `json:"email"`
	Phone                string             `json:"phone"`
}

// List approved agents by area
func (q *Queries) ListApprovedAgentsByArea(ctx context.Context, arg ListApprovedAgentsByAreaParams) ([]ListApprovedAgentsByAreaRow, error) {
	rows, err := q.db.Query(ctx, listApprovedAgentsByArea, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListApprovedAgentsByAreaRow{}
	for rows.Next() {
		var i ListApprovedAgentsByAreaRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.LicenseNumber,
			&i.Specializations,
			&i.ServiceAreas,
			&i.HourlyRate,
			&i.AvailabilitySchedule,
			&i.TotalInspections,
			&i.AverageRating,
			&i.CompletionRate,
			&i.TotalEarnings,
			&i.BankName,
			&i.BankAccount,
			&i.BankAccountName,
			&i.IsApproved,
			&i.ApprovedAt,
			&i.ApprovedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPendingAgentApplications = `-- name: ListPendingAgentApplications :many
SELECT iap.id, iap.user_id, iap.license_number, iap.specializations, iap.service_areas, iap.hourly_rate, iap.availability_schedule, iap.total_inspections, iap.average_rating, iap.completion_rate, iap.total_earnings, iap.bank_name, iap.bank_account, iap.bank_account_name, iap.is_approved, iap.approved_at, iap.approved_by, iap.created_at, iap.updated_at, u.first_name, u.last_name, u.email, u.phone 
FROM inspection_agent_profiles iap
JOIN users u ON iap.user_id = u.id
WHERE iap.is_approved = false AND u.is_active = true
ORDER BY iap.created_at ASC
LIMIT $1 OFFSET $2
`

type ListPendingAgentApplicationsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListPendingAgentApplicationsRow struct {
	ID                   int64              `json:"id"`
	UserID               int64              `json:"user_id"`
	LicenseNumber        pgtype.Text        `json:"license_number"`
	Specializations      pgtype.Text        `json:"specializations"`
	ServiceAreas         pgtype.Text        `json:"service_areas"`
	HourlyRate           pgtype.Numeric     `json:"hourly_rate"`
	AvailabilitySchedule pgtype.Text        `json:"availability_schedule"`
	TotalInspections     pgtype.Int4        `json:"total_inspections"`
	AverageRating        pgtype.Numeric     `json:"average_rating"`
	CompletionRate       pgtype.Numeric     `json:"completion_rate"`
	TotalEarnings        pgtype.Numeric     `json:"total_earnings"`
	BankName             pgtype.Text        `json:"bank_name"`
	BankAccount          pgtype.Text        `json:"bank_account"`
	BankAccountName      pgtype.Text        `json:"bank_account_name"`
	IsApproved           pgtype.Bool        `json:"is_approved"`
	ApprovedAt           pgtype.Timestamp   `json:"approved_at"`
	ApprovedBy           pgtype.Int8        `json:"approved_by"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	FirstName            string             `json:"first_name"`
	LastName             string             `json:"last_name"`
	Email                string             `json:"email"`
	Phone                string             `json:"phone"`
}

// List pending agent applications
func (q *Queries) ListPendingAgentApplications(ctx context.Context, arg ListPendingAgentApplicationsParams) ([]ListPendingAgentApplicationsRow, error) {
	rows, err := q.db.Query(ctx, listPendingAgentApplications, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPendingAgentApplicationsRow{}
	for rows.Next() {
		var i ListPendingAgentApplicationsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.LicenseNumber,
			&i.Specializations,
			&i.ServiceAreas,
			&i.HourlyRate,
			&i.AvailabilitySchedule,
			&i.TotalInspections,
			&i.AverageRating,
			&i.CompletionRate,
			&i.TotalEarnings,
			&i.BankName,
			&i.BankAccount,
			&i.BankAccountName,
			&i.IsApproved,
			&i.ApprovedAt,
			&i.ApprovedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTopAgentsByRating = `-- name: ListTopAgentsByRating :many
SELECT iap.id, iap.user_id, iap.license_number, iap.specializations, iap.service_areas, iap.hourly_rate, iap.availability_schedule, iap.total_inspections, iap.average_rating, iap.completion_rate, iap.total_earnings, iap.bank_name, iap.bank_account, iap.bank_account_name, iap.is_approved, iap.approved_at, iap.approved_by, iap.created_at, iap.updated_at, u.first_name, u.last_name, u.email 
FROM inspection_agent_profiles iap
JOIN users u ON iap.user_id = u.id
WHERE iap.is_approved = true AND u.is_active = true
ORDER BY iap.average_rating DESC, iap.total_inspections DESC
LIMIT $1 OFFSET $2
`

type ListTopAgentsByRatingParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListTopAgentsByRatingRow struct {
	ID                   int64              `json:"id"`
	UserID               int64              `json:"user_id"`
	LicenseNumber        pgtype.Text        `json:"license_number"`
	Specializations      pgtype.Text        `json:"specializations"`
	ServiceAreas         pgtype.Text        `json:"service_areas"`
	HourlyRate           pgtype.Numeric     `json:"hourly_rate"`
	AvailabilitySchedule pgtype.Text        `json:"availability_schedule"`
	TotalInspections     pgtype.Int4        `json:"total_inspections"`
	AverageRating        pgtype.Numeric     `json:"average_rating"`
	CompletionRate       pgtype.Numeric     `json:"completion_rate"`
	TotalEarnings        pgtype.Numeric     `json:"total_earnings"`
	BankName             pgtype.Text        `json:"bank_name"`
	BankAccount          pgtype.Text        `json:"bank_account"`
	BankAccountName      pgtype.Text        `json:"bank_account_name"`
	IsApproved           pgtype.Bool        `json:"is_approved"`
	ApprovedAt           pgtype.Timestamp   `json:"approved_at"`
	ApprovedBy           pgtype.Int8        `json:"approved_by"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	FirstName            string             `json:"first_name"`
	LastName             string             `json:"last_name"`
	Email                string             `json:"email"`
}

// List top agents by rating
func (q *Queries) ListTopAgentsByRating(ctx context.Context, arg ListTopAgentsByRatingParams) ([]ListTopAgentsByRatingRow, error) {
	rows, err := q.db.Query(ctx, listTopAgentsByRating, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTopAgentsByRatingRow{}
	for rows.Next() {
		var i ListTopAgentsByRatingRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.LicenseNumber,
			&i.Specializations,
			&i.ServiceAreas,
			&i.HourlyRate,
			&i.AvailabilitySchedule,
			&i.TotalInspections,
			&i.AverageRating,
			&i.CompletionRate,
			&i.TotalEarnings,
			&i.BankName,
			&i.BankAccount,
			&i.BankAccountName,
			&i.IsApproved,
			&i.ApprovedAt,
			&i.ApprovedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rejectInspectionAgent = `-- name: RejectInspectionAgent :exec
UPDATE inspection_agent_profiles 
SET is_approved = false, approved_at = NULL, approved_by = NULL, updated_at = NOW()
WHERE user_id = $1
`

// Reject inspection agent
func (q *Queries) RejectInspectionAgent(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, rejectInspectionAgent, userID)
	return err
}

const updateAgentBankingDetails = `-- name: UpdateAgentBankingDetails :one
UPDATE inspection_agent_profiles 
SET bank_name = $2, bank_account = $3, bank_account_name = $4, updated_at = NOW()
WHERE user_id = $1 
RETURNING id, user_id, license_number, specializations, service_areas, hourly_rate, availability_schedule, total_inspections, average_rating, completion_rate, total_earnings, bank_name, bank_account, bank_account_name, is_approved, approved_at, approved_by, created_at, updated_at
`

type UpdateAgentBankingDetailsParams struct {
	UserID          int64       `json:"user_id"`
	BankName        pgtype.Text `json:"bank_name"`
	BankAccount     pgtype.Text `json:"bank_account"`
	BankAccountName pgtype.Text `json:"bank_account_name"`
}

// Update agent banking details
func (q *Queries) UpdateAgentBankingDetails(ctx context.Context, arg UpdateAgentBankingDetailsParams) (InspectionAgentProfile, error) {
	row := q.db.QueryRow(ctx, updateAgentBankingDetails,
		arg.UserID,
		arg.BankName,
		arg.BankAccount,
		arg.BankAccountName,
	)
	var i InspectionAgentProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LicenseNumber,
		&i.Specializations,
		&i.ServiceAreas,
		&i.HourlyRate,
		&i.AvailabilitySchedule,
		&i.TotalInspections,
		&i.AverageRating,
		&i.CompletionRate,
		&i.TotalEarnings,
		&i.BankName,
		&i.BankAccount,
		&i.BankAccountName,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.ApprovedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAgentEarnings = `-- name: UpdateAgentEarnings :exec
UPDATE inspection_agent_profiles 
SET total_earnings = total_earnings + $2, updated_at = NOW()
WHERE user_id = $1
`

type UpdateAgentEarningsParams struct {
	UserID        int64          `json:"user_id"`
	TotalEarnings pgtype.Numeric `json:"total_earnings"`
}

// Update agent earnings
func (q *Queries) UpdateAgentEarnings(ctx context.Context, arg UpdateAgentEarningsParams) error {
	_, err := q.db.Exec(ctx, updateAgentEarnings, arg.UserID, arg.TotalEarnings)
	return err
}

const updateAgentServiceDetails = `-- name: UpdateAgentServiceDetails :one
UPDATE inspection_agent_profiles 
SET specializations = $2, service_areas = $3, hourly_rate = $4,
    availability_schedule = $5, updated_at = NOW()
WHERE user_id = $1 
RETURNING id, user_id, license_number, specializations, service_areas, hourly_rate, availability_schedule, total_inspections, average_rating, completion_rate, total_earnings, bank_name, bank_account, bank_account_name, is_approved, approved_at, approved_by, created_at, updated_at
`

type UpdateAgentServiceDetailsParams struct {
	UserID               int64          `json:"user_id"`
	Specializations      pgtype.Text    `json:"specializations"`
	ServiceAreas         pgtype.Text    `json:"service_areas"`
	HourlyRate           pgtype.Numeric `json:"hourly_rate"`
	AvailabilitySchedule pgtype.Text    `json:"availability_schedule"`
}

// Update agent service details
func (q *Queries) UpdateAgentServiceDetails(ctx context.Context, arg UpdateAgentServiceDetailsParams) (InspectionAgentProfile, error) {
	row := q.db.QueryRow(ctx, updateAgentServiceDetails,
		arg.UserID,
		arg.Specializations,
		arg.ServiceAreas,
		arg.HourlyRate,
		arg.AvailabilitySchedule,
	)
	var i InspectionAgentProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LicenseNumber,
		&i.Specializations,
		&i.ServiceAreas,
		&i.HourlyRate,
		&i.AvailabilitySchedule,
		&i.TotalInspections,
		&i.AverageRating,
		&i.CompletionRate,
		&i.TotalEarnings,
		&i.BankName,
		&i.BankAccount,
		&i.BankAccountName,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.ApprovedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAgentStats = `-- name: UpdateAgentStats :one
UPDATE inspection_agent_profiles 
SET total_inspections = $2, average_rating = $3, completion_rate = $4,
    total_earnings = $5, updated_at = NOW()
WHERE user_id = $1 
RETURNING id, user_id, license_number, specializations, service_areas, hourly_rate, availability_schedule, total_inspections, average_rating, completion_rate, total_earnings, bank_name, bank_account, bank_account_name, is_approved, approved_at, approved_by, created_at, updated_at
`

type UpdateAgentStatsParams struct {
	UserID           int64          `json:"user_id"`
	TotalInspections pgtype.Int4    `json:"total_inspections"`
	AverageRating    pgtype.Numeric `json:"average_rating"`
	CompletionRate   pgtype.Numeric `json:"completion_rate"`
	TotalEarnings    pgtype.Numeric `json:"total_earnings"`
}

// Update agent stats
func (q *Queries) UpdateAgentStats(ctx context.Context, arg UpdateAgentStatsParams) (InspectionAgentProfile, error) {
	row := q.db.QueryRow(ctx, updateAgentStats,
		arg.UserID,
		arg.TotalInspections,
		arg.AverageRating,
		arg.CompletionRate,
		arg.TotalEarnings,
	)
	var i InspectionAgentProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LicenseNumber,
		&i.Specializations,
		&i.ServiceAreas,
		&i.HourlyRate,
		&i.AvailabilitySchedule,
		&i.TotalInspections,
		&i.AverageRating,
		&i.CompletionRate,
		&i.TotalEarnings,
		&i.BankName,
		&i.BankAccount,
		&i.BankAccountName,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.ApprovedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateInspectionAgentProfile = `-- name: UpdateInspectionAgentProfile :one
UPDATE inspection_agent_profiles 
SET license_number = $2, specializations = $3, service_areas = $4,
    hourly_rate = $5, availability_schedule = $6, bank_name = $7,
    bank_account = $8, bank_account_name = $9, updated_at = NOW()
WHERE user_id = $1 
RETURNING id, user_id, license_number, specializations, service_areas, hourly_rate, availability_schedule, total_inspections, average_rating, completion_rate, total_earnings, bank_name, bank_account, bank_account_name, is_approved, approved_at, approved_by, created_at, updated_at
`

type UpdateInspectionAgentProfileParams struct {
	UserID               int64          `json:"user_id"`
	LicenseNumber        pgtype.Text    `json:"license_number"`
	Specializations      pgtype.Text    `json:"specializations"`
	ServiceAreas         pgtype.Text    `json:"service_areas"`
	HourlyRate           pgtype.Numeric `json:"hourly_rate"`
	AvailabilitySchedule pgtype.Text    `json:"availability_schedule"`
	BankName             pgtype.Text    `json:"bank_name"`
	BankAccount          pgtype.Text    `json:"bank_account"`
	BankAccountName      pgtype.Text    `json:"bank_account_name"`
}

// Update inspection agent profile
func (q *Queries) UpdateInspectionAgentProfile(ctx context.Context, arg UpdateInspectionAgentProfileParams) (InspectionAgentProfile, error) {
	row := q.db.QueryRow(ctx, updateInspectionAgentProfile,
		arg.UserID,
		arg.LicenseNumber,
		arg.Specializations,
		arg.ServiceAreas,
		arg.HourlyRate,
		arg.AvailabilitySchedule,
		arg.BankName,
		arg.BankAccount,
		arg.BankAccountName,
	)
	var i InspectionAgentProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.LicenseNumber,
		&i.Specializations,
		&i.ServiceAreas,
		&i.HourlyRate,
		&i.AvailabilitySchedule,
		&i.TotalInspections,
		&i.AverageRating,
		&i.CompletionRate,
		&i.TotalEarnings,
		&i.BankName,
		&i.BankAccount,
		&i.BankAccountName,
		&i.IsApproved,
		&i.ApprovedAt,
		&i.ApprovedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
