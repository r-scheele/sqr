// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: saved_property.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPropertySaves = `-- name: CountPropertySaves :one
SELECT COUNT(*) FROM saved_properties 
WHERE property_id = $1
`

// Count saves for property
func (q *Queries) CountPropertySaves(ctx context.Context, propertyID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countPropertySaves, propertyID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserSavedProperties = `-- name: CountUserSavedProperties :one
SELECT COUNT(*) FROM saved_properties sp
JOIN properties p ON sp.property_id = p.id
WHERE sp.tenant_id = $1 AND p.status = 'active'
`

// Count user's saved properties
func (q *Queries) CountUserSavedProperties(ctx context.Context, tenantID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countUserSavedProperties, tenantID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteAllUserSavedProperties = `-- name: DeleteAllUserSavedProperties :exec
DELETE FROM saved_properties 
WHERE tenant_id = $1
`

// Delete all saved properties for user
func (q *Queries) DeleteAllUserSavedProperties(ctx context.Context, tenantID int64) error {
	_, err := q.db.Exec(ctx, deleteAllUserSavedProperties, tenantID)
	return err
}

const deleteSavedProperty = `-- name: DeleteSavedProperty :exec
DELETE FROM saved_properties 
WHERE id = $1
`

// Delete saved property by ID
func (q *Queries) DeleteSavedProperty(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSavedProperty, id)
	return err
}

const getMostSavedProperties = `-- name: GetMostSavedProperties :many
SELECT p.id, p.title, p.rent_amount, p.city, p.state, COUNT(sp.id) as save_count
FROM properties p
JOIN saved_properties sp ON p.id = sp.property_id
WHERE p.status = 'active' AND p.is_available = true
GROUP BY p.id, p.title, p.rent_amount, p.city, p.state
ORDER BY save_count DESC, p.created_at DESC
LIMIT $1 OFFSET $2
`

type GetMostSavedPropertiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetMostSavedPropertiesRow struct {
	ID         int64          `json:"id"`
	Title      string         `json:"title"`
	RentAmount pgtype.Numeric `json:"rent_amount"`
	City       string         `json:"city"`
	State      string         `json:"state"`
	SaveCount  int64          `json:"save_count"`
}

// Get most saved properties
func (q *Queries) GetMostSavedProperties(ctx context.Context, arg GetMostSavedPropertiesParams) ([]GetMostSavedPropertiesRow, error) {
	rows, err := q.db.Query(ctx, getMostSavedProperties, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMostSavedPropertiesRow{}
	for rows.Next() {
		var i GetMostSavedPropertiesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.RentAmount,
			&i.City,
			&i.State,
			&i.SaveCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSavedPropertyByID = `-- name: GetSavedPropertyByID :one
SELECT id, tenant_id, property_id, saved_at FROM saved_properties 
WHERE id = $1 LIMIT 1
`

// Get saved property by ID
func (q *Queries) GetSavedPropertyByID(ctx context.Context, id int64) (SavedProperty, error) {
	row := q.db.QueryRow(ctx, getSavedPropertyByID, id)
	var i SavedProperty
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.PropertyID,
		&i.SavedAt,
	)
	return i, err
}

const getUserSavedProperties = `-- name: GetUserSavedProperties :many
SELECT sp.id, sp.tenant_id, sp.property_id, sp.saved_at, p.title, p.rent_amount, p.bedrooms, p.bathrooms, p.city, p.state,
       p.property_type, p.furnishing_status, p.is_available, p.status
FROM saved_properties sp
JOIN properties p ON sp.property_id = p.id
WHERE sp.tenant_id = $1
ORDER BY sp.saved_at DESC
LIMIT $2 OFFSET $3
`

type GetUserSavedPropertiesParams struct {
	TenantID int64 `json:"tenant_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

type GetUserSavedPropertiesRow struct {
	ID               int64                    `json:"id"`
	TenantID         int64                    `json:"tenant_id"`
	PropertyID       int64                    `json:"property_id"`
	SavedAt          pgtype.Timestamptz       `json:"saved_at"`
	Title            string                   `json:"title"`
	RentAmount       pgtype.Numeric           `json:"rent_amount"`
	Bedrooms         int32                    `json:"bedrooms"`
	Bathrooms        int32                    `json:"bathrooms"`
	City             string                   `json:"city"`
	State            string                   `json:"state"`
	PropertyType     PropertyTypeEnum         `json:"property_type"`
	FurnishingStatus NullFurnishingStatusEnum `json:"furnishing_status"`
	IsAvailable      pgtype.Bool              `json:"is_available"`
	Status           NullPropertyStatusEnum   `json:"status"`
}

// Get user's saved properties
func (q *Queries) GetUserSavedProperties(ctx context.Context, arg GetUserSavedPropertiesParams) ([]GetUserSavedPropertiesRow, error) {
	rows, err := q.db.Query(ctx, getUserSavedProperties, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserSavedPropertiesRow{}
	for rows.Next() {
		var i GetUserSavedPropertiesRow
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.PropertyID,
			&i.SavedAt,
			&i.Title,
			&i.RentAmount,
			&i.Bedrooms,
			&i.Bathrooms,
			&i.City,
			&i.State,
			&i.PropertyType,
			&i.FurnishingStatus,
			&i.IsAvailable,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSavedPropertiesWithLandlord = `-- name: GetUserSavedPropertiesWithLandlord :many
SELECT sp.id, sp.tenant_id, sp.property_id, sp.saved_at, p.title, p.rent_amount, p.bedrooms, p.bathrooms, p.city, p.state,
       p.property_type, p.furnishing_status, p.is_available, p.status,
       u.first_name as landlord_first_name, u.last_name as landlord_last_name
FROM saved_properties sp
JOIN properties p ON sp.property_id = p.id
JOIN users u ON p.landlord_id = u.id
WHERE sp.tenant_id = $1 AND p.status = 'active'
ORDER BY sp.saved_at DESC
LIMIT $2 OFFSET $3
`

type GetUserSavedPropertiesWithLandlordParams struct {
	TenantID int64 `json:"tenant_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

type GetUserSavedPropertiesWithLandlordRow struct {
	ID                int64                    `json:"id"`
	TenantID          int64                    `json:"tenant_id"`
	PropertyID        int64                    `json:"property_id"`
	SavedAt           pgtype.Timestamptz       `json:"saved_at"`
	Title             string                   `json:"title"`
	RentAmount        pgtype.Numeric           `json:"rent_amount"`
	Bedrooms          int32                    `json:"bedrooms"`
	Bathrooms         int32                    `json:"bathrooms"`
	City              string                   `json:"city"`
	State             string                   `json:"state"`
	PropertyType      PropertyTypeEnum         `json:"property_type"`
	FurnishingStatus  NullFurnishingStatusEnum `json:"furnishing_status"`
	IsAvailable       pgtype.Bool              `json:"is_available"`
	Status            NullPropertyStatusEnum   `json:"status"`
	LandlordFirstName string                   `json:"landlord_first_name"`
	LandlordLastName  string                   `json:"landlord_last_name"`
}

// Get user's saved properties with landlord info
func (q *Queries) GetUserSavedPropertiesWithLandlord(ctx context.Context, arg GetUserSavedPropertiesWithLandlordParams) ([]GetUserSavedPropertiesWithLandlordRow, error) {
	rows, err := q.db.Query(ctx, getUserSavedPropertiesWithLandlord, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserSavedPropertiesWithLandlordRow{}
	for rows.Next() {
		var i GetUserSavedPropertiesWithLandlordRow
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.PropertyID,
			&i.SavedAt,
			&i.Title,
			&i.RentAmount,
			&i.Bedrooms,
			&i.Bathrooms,
			&i.City,
			&i.State,
			&i.PropertyType,
			&i.FurnishingStatus,
			&i.IsAvailable,
			&i.Status,
			&i.LandlordFirstName,
			&i.LandlordLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isPropertySavedByUser = `-- name: IsPropertySavedByUser :one
SELECT EXISTS(
  SELECT 1 FROM saved_properties 
  WHERE tenant_id = $1 AND property_id = $2
)
`

type IsPropertySavedByUserParams struct {
	TenantID   int64 `json:"tenant_id"`
	PropertyID int64 `json:"property_id"`
}

// Check if property is saved by user
func (q *Queries) IsPropertySavedByUser(ctx context.Context, arg IsPropertySavedByUserParams) (bool, error) {
	row := q.db.QueryRow(ctx, isPropertySavedByUser, arg.TenantID, arg.PropertyID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const saveProperty = `-- name: SaveProperty :one
INSERT INTO saved_properties (
  tenant_id, property_id
) VALUES (
  $1, $2
) ON CONFLICT (tenant_id, property_id) DO NOTHING
RETURNING id, tenant_id, property_id, saved_at
`

type SavePropertyParams struct {
	TenantID   int64 `json:"tenant_id"`
	PropertyID int64 `json:"property_id"`
}

// Save a property
func (q *Queries) SaveProperty(ctx context.Context, arg SavePropertyParams) (SavedProperty, error) {
	row := q.db.QueryRow(ctx, saveProperty, arg.TenantID, arg.PropertyID)
	var i SavedProperty
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.PropertyID,
		&i.SavedAt,
	)
	return i, err
}

const unsaveProperty = `-- name: UnsaveProperty :exec
DELETE FROM saved_properties 
WHERE tenant_id = $1 AND property_id = $2
`

type UnsavePropertyParams struct {
	TenantID   int64 `json:"tenant_id"`
	PropertyID int64 `json:"property_id"`
}

// Unsave a property
func (q *Queries) UnsaveProperty(ctx context.Context, arg UnsavePropertyParams) error {
	_, err := q.db.Exec(ctx, unsaveProperty, arg.TenantID, arg.PropertyID)
	return err
}
