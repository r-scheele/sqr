// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: system_setting.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkSettingExists = `-- name: CheckSettingExists :one
SELECT EXISTS(
  SELECT 1 FROM system_settings 
  WHERE setting_key = $1
)
`

// Check if setting exists
func (q *Queries) CheckSettingExists(ctx context.Context, settingKey string) (bool, error) {
	row := q.db.QueryRow(ctx, checkSettingExists, settingKey)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countPublicSettings = `-- name: CountPublicSettings :one
SELECT COUNT(*) FROM system_settings 
WHERE is_public = true
`

// Count public settings
func (q *Queries) CountPublicSettings(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countPublicSettings)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSettingsByType = `-- name: CountSettingsByType :one
SELECT COUNT(*) FROM system_settings 
WHERE setting_type = $1
`

// Count settings by type
func (q *Queries) CountSettingsByType(ctx context.Context, settingType NullSettingTypeEnum) (int64, error) {
	row := q.db.QueryRow(ctx, countSettingsByType, settingType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSystemSettings = `-- name: CountSystemSettings :one
SELECT COUNT(*) FROM system_settings
`

// Count system settings
func (q *Queries) CountSystemSettings(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countSystemSettings)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSystemSetting = `-- name: CreateSystemSetting :one
INSERT INTO system_settings (
  setting_key, setting_value, setting_type, description, is_public, updated_by
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, setting_key, setting_value, setting_type, description, is_public, updated_by, created_at, updated_at
`

type CreateSystemSettingParams struct {
	SettingKey   string              `json:"setting_key"`
	SettingValue pgtype.Text         `json:"setting_value"`
	SettingType  NullSettingTypeEnum `json:"setting_type"`
	Description  pgtype.Text         `json:"description"`
	IsPublic     pgtype.Bool         `json:"is_public"`
	UpdatedBy    pgtype.Int8         `json:"updated_by"`
}

// Create system setting
func (q *Queries) CreateSystemSetting(ctx context.Context, arg CreateSystemSettingParams) (SystemSetting, error) {
	row := q.db.QueryRow(ctx, createSystemSetting,
		arg.SettingKey,
		arg.SettingValue,
		arg.SettingType,
		arg.Description,
		arg.IsPublic,
		arg.UpdatedBy,
	)
	var i SystemSetting
	err := row.Scan(
		&i.ID,
		&i.SettingKey,
		&i.SettingValue,
		&i.SettingType,
		&i.Description,
		&i.IsPublic,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSystemSetting = `-- name: DeleteSystemSetting :exec
DELETE FROM system_settings 
WHERE setting_key = $1
`

// Delete system setting
func (q *Queries) DeleteSystemSetting(ctx context.Context, settingKey string) error {
	_, err := q.db.Exec(ctx, deleteSystemSetting, settingKey)
	return err
}

const getAllSystemSettings = `-- name: GetAllSystemSettings :many
SELECT id, setting_key, setting_value, setting_type, description, is_public, updated_by, created_at, updated_at FROM system_settings 
ORDER BY setting_key ASC
LIMIT $1 OFFSET $2
`

type GetAllSystemSettingsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// Get all system settings
func (q *Queries) GetAllSystemSettings(ctx context.Context, arg GetAllSystemSettingsParams) ([]SystemSetting, error) {
	rows, err := q.db.Query(ctx, getAllSystemSettings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SystemSetting{}
	for rows.Next() {
		var i SystemSetting
		if err := rows.Scan(
			&i.ID,
			&i.SettingKey,
			&i.SettingValue,
			&i.SettingType,
			&i.Description,
			&i.IsPublic,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublicSystemSettings = `-- name: GetPublicSystemSettings :many
SELECT setting_key, setting_value, setting_type, description
FROM system_settings 
WHERE is_public = true
ORDER BY setting_key ASC
`

type GetPublicSystemSettingsRow struct {
	SettingKey   string              `json:"setting_key"`
	SettingValue pgtype.Text         `json:"setting_value"`
	SettingType  NullSettingTypeEnum `json:"setting_type"`
	Description  pgtype.Text         `json:"description"`
}

// Get public system settings
func (q *Queries) GetPublicSystemSettings(ctx context.Context) ([]GetPublicSystemSettingsRow, error) {
	rows, err := q.db.Query(ctx, getPublicSystemSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPublicSystemSettingsRow{}
	for rows.Next() {
		var i GetPublicSystemSettingsRow
		if err := rows.Scan(
			&i.SettingKey,
			&i.SettingValue,
			&i.SettingType,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentlyUpdatedSettings = `-- name: GetRecentlyUpdatedSettings :many
SELECT ss.id, ss.setting_key, ss.setting_value, ss.setting_type, ss.description, ss.is_public, ss.updated_by, ss.created_at, ss.updated_at, u.first_name as updated_by_first_name, u.last_name as updated_by_last_name
FROM system_settings ss
LEFT JOIN users u ON ss.updated_by = u.id
WHERE ss.updated_at >= $1
ORDER BY ss.updated_at DESC
LIMIT $2 OFFSET $3
`

type GetRecentlyUpdatedSettingsParams struct {
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	Limit     int32              `json:"limit"`
	Offset    int32              `json:"offset"`
}

type GetRecentlyUpdatedSettingsRow struct {
	ID                 int64               `json:"id"`
	SettingKey         string              `json:"setting_key"`
	SettingValue       pgtype.Text         `json:"setting_value"`
	SettingType        NullSettingTypeEnum `json:"setting_type"`
	Description        pgtype.Text         `json:"description"`
	IsPublic           pgtype.Bool         `json:"is_public"`
	UpdatedBy          pgtype.Int8         `json:"updated_by"`
	CreatedAt          pgtype.Timestamptz  `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz  `json:"updated_at"`
	UpdatedByFirstName pgtype.Text         `json:"updated_by_first_name"`
	UpdatedByLastName  pgtype.Text         `json:"updated_by_last_name"`
}

// Get recently updated settings
func (q *Queries) GetRecentlyUpdatedSettings(ctx context.Context, arg GetRecentlyUpdatedSettingsParams) ([]GetRecentlyUpdatedSettingsRow, error) {
	rows, err := q.db.Query(ctx, getRecentlyUpdatedSettings, arg.UpdatedAt, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRecentlyUpdatedSettingsRow{}
	for rows.Next() {
		var i GetRecentlyUpdatedSettingsRow
		if err := rows.Scan(
			&i.ID,
			&i.SettingKey,
			&i.SettingValue,
			&i.SettingType,
			&i.Description,
			&i.IsPublic,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpdatedByFirstName,
			&i.UpdatedByLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSettingStatistics = `-- name: GetSettingStatistics :one
SELECT 
  COUNT(*) as total_settings,
  COUNT(CASE WHEN is_public = true THEN 1 END) as public_settings,
  COUNT(CASE WHEN setting_type = 'string' THEN 1 END) as string_settings,
  COUNT(CASE WHEN setting_type = 'number' THEN 1 END) as number_settings,
  COUNT(CASE WHEN setting_type = 'boolean' THEN 1 END) as boolean_settings,
  COUNT(CASE WHEN setting_type = 'json' THEN 1 END) as json_settings
FROM system_settings
`

type GetSettingStatisticsRow struct {
	TotalSettings   int64 `json:"total_settings"`
	PublicSettings  int64 `json:"public_settings"`
	StringSettings  int64 `json:"string_settings"`
	NumberSettings  int64 `json:"number_settings"`
	BooleanSettings int64 `json:"boolean_settings"`
	JsonSettings    int64 `json:"json_settings"`
}

// Get setting statistics
func (q *Queries) GetSettingStatistics(ctx context.Context) (GetSettingStatisticsRow, error) {
	row := q.db.QueryRow(ctx, getSettingStatistics)
	var i GetSettingStatisticsRow
	err := row.Scan(
		&i.TotalSettings,
		&i.PublicSettings,
		&i.StringSettings,
		&i.NumberSettings,
		&i.BooleanSettings,
		&i.JsonSettings,
	)
	return i, err
}

const getSettingsByType = `-- name: GetSettingsByType :many
SELECT id, setting_key, setting_value, setting_type, description, is_public, updated_by, created_at, updated_at FROM system_settings 
WHERE setting_type = $1
ORDER BY setting_key ASC
LIMIT $2 OFFSET $3
`

type GetSettingsByTypeParams struct {
	SettingType NullSettingTypeEnum `json:"setting_type"`
	Limit       int32               `json:"limit"`
	Offset      int32               `json:"offset"`
}

// Get settings by type
func (q *Queries) GetSettingsByType(ctx context.Context, arg GetSettingsByTypeParams) ([]SystemSetting, error) {
	rows, err := q.db.Query(ctx, getSettingsByType, arg.SettingType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SystemSetting{}
	for rows.Next() {
		var i SystemSetting
		if err := rows.Scan(
			&i.ID,
			&i.SettingKey,
			&i.SettingValue,
			&i.SettingType,
			&i.Description,
			&i.IsPublic,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSettingsWithUpdaterInfo = `-- name: GetSettingsWithUpdaterInfo :many
SELECT ss.id, ss.setting_key, ss.setting_value, ss.setting_type, ss.description, ss.is_public, ss.updated_by, ss.created_at, ss.updated_at, u.first_name as updated_by_first_name, u.last_name as updated_by_last_name
FROM system_settings ss
LEFT JOIN users u ON ss.updated_by = u.id
ORDER BY ss.updated_at DESC
LIMIT $1 OFFSET $2
`

type GetSettingsWithUpdaterInfoParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetSettingsWithUpdaterInfoRow struct {
	ID                 int64               `json:"id"`
	SettingKey         string              `json:"setting_key"`
	SettingValue       pgtype.Text         `json:"setting_value"`
	SettingType        NullSettingTypeEnum `json:"setting_type"`
	Description        pgtype.Text         `json:"description"`
	IsPublic           pgtype.Bool         `json:"is_public"`
	UpdatedBy          pgtype.Int8         `json:"updated_by"`
	CreatedAt          pgtype.Timestamptz  `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz  `json:"updated_at"`
	UpdatedByFirstName pgtype.Text         `json:"updated_by_first_name"`
	UpdatedByLastName  pgtype.Text         `json:"updated_by_last_name"`
}

// Get settings with updater info
func (q *Queries) GetSettingsWithUpdaterInfo(ctx context.Context, arg GetSettingsWithUpdaterInfoParams) ([]GetSettingsWithUpdaterInfoRow, error) {
	rows, err := q.db.Query(ctx, getSettingsWithUpdaterInfo, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSettingsWithUpdaterInfoRow{}
	for rows.Next() {
		var i GetSettingsWithUpdaterInfoRow
		if err := rows.Scan(
			&i.ID,
			&i.SettingKey,
			&i.SettingValue,
			&i.SettingType,
			&i.Description,
			&i.IsPublic,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UpdatedByFirstName,
			&i.UpdatedByLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystemSettingByID = `-- name: GetSystemSettingByID :one
SELECT id, setting_key, setting_value, setting_type, description, is_public, updated_by, created_at, updated_at FROM system_settings 
WHERE id = $1 LIMIT 1
`

// Get system setting by ID
func (q *Queries) GetSystemSettingByID(ctx context.Context, id int64) (SystemSetting, error) {
	row := q.db.QueryRow(ctx, getSystemSettingByID, id)
	var i SystemSetting
	err := row.Scan(
		&i.ID,
		&i.SettingKey,
		&i.SettingValue,
		&i.SettingType,
		&i.Description,
		&i.IsPublic,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSystemSettingByKey = `-- name: GetSystemSettingByKey :one
SELECT id, setting_key, setting_value, setting_type, description, is_public, updated_by, created_at, updated_at FROM system_settings 
WHERE setting_key = $1 LIMIT 1
`

// Get system setting by key
func (q *Queries) GetSystemSettingByKey(ctx context.Context, settingKey string) (SystemSetting, error) {
	row := q.db.QueryRow(ctx, getSystemSettingByKey, settingKey)
	var i SystemSetting
	err := row.Scan(
		&i.ID,
		&i.SettingKey,
		&i.SettingValue,
		&i.SettingType,
		&i.Description,
		&i.IsPublic,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const searchSettings = `-- name: SearchSettings :many
SELECT id, setting_key, setting_value, setting_type, description, is_public, updated_by, created_at, updated_at FROM system_settings 
WHERE setting_key ILIKE '%' || $1 || '%' OR description ILIKE '%' || $1 || '%'
ORDER BY setting_key ASC
LIMIT $2 OFFSET $3
`

type SearchSettingsParams struct {
	Column1 pgtype.Text `json:"column_1"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

// Search settings
func (q *Queries) SearchSettings(ctx context.Context, arg SearchSettingsParams) ([]SystemSetting, error) {
	rows, err := q.db.Query(ctx, searchSettings, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SystemSetting{}
	for rows.Next() {
		var i SystemSetting
		if err := rows.Scan(
			&i.ID,
			&i.SettingKey,
			&i.SettingValue,
			&i.SettingType,
			&i.Description,
			&i.IsPublic,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSettingValue = `-- name: UpdateSettingValue :one
UPDATE system_settings 
SET setting_value = $2, updated_by = $3, updated_at = NOW()
WHERE setting_key = $1 
RETURNING id, setting_key, setting_value, setting_type, description, is_public, updated_by, created_at, updated_at
`

type UpdateSettingValueParams struct {
	SettingKey   string      `json:"setting_key"`
	SettingValue pgtype.Text `json:"setting_value"`
	UpdatedBy    pgtype.Int8 `json:"updated_by"`
}

// Update setting value
func (q *Queries) UpdateSettingValue(ctx context.Context, arg UpdateSettingValueParams) (SystemSetting, error) {
	row := q.db.QueryRow(ctx, updateSettingValue, arg.SettingKey, arg.SettingValue, arg.UpdatedBy)
	var i SystemSetting
	err := row.Scan(
		&i.ID,
		&i.SettingKey,
		&i.SettingValue,
		&i.SettingType,
		&i.Description,
		&i.IsPublic,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSettingVisibility = `-- name: UpdateSettingVisibility :exec
UPDATE system_settings 
SET is_public = $2, updated_by = $3, updated_at = NOW()
WHERE setting_key = $1
`

type UpdateSettingVisibilityParams struct {
	SettingKey string      `json:"setting_key"`
	IsPublic   pgtype.Bool `json:"is_public"`
	UpdatedBy  pgtype.Int8 `json:"updated_by"`
}

// Update setting visibility
func (q *Queries) UpdateSettingVisibility(ctx context.Context, arg UpdateSettingVisibilityParams) error {
	_, err := q.db.Exec(ctx, updateSettingVisibility, arg.SettingKey, arg.IsPublic, arg.UpdatedBy)
	return err
}

const updateSystemSetting = `-- name: UpdateSystemSetting :one
UPDATE system_settings 
SET setting_value = $2, setting_type = $3, description = $4, 
    is_public = $5, updated_by = $6, updated_at = NOW()
WHERE setting_key = $1 
RETURNING id, setting_key, setting_value, setting_type, description, is_public, updated_by, created_at, updated_at
`

type UpdateSystemSettingParams struct {
	SettingKey   string              `json:"setting_key"`
	SettingValue pgtype.Text         `json:"setting_value"`
	SettingType  NullSettingTypeEnum `json:"setting_type"`
	Description  pgtype.Text         `json:"description"`
	IsPublic     pgtype.Bool         `json:"is_public"`
	UpdatedBy    pgtype.Int8         `json:"updated_by"`
}

// Update system setting
func (q *Queries) UpdateSystemSetting(ctx context.Context, arg UpdateSystemSettingParams) (SystemSetting, error) {
	row := q.db.QueryRow(ctx, updateSystemSetting,
		arg.SettingKey,
		arg.SettingValue,
		arg.SettingType,
		arg.Description,
		arg.IsPublic,
		arg.UpdatedBy,
	)
	var i SystemSetting
	err := row.Scan(
		&i.ID,
		&i.SettingKey,
		&i.SettingValue,
		&i.SettingType,
		&i.Description,
		&i.IsPublic,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
