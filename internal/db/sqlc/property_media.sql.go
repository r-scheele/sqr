// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: property_media.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPropertyMedia = `-- name: CountPropertyMedia :one
SELECT COUNT(*) FROM property_media 
WHERE property_id = $1
`

// Count media for property
func (q *Queries) CountPropertyMedia(ctx context.Context, propertyID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countPropertyMedia, propertyID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countPropertyMediaByType = `-- name: CountPropertyMediaByType :one
SELECT COUNT(*) FROM property_media 
WHERE property_id = $1 AND media_type = $2
`

type CountPropertyMediaByTypeParams struct {
	PropertyID int64         `json:"property_id"`
	MediaType  MediaTypeEnum `json:"media_type"`
}

// Count media by type for property
func (q *Queries) CountPropertyMediaByType(ctx context.Context, arg CountPropertyMediaByTypeParams) (int64, error) {
	row := q.db.QueryRow(ctx, countPropertyMediaByType, arg.PropertyID, arg.MediaType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPropertyMedia = `-- name: CreatePropertyMedia :one
INSERT INTO property_media (
  property_id, media_type, media_url, thumbnail_url, caption, display_order, is_primary
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, property_id, media_type, media_url, thumbnail_url, caption, display_order, is_primary, created_at
`

type CreatePropertyMediaParams struct {
	PropertyID   int64         `json:"property_id"`
	MediaType    MediaTypeEnum `json:"media_type"`
	MediaUrl     string        `json:"media_url"`
	ThumbnailUrl pgtype.Text   `json:"thumbnail_url"`
	Caption      pgtype.Text   `json:"caption"`
	DisplayOrder pgtype.Int4   `json:"display_order"`
	IsPrimary    pgtype.Bool   `json:"is_primary"`
}

// Create property media
func (q *Queries) CreatePropertyMedia(ctx context.Context, arg CreatePropertyMediaParams) (PropertyMedium, error) {
	row := q.db.QueryRow(ctx, createPropertyMedia,
		arg.PropertyID,
		arg.MediaType,
		arg.MediaUrl,
		arg.ThumbnailUrl,
		arg.Caption,
		arg.DisplayOrder,
		arg.IsPrimary,
	)
	var i PropertyMedium
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.MediaType,
		&i.MediaUrl,
		&i.ThumbnailUrl,
		&i.Caption,
		&i.DisplayOrder,
		&i.IsPrimary,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAllPropertyMedia = `-- name: DeleteAllPropertyMedia :exec
DELETE FROM property_media 
WHERE property_id = $1
`

// Delete all media for property
func (q *Queries) DeleteAllPropertyMedia(ctx context.Context, propertyID int64) error {
	_, err := q.db.Exec(ctx, deleteAllPropertyMedia, propertyID)
	return err
}

const deletePropertyMedia = `-- name: DeletePropertyMedia :exec
DELETE FROM property_media 
WHERE id = $1
`

// Delete property media
func (q *Queries) DeletePropertyMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePropertyMedia, id)
	return err
}

const getPrimaryPropertyMedia = `-- name: GetPrimaryPropertyMedia :one
SELECT id, property_id, media_type, media_url, thumbnail_url, caption, display_order, is_primary, created_at FROM property_media 
WHERE property_id = $1 AND is_primary = true
LIMIT 1
`

// Get primary media for property
func (q *Queries) GetPrimaryPropertyMedia(ctx context.Context, propertyID int64) (PropertyMedium, error) {
	row := q.db.QueryRow(ctx, getPrimaryPropertyMedia, propertyID)
	var i PropertyMedium
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.MediaType,
		&i.MediaUrl,
		&i.ThumbnailUrl,
		&i.Caption,
		&i.DisplayOrder,
		&i.IsPrimary,
		&i.CreatedAt,
	)
	return i, err
}

const getPropertyMediaByID = `-- name: GetPropertyMediaByID :one
SELECT id, property_id, media_type, media_url, thumbnail_url, caption, display_order, is_primary, created_at FROM property_media 
WHERE id = $1 LIMIT 1
`

// Get property media by ID
func (q *Queries) GetPropertyMediaByID(ctx context.Context, id int64) (PropertyMedium, error) {
	row := q.db.QueryRow(ctx, getPropertyMediaByID, id)
	var i PropertyMedium
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.MediaType,
		&i.MediaUrl,
		&i.ThumbnailUrl,
		&i.Caption,
		&i.DisplayOrder,
		&i.IsPrimary,
		&i.CreatedAt,
	)
	return i, err
}

const getPropertyMediaByPropertyID = `-- name: GetPropertyMediaByPropertyID :many
SELECT id, property_id, media_type, media_url, thumbnail_url, caption, display_order, is_primary, created_at FROM property_media 
WHERE property_id = $1
ORDER BY display_order ASC, created_at ASC
`

// Get all media for property
func (q *Queries) GetPropertyMediaByPropertyID(ctx context.Context, propertyID int64) ([]PropertyMedium, error) {
	rows, err := q.db.Query(ctx, getPropertyMediaByPropertyID, propertyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PropertyMedium{}
	for rows.Next() {
		var i PropertyMedium
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.MediaType,
			&i.MediaUrl,
			&i.ThumbnailUrl,
			&i.Caption,
			&i.DisplayOrder,
			&i.IsPrimary,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPropertyMediaByType = `-- name: GetPropertyMediaByType :many
SELECT id, property_id, media_type, media_url, thumbnail_url, caption, display_order, is_primary, created_at FROM property_media 
WHERE property_id = $1 AND media_type = $2
ORDER BY display_order ASC, created_at ASC
`

type GetPropertyMediaByTypeParams struct {
	PropertyID int64         `json:"property_id"`
	MediaType  MediaTypeEnum `json:"media_type"`
}

// Get media by type for property
func (q *Queries) GetPropertyMediaByType(ctx context.Context, arg GetPropertyMediaByTypeParams) ([]PropertyMedium, error) {
	rows, err := q.db.Query(ctx, getPropertyMediaByType, arg.PropertyID, arg.MediaType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PropertyMedium{}
	for rows.Next() {
		var i PropertyMedium
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.MediaType,
			&i.MediaUrl,
			&i.ThumbnailUrl,
			&i.Caption,
			&i.DisplayOrder,
			&i.IsPrimary,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setPrimaryMedia = `-- name: SetPrimaryMedia :exec
UPDATE property_media 
SET is_primary = CASE WHEN id = $2 THEN true ELSE false END
WHERE property_id = $1
`

type SetPrimaryMediaParams struct {
	PropertyID int64 `json:"property_id"`
	ID         int64 `json:"id"`
}

// Set primary media
func (q *Queries) SetPrimaryMedia(ctx context.Context, arg SetPrimaryMediaParams) error {
	_, err := q.db.Exec(ctx, setPrimaryMedia, arg.PropertyID, arg.ID)
	return err
}

const updateMediaCaption = `-- name: UpdateMediaCaption :exec
UPDATE property_media 
SET caption = $2
WHERE id = $1
`

type UpdateMediaCaptionParams struct {
	ID      int64       `json:"id"`
	Caption pgtype.Text `json:"caption"`
}

// Update media caption
func (q *Queries) UpdateMediaCaption(ctx context.Context, arg UpdateMediaCaptionParams) error {
	_, err := q.db.Exec(ctx, updateMediaCaption, arg.ID, arg.Caption)
	return err
}

const updateMediaDisplayOrder = `-- name: UpdateMediaDisplayOrder :exec
UPDATE property_media 
SET display_order = $2
WHERE id = $1
`

type UpdateMediaDisplayOrderParams struct {
	ID           int64       `json:"id"`
	DisplayOrder pgtype.Int4 `json:"display_order"`
}

// Update media display order
func (q *Queries) UpdateMediaDisplayOrder(ctx context.Context, arg UpdateMediaDisplayOrderParams) error {
	_, err := q.db.Exec(ctx, updateMediaDisplayOrder, arg.ID, arg.DisplayOrder)
	return err
}

const updatePropertyMedia = `-- name: UpdatePropertyMedia :one
UPDATE property_media 
SET media_url = $2, thumbnail_url = $3, caption = $4, display_order = $5
WHERE id = $1 
RETURNING id, property_id, media_type, media_url, thumbnail_url, caption, display_order, is_primary, created_at
`

type UpdatePropertyMediaParams struct {
	ID           int64       `json:"id"`
	MediaUrl     string      `json:"media_url"`
	ThumbnailUrl pgtype.Text `json:"thumbnail_url"`
	Caption      pgtype.Text `json:"caption"`
	DisplayOrder pgtype.Int4 `json:"display_order"`
}

// Update property media
func (q *Queries) UpdatePropertyMedia(ctx context.Context, arg UpdatePropertyMediaParams) (PropertyMedium, error) {
	row := q.db.QueryRow(ctx, updatePropertyMedia,
		arg.ID,
		arg.MediaUrl,
		arg.ThumbnailUrl,
		arg.Caption,
		arg.DisplayOrder,
	)
	var i PropertyMedium
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.MediaType,
		&i.MediaUrl,
		&i.ThumbnailUrl,
		&i.Caption,
		&i.DisplayOrder,
		&i.IsPrimary,
		&i.CreatedAt,
	)
	return i, err
}
