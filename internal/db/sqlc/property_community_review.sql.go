// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: property_community_review.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPropertyReviews = `-- name: CountPropertyReviews :one
SELECT COUNT(*) FROM property_community_reviews 
WHERE property_id = $1
`

// Count reviews for property
func (q *Queries) CountPropertyReviews(ctx context.Context, propertyID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countPropertyReviews, propertyID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countVerifiedPropertyReviews = `-- name: CountVerifiedPropertyReviews :one
SELECT COUNT(*) FROM property_community_reviews 
WHERE property_id = $1 AND is_verified = true
`

// Count verified reviews for property
func (q *Queries) CountVerifiedPropertyReviews(ctx context.Context, propertyID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countVerifiedPropertyReviews, propertyID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPropertyCommunityReview = `-- name: CreatePropertyCommunityReview :one
INSERT INTO property_community_reviews (
  property_id, user_id, electricity_rating, water_rating, security_rating,
  noise_level, road_condition, flooding_risk, internet_connectivity,
  proximity_to_amenities, comment
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, property_id, user_id, electricity_rating, water_rating, security_rating, noise_level, road_condition, flooding_risk, internet_connectivity, proximity_to_amenities, comment, is_verified, helpful_votes, created_at, updated_at
`

type CreatePropertyCommunityReviewParams struct {
	PropertyID           int64       `json:"property_id"`
	UserID               int64       `json:"user_id"`
	ElectricityRating    pgtype.Int4 `json:"electricity_rating"`
	WaterRating          pgtype.Int4 `json:"water_rating"`
	SecurityRating       pgtype.Int4 `json:"security_rating"`
	NoiseLevel           pgtype.Int4 `json:"noise_level"`
	RoadCondition        pgtype.Int4 `json:"road_condition"`
	FloodingRisk         pgtype.Int4 `json:"flooding_risk"`
	InternetConnectivity pgtype.Int4 `json:"internet_connectivity"`
	ProximityToAmenities pgtype.Int4 `json:"proximity_to_amenities"`
	Comment              pgtype.Text `json:"comment"`
}

// Create property community review
func (q *Queries) CreatePropertyCommunityReview(ctx context.Context, arg CreatePropertyCommunityReviewParams) (PropertyCommunityReview, error) {
	row := q.db.QueryRow(ctx, createPropertyCommunityReview,
		arg.PropertyID,
		arg.UserID,
		arg.ElectricityRating,
		arg.WaterRating,
		arg.SecurityRating,
		arg.NoiseLevel,
		arg.RoadCondition,
		arg.FloodingRisk,
		arg.InternetConnectivity,
		arg.ProximityToAmenities,
		arg.Comment,
	)
	var i PropertyCommunityReview
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.UserID,
		&i.ElectricityRating,
		&i.WaterRating,
		&i.SecurityRating,
		&i.NoiseLevel,
		&i.RoadCondition,
		&i.FloodingRisk,
		&i.InternetConnectivity,
		&i.ProximityToAmenities,
		&i.Comment,
		&i.IsVerified,
		&i.HelpfulVotes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const decrementReviewHelpfulVotes = `-- name: DecrementReviewHelpfulVotes :exec
UPDATE property_community_reviews 
SET helpful_votes = GREATEST(helpful_votes - 1, 0)
WHERE id = $1
`

// Decrement helpful votes
func (q *Queries) DecrementReviewHelpfulVotes(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, decrementReviewHelpfulVotes, id)
	return err
}

const deletePropertyCommunityReview = `-- name: DeletePropertyCommunityReview :exec
DELETE FROM property_community_reviews 
WHERE id = $1
`

// Delete property community review
func (q *Queries) DeletePropertyCommunityReview(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePropertyCommunityReview, id)
	return err
}

const getPropertyAverageRatings = `-- name: GetPropertyAverageRatings :one
SELECT 
  ROUND(AVG(electricity_rating), 2) as avg_electricity,
  ROUND(AVG(water_rating), 2) as avg_water,
  ROUND(AVG(security_rating), 2) as avg_security,
  ROUND(AVG(noise_level), 2) as avg_noise,
  ROUND(AVG(road_condition), 2) as avg_road,
  ROUND(AVG(flooding_risk), 2) as avg_flooding,
  ROUND(AVG(internet_connectivity), 2) as avg_internet,
  ROUND(AVG(proximity_to_amenities), 2) as avg_amenities,
  COUNT(*) as total_reviews
FROM property_community_reviews 
WHERE property_id = $1 AND is_verified = true
`

type GetPropertyAverageRatingsRow struct {
	AvgElectricity pgtype.Numeric `json:"avg_electricity"`
	AvgWater       pgtype.Numeric `json:"avg_water"`
	AvgSecurity    pgtype.Numeric `json:"avg_security"`
	AvgNoise       pgtype.Numeric `json:"avg_noise"`
	AvgRoad        pgtype.Numeric `json:"avg_road"`
	AvgFlooding    pgtype.Numeric `json:"avg_flooding"`
	AvgInternet    pgtype.Numeric `json:"avg_internet"`
	AvgAmenities   pgtype.Numeric `json:"avg_amenities"`
	TotalReviews   int64          `json:"total_reviews"`
}

// Get average ratings for property
func (q *Queries) GetPropertyAverageRatings(ctx context.Context, propertyID int64) (GetPropertyAverageRatingsRow, error) {
	row := q.db.QueryRow(ctx, getPropertyAverageRatings, propertyID)
	var i GetPropertyAverageRatingsRow
	err := row.Scan(
		&i.AvgElectricity,
		&i.AvgWater,
		&i.AvgSecurity,
		&i.AvgNoise,
		&i.AvgRoad,
		&i.AvgFlooding,
		&i.AvgInternet,
		&i.AvgAmenities,
		&i.TotalReviews,
	)
	return i, err
}

const getPropertyCommunityReviewByID = `-- name: GetPropertyCommunityReviewByID :one
SELECT id, property_id, user_id, electricity_rating, water_rating, security_rating, noise_level, road_condition, flooding_risk, internet_connectivity, proximity_to_amenities, comment, is_verified, helpful_votes, created_at, updated_at FROM property_community_reviews 
WHERE id = $1 LIMIT 1
`

// Get property community review by ID
func (q *Queries) GetPropertyCommunityReviewByID(ctx context.Context, id int64) (PropertyCommunityReview, error) {
	row := q.db.QueryRow(ctx, getPropertyCommunityReviewByID, id)
	var i PropertyCommunityReview
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.UserID,
		&i.ElectricityRating,
		&i.WaterRating,
		&i.SecurityRating,
		&i.NoiseLevel,
		&i.RoadCondition,
		&i.FloodingRisk,
		&i.InternetConnectivity,
		&i.ProximityToAmenities,
		&i.Comment,
		&i.IsVerified,
		&i.HelpfulVotes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPropertyCommunityReviews = `-- name: GetPropertyCommunityReviews :many
SELECT pcr.id, pcr.property_id, pcr.user_id, pcr.electricity_rating, pcr.water_rating, pcr.security_rating, pcr.noise_level, pcr.road_condition, pcr.flooding_risk, pcr.internet_connectivity, pcr.proximity_to_amenities, pcr.comment, pcr.is_verified, pcr.helpful_votes, pcr.created_at, pcr.updated_at, u.first_name, u.last_name
FROM property_community_reviews pcr
JOIN users u ON pcr.user_id = u.id
WHERE pcr.property_id = $1
ORDER BY pcr.helpful_votes DESC, pcr.created_at DESC
LIMIT $2 OFFSET $3
`

type GetPropertyCommunityReviewsParams struct {
	PropertyID int64 `json:"property_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

type GetPropertyCommunityReviewsRow struct {
	ID                   int64              `json:"id"`
	PropertyID           int64              `json:"property_id"`
	UserID               int64              `json:"user_id"`
	ElectricityRating    pgtype.Int4        `json:"electricity_rating"`
	WaterRating          pgtype.Int4        `json:"water_rating"`
	SecurityRating       pgtype.Int4        `json:"security_rating"`
	NoiseLevel           pgtype.Int4        `json:"noise_level"`
	RoadCondition        pgtype.Int4        `json:"road_condition"`
	FloodingRisk         pgtype.Int4        `json:"flooding_risk"`
	InternetConnectivity pgtype.Int4        `json:"internet_connectivity"`
	ProximityToAmenities pgtype.Int4        `json:"proximity_to_amenities"`
	Comment              pgtype.Text        `json:"comment"`
	IsVerified           pgtype.Bool        `json:"is_verified"`
	HelpfulVotes         pgtype.Int4        `json:"helpful_votes"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	FirstName            string             `json:"first_name"`
	LastName             string             `json:"last_name"`
}

// Get reviews for property
func (q *Queries) GetPropertyCommunityReviews(ctx context.Context, arg GetPropertyCommunityReviewsParams) ([]GetPropertyCommunityReviewsRow, error) {
	rows, err := q.db.Query(ctx, getPropertyCommunityReviews, arg.PropertyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPropertyCommunityReviewsRow{}
	for rows.Next() {
		var i GetPropertyCommunityReviewsRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.UserID,
			&i.ElectricityRating,
			&i.WaterRating,
			&i.SecurityRating,
			&i.NoiseLevel,
			&i.RoadCondition,
			&i.FloodingRisk,
			&i.InternetConnectivity,
			&i.ProximityToAmenities,
			&i.Comment,
			&i.IsVerified,
			&i.HelpfulVotes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPropertyReview = `-- name: GetUserPropertyReview :one
SELECT id, property_id, user_id, electricity_rating, water_rating, security_rating, noise_level, road_condition, flooding_risk, internet_connectivity, proximity_to_amenities, comment, is_verified, helpful_votes, created_at, updated_at FROM property_community_reviews 
WHERE property_id = $1 AND user_id = $2
LIMIT 1
`

type GetUserPropertyReviewParams struct {
	PropertyID int64 `json:"property_id"`
	UserID     int64 `json:"user_id"`
}

// Get user's review for property
func (q *Queries) GetUserPropertyReview(ctx context.Context, arg GetUserPropertyReviewParams) (PropertyCommunityReview, error) {
	row := q.db.QueryRow(ctx, getUserPropertyReview, arg.PropertyID, arg.UserID)
	var i PropertyCommunityReview
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.UserID,
		&i.ElectricityRating,
		&i.WaterRating,
		&i.SecurityRating,
		&i.NoiseLevel,
		&i.RoadCondition,
		&i.FloodingRisk,
		&i.InternetConnectivity,
		&i.ProximityToAmenities,
		&i.Comment,
		&i.IsVerified,
		&i.HelpfulVotes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVerifiedPropertyCommunityReviews = `-- name: GetVerifiedPropertyCommunityReviews :many
SELECT pcr.id, pcr.property_id, pcr.user_id, pcr.electricity_rating, pcr.water_rating, pcr.security_rating, pcr.noise_level, pcr.road_condition, pcr.flooding_risk, pcr.internet_connectivity, pcr.proximity_to_amenities, pcr.comment, pcr.is_verified, pcr.helpful_votes, pcr.created_at, pcr.updated_at, u.first_name, u.last_name
FROM property_community_reviews pcr
JOIN users u ON pcr.user_id = u.id
WHERE pcr.property_id = $1 AND pcr.is_verified = true
ORDER BY pcr.helpful_votes DESC, pcr.created_at DESC
LIMIT $2 OFFSET $3
`

type GetVerifiedPropertyCommunityReviewsParams struct {
	PropertyID int64 `json:"property_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

type GetVerifiedPropertyCommunityReviewsRow struct {
	ID                   int64              `json:"id"`
	PropertyID           int64              `json:"property_id"`
	UserID               int64              `json:"user_id"`
	ElectricityRating    pgtype.Int4        `json:"electricity_rating"`
	WaterRating          pgtype.Int4        `json:"water_rating"`
	SecurityRating       pgtype.Int4        `json:"security_rating"`
	NoiseLevel           pgtype.Int4        `json:"noise_level"`
	RoadCondition        pgtype.Int4        `json:"road_condition"`
	FloodingRisk         pgtype.Int4        `json:"flooding_risk"`
	InternetConnectivity pgtype.Int4        `json:"internet_connectivity"`
	ProximityToAmenities pgtype.Int4        `json:"proximity_to_amenities"`
	Comment              pgtype.Text        `json:"comment"`
	IsVerified           pgtype.Bool        `json:"is_verified"`
	HelpfulVotes         pgtype.Int4        `json:"helpful_votes"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	FirstName            string             `json:"first_name"`
	LastName             string             `json:"last_name"`
}

// Get verified reviews for property
func (q *Queries) GetVerifiedPropertyCommunityReviews(ctx context.Context, arg GetVerifiedPropertyCommunityReviewsParams) ([]GetVerifiedPropertyCommunityReviewsRow, error) {
	rows, err := q.db.Query(ctx, getVerifiedPropertyCommunityReviews, arg.PropertyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetVerifiedPropertyCommunityReviewsRow{}
	for rows.Next() {
		var i GetVerifiedPropertyCommunityReviewsRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.UserID,
			&i.ElectricityRating,
			&i.WaterRating,
			&i.SecurityRating,
			&i.NoiseLevel,
			&i.RoadCondition,
			&i.FloodingRisk,
			&i.InternetConnectivity,
			&i.ProximityToAmenities,
			&i.Comment,
			&i.IsVerified,
			&i.HelpfulVotes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementReviewHelpfulVotes = `-- name: IncrementReviewHelpfulVotes :exec
UPDATE property_community_reviews 
SET helpful_votes = helpful_votes + 1
WHERE id = $1
`

// Increment helpful votes
func (q *Queries) IncrementReviewHelpfulVotes(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, incrementReviewHelpfulVotes, id)
	return err
}

const listRecentPropertyReviews = `-- name: ListRecentPropertyReviews :many
SELECT pcr.id, pcr.property_id, pcr.user_id, pcr.electricity_rating, pcr.water_rating, pcr.security_rating, pcr.noise_level, pcr.road_condition, pcr.flooding_risk, pcr.internet_connectivity, pcr.proximity_to_amenities, pcr.comment, pcr.is_verified, pcr.helpful_votes, pcr.created_at, pcr.updated_at, u.first_name, u.last_name, p.title
FROM property_community_reviews pcr
JOIN users u ON pcr.user_id = u.id
JOIN properties p ON pcr.property_id = p.id
ORDER BY pcr.created_at DESC
LIMIT $1 OFFSET $2
`

type ListRecentPropertyReviewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListRecentPropertyReviewsRow struct {
	ID                   int64              `json:"id"`
	PropertyID           int64              `json:"property_id"`
	UserID               int64              `json:"user_id"`
	ElectricityRating    pgtype.Int4        `json:"electricity_rating"`
	WaterRating          pgtype.Int4        `json:"water_rating"`
	SecurityRating       pgtype.Int4        `json:"security_rating"`
	NoiseLevel           pgtype.Int4        `json:"noise_level"`
	RoadCondition        pgtype.Int4        `json:"road_condition"`
	FloodingRisk         pgtype.Int4        `json:"flooding_risk"`
	InternetConnectivity pgtype.Int4        `json:"internet_connectivity"`
	ProximityToAmenities pgtype.Int4        `json:"proximity_to_amenities"`
	Comment              pgtype.Text        `json:"comment"`
	IsVerified           pgtype.Bool        `json:"is_verified"`
	HelpfulVotes         pgtype.Int4        `json:"helpful_votes"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	FirstName            string             `json:"first_name"`
	LastName             string             `json:"last_name"`
	Title                string             `json:"title"`
}

// List recent reviews
func (q *Queries) ListRecentPropertyReviews(ctx context.Context, arg ListRecentPropertyReviewsParams) ([]ListRecentPropertyReviewsRow, error) {
	rows, err := q.db.Query(ctx, listRecentPropertyReviews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRecentPropertyReviewsRow{}
	for rows.Next() {
		var i ListRecentPropertyReviewsRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.UserID,
			&i.ElectricityRating,
			&i.WaterRating,
			&i.SecurityRating,
			&i.NoiseLevel,
			&i.RoadCondition,
			&i.FloodingRisk,
			&i.InternetConnectivity,
			&i.ProximityToAmenities,
			&i.Comment,
			&i.IsVerified,
			&i.HelpfulVotes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePropertyCommunityReview = `-- name: UpdatePropertyCommunityReview :one
UPDATE property_community_reviews 
SET electricity_rating = $2, water_rating = $3, security_rating = $4,
    noise_level = $5, road_condition = $6, flooding_risk = $7,
    internet_connectivity = $8, proximity_to_amenities = $9, comment = $10,
    updated_at = NOW()
WHERE id = $1 
RETURNING id, property_id, user_id, electricity_rating, water_rating, security_rating, noise_level, road_condition, flooding_risk, internet_connectivity, proximity_to_amenities, comment, is_verified, helpful_votes, created_at, updated_at
`

type UpdatePropertyCommunityReviewParams struct {
	ID                   int64       `json:"id"`
	ElectricityRating    pgtype.Int4 `json:"electricity_rating"`
	WaterRating          pgtype.Int4 `json:"water_rating"`
	SecurityRating       pgtype.Int4 `json:"security_rating"`
	NoiseLevel           pgtype.Int4 `json:"noise_level"`
	RoadCondition        pgtype.Int4 `json:"road_condition"`
	FloodingRisk         pgtype.Int4 `json:"flooding_risk"`
	InternetConnectivity pgtype.Int4 `json:"internet_connectivity"`
	ProximityToAmenities pgtype.Int4 `json:"proximity_to_amenities"`
	Comment              pgtype.Text `json:"comment"`
}

// Update property community review
func (q *Queries) UpdatePropertyCommunityReview(ctx context.Context, arg UpdatePropertyCommunityReviewParams) (PropertyCommunityReview, error) {
	row := q.db.QueryRow(ctx, updatePropertyCommunityReview,
		arg.ID,
		arg.ElectricityRating,
		arg.WaterRating,
		arg.SecurityRating,
		arg.NoiseLevel,
		arg.RoadCondition,
		arg.FloodingRisk,
		arg.InternetConnectivity,
		arg.ProximityToAmenities,
		arg.Comment,
	)
	var i PropertyCommunityReview
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.UserID,
		&i.ElectricityRating,
		&i.WaterRating,
		&i.SecurityRating,
		&i.NoiseLevel,
		&i.RoadCondition,
		&i.FloodingRisk,
		&i.InternetConnectivity,
		&i.ProximityToAmenities,
		&i.Comment,
		&i.IsVerified,
		&i.HelpfulVotes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const verifyPropertyReview = `-- name: VerifyPropertyReview :exec
UPDATE property_community_reviews 
SET is_verified = true, updated_at = NOW()
WHERE id = $1
`

// Verify property review
func (q *Queries) VerifyPropertyReview(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, verifyPropertyReview, id)
	return err
}
