// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: tenant_profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTenantProfile = `-- name: CreateTenantProfile :one
INSERT INTO tenant_profiles (
  user_id, preferred_locations, budget_min, budget_max, bedrooms_min, bedrooms_max,
  preferred_amenities, occupation, employer, monthly_income, previous_address,
  "references", pet_friendly
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
) RETURNING id, user_id, preferred_locations, budget_min, budget_max, bedrooms_min, bedrooms_max, preferred_amenities, occupation, employer, monthly_income, previous_address, "references", pet_friendly, created_at, updated_at
`

type CreateTenantProfileParams struct {
	UserID             int64          `json:"user_id"`
	PreferredLocations pgtype.Text    `json:"preferred_locations"`
	BudgetMin          pgtype.Numeric `json:"budget_min"`
	BudgetMax          pgtype.Numeric `json:"budget_max"`
	BedroomsMin        pgtype.Int4    `json:"bedrooms_min"`
	BedroomsMax        pgtype.Int4    `json:"bedrooms_max"`
	PreferredAmenities pgtype.Text    `json:"preferred_amenities"`
	Occupation         pgtype.Text    `json:"occupation"`
	Employer           pgtype.Text    `json:"employer"`
	MonthlyIncome      pgtype.Numeric `json:"monthly_income"`
	PreviousAddress    pgtype.Text    `json:"previous_address"`
	References         pgtype.Text    `json:"references"`
	PetFriendly        pgtype.Bool    `json:"pet_friendly"`
}

// Create a new tenant profile
func (q *Queries) CreateTenantProfile(ctx context.Context, arg CreateTenantProfileParams) (TenantProfile, error) {
	row := q.db.QueryRow(ctx, createTenantProfile,
		arg.UserID,
		arg.PreferredLocations,
		arg.BudgetMin,
		arg.BudgetMax,
		arg.BedroomsMin,
		arg.BedroomsMax,
		arg.PreferredAmenities,
		arg.Occupation,
		arg.Employer,
		arg.MonthlyIncome,
		arg.PreviousAddress,
		arg.References,
		arg.PetFriendly,
	)
	var i TenantProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PreferredLocations,
		&i.BudgetMin,
		&i.BudgetMax,
		&i.BedroomsMin,
		&i.BedroomsMax,
		&i.PreferredAmenities,
		&i.Occupation,
		&i.Employer,
		&i.MonthlyIncome,
		&i.PreviousAddress,
		&i.References,
		&i.PetFriendly,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTenantProfile = `-- name: DeleteTenantProfile :exec
DELETE FROM tenant_profiles 
WHERE user_id = $1
`

// Delete tenant profile
func (q *Queries) DeleteTenantProfile(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteTenantProfile, userID)
	return err
}

const getTenantProfileByID = `-- name: GetTenantProfileByID :one
SELECT id, user_id, preferred_locations, budget_min, budget_max, bedrooms_min, bedrooms_max, preferred_amenities, occupation, employer, monthly_income, previous_address, "references", pet_friendly, created_at, updated_at FROM tenant_profiles 
WHERE id = $1 LIMIT 1
`

// Get tenant profile by ID
func (q *Queries) GetTenantProfileByID(ctx context.Context, id int64) (TenantProfile, error) {
	row := q.db.QueryRow(ctx, getTenantProfileByID, id)
	var i TenantProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PreferredLocations,
		&i.BudgetMin,
		&i.BudgetMax,
		&i.BedroomsMin,
		&i.BedroomsMax,
		&i.PreferredAmenities,
		&i.Occupation,
		&i.Employer,
		&i.MonthlyIncome,
		&i.PreviousAddress,
		&i.References,
		&i.PetFriendly,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenantProfileByUserID = `-- name: GetTenantProfileByUserID :one
SELECT id, user_id, preferred_locations, budget_min, budget_max, bedrooms_min, bedrooms_max, preferred_amenities, occupation, employer, monthly_income, previous_address, "references", pet_friendly, created_at, updated_at FROM tenant_profiles 
WHERE user_id = $1 LIMIT 1
`

// Get tenant profile by user ID
func (q *Queries) GetTenantProfileByUserID(ctx context.Context, userID int64) (TenantProfile, error) {
	row := q.db.QueryRow(ctx, getTenantProfileByUserID, userID)
	var i TenantProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PreferredLocations,
		&i.BudgetMin,
		&i.BudgetMax,
		&i.BedroomsMin,
		&i.BedroomsMax,
		&i.PreferredAmenities,
		&i.Occupation,
		&i.Employer,
		&i.MonthlyIncome,
		&i.PreviousAddress,
		&i.References,
		&i.PetFriendly,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const searchTenantProfiles = `-- name: SearchTenantProfiles :many
SELECT tp.id, tp.user_id, tp.preferred_locations, tp.budget_min, tp.budget_max, tp.bedrooms_min, tp.bedrooms_max, tp.preferred_amenities, tp.occupation, tp.employer, tp.monthly_income, tp.previous_address, tp."references", tp.pet_friendly, tp.created_at, tp.updated_at, u.first_name, u.last_name, u.email 
FROM tenant_profiles tp
JOIN users u ON tp.user_id = u.id
WHERE ($1::decimal IS NULL OR tp.budget_min >= $1)
  AND ($2::decimal IS NULL OR tp.budget_max <= $2)
  AND ($3::integer IS NULL OR tp.bedrooms_min >= $3)
  AND ($4::integer IS NULL OR tp.bedrooms_max <= $4)
  AND u.is_active = true
ORDER BY tp.updated_at DESC
LIMIT $5 OFFSET $6
`

type SearchTenantProfilesParams struct {
	Column1 pgtype.Numeric `json:"column_1"`
	Column2 pgtype.Numeric `json:"column_2"`
	Column3 int32          `json:"column_3"`
	Column4 int32          `json:"column_4"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

type SearchTenantProfilesRow struct {
	ID                 int64              `json:"id"`
	UserID             int64              `json:"user_id"`
	PreferredLocations pgtype.Text        `json:"preferred_locations"`
	BudgetMin          pgtype.Numeric     `json:"budget_min"`
	BudgetMax          pgtype.Numeric     `json:"budget_max"`
	BedroomsMin        pgtype.Int4        `json:"bedrooms_min"`
	BedroomsMax        pgtype.Int4        `json:"bedrooms_max"`
	PreferredAmenities pgtype.Text        `json:"preferred_amenities"`
	Occupation         pgtype.Text        `json:"occupation"`
	Employer           pgtype.Text        `json:"employer"`
	MonthlyIncome      pgtype.Numeric     `json:"monthly_income"`
	PreviousAddress    pgtype.Text        `json:"previous_address"`
	References         pgtype.Text        `json:"references"`
	PetFriendly        pgtype.Bool        `json:"pet_friendly"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	FirstName          string             `json:"first_name"`
	LastName           string             `json:"last_name"`
	Email              string             `json:"email"`
}

// Search tenant profiles by criteria
func (q *Queries) SearchTenantProfiles(ctx context.Context, arg SearchTenantProfilesParams) ([]SearchTenantProfilesRow, error) {
	rows, err := q.db.Query(ctx, searchTenantProfiles,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchTenantProfilesRow{}
	for rows.Next() {
		var i SearchTenantProfilesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PreferredLocations,
			&i.BudgetMin,
			&i.BudgetMax,
			&i.BedroomsMin,
			&i.BedroomsMax,
			&i.PreferredAmenities,
			&i.Occupation,
			&i.Employer,
			&i.MonthlyIncome,
			&i.PreviousAddress,
			&i.References,
			&i.PetFriendly,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenantBudget = `-- name: UpdateTenantBudget :one
UPDATE tenant_profiles 
SET budget_min = $2, budget_max = $3, updated_at = NOW()
WHERE user_id = $1 
RETURNING id, user_id, preferred_locations, budget_min, budget_max, bedrooms_min, bedrooms_max, preferred_amenities, occupation, employer, monthly_income, previous_address, "references", pet_friendly, created_at, updated_at
`

type UpdateTenantBudgetParams struct {
	UserID    int64          `json:"user_id"`
	BudgetMin pgtype.Numeric `json:"budget_min"`
	BudgetMax pgtype.Numeric `json:"budget_max"`
}

// Update tenant budget
func (q *Queries) UpdateTenantBudget(ctx context.Context, arg UpdateTenantBudgetParams) (TenantProfile, error) {
	row := q.db.QueryRow(ctx, updateTenantBudget, arg.UserID, arg.BudgetMin, arg.BudgetMax)
	var i TenantProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PreferredLocations,
		&i.BudgetMin,
		&i.BudgetMax,
		&i.BedroomsMin,
		&i.BedroomsMax,
		&i.PreferredAmenities,
		&i.Occupation,
		&i.Employer,
		&i.MonthlyIncome,
		&i.PreviousAddress,
		&i.References,
		&i.PetFriendly,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTenantEmploymentDetails = `-- name: UpdateTenantEmploymentDetails :one
UPDATE tenant_profiles 
SET occupation = $2, employer = $3, monthly_income = $4, updated_at = NOW()
WHERE user_id = $1 
RETURNING id, user_id, preferred_locations, budget_min, budget_max, bedrooms_min, bedrooms_max, preferred_amenities, occupation, employer, monthly_income, previous_address, "references", pet_friendly, created_at, updated_at
`

type UpdateTenantEmploymentDetailsParams struct {
	UserID        int64          `json:"user_id"`
	Occupation    pgtype.Text    `json:"occupation"`
	Employer      pgtype.Text    `json:"employer"`
	MonthlyIncome pgtype.Numeric `json:"monthly_income"`
}

// Update tenant employment details
func (q *Queries) UpdateTenantEmploymentDetails(ctx context.Context, arg UpdateTenantEmploymentDetailsParams) (TenantProfile, error) {
	row := q.db.QueryRow(ctx, updateTenantEmploymentDetails,
		arg.UserID,
		arg.Occupation,
		arg.Employer,
		arg.MonthlyIncome,
	)
	var i TenantProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PreferredLocations,
		&i.BudgetMin,
		&i.BudgetMax,
		&i.BedroomsMin,
		&i.BedroomsMax,
		&i.PreferredAmenities,
		&i.Occupation,
		&i.Employer,
		&i.MonthlyIncome,
		&i.PreviousAddress,
		&i.References,
		&i.PetFriendly,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTenantPreferences = `-- name: UpdateTenantPreferences :one
UPDATE tenant_profiles 
SET preferred_locations = $2, bedrooms_min = $3, bedrooms_max = $4,
    preferred_amenities = $5, pet_friendly = $6, updated_at = NOW()
WHERE user_id = $1 
RETURNING id, user_id, preferred_locations, budget_min, budget_max, bedrooms_min, bedrooms_max, preferred_amenities, occupation, employer, monthly_income, previous_address, "references", pet_friendly, created_at, updated_at
`

type UpdateTenantPreferencesParams struct {
	UserID             int64       `json:"user_id"`
	PreferredLocations pgtype.Text `json:"preferred_locations"`
	BedroomsMin        pgtype.Int4 `json:"bedrooms_min"`
	BedroomsMax        pgtype.Int4 `json:"bedrooms_max"`
	PreferredAmenities pgtype.Text `json:"preferred_amenities"`
	PetFriendly        pgtype.Bool `json:"pet_friendly"`
}

// Update tenant preferences
func (q *Queries) UpdateTenantPreferences(ctx context.Context, arg UpdateTenantPreferencesParams) (TenantProfile, error) {
	row := q.db.QueryRow(ctx, updateTenantPreferences,
		arg.UserID,
		arg.PreferredLocations,
		arg.BedroomsMin,
		arg.BedroomsMax,
		arg.PreferredAmenities,
		arg.PetFriendly,
	)
	var i TenantProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PreferredLocations,
		&i.BudgetMin,
		&i.BudgetMax,
		&i.BedroomsMin,
		&i.BedroomsMax,
		&i.PreferredAmenities,
		&i.Occupation,
		&i.Employer,
		&i.MonthlyIncome,
		&i.PreviousAddress,
		&i.References,
		&i.PetFriendly,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTenantProfile = `-- name: UpdateTenantProfile :one
UPDATE tenant_profiles 
SET preferred_locations = $2, budget_min = $3, budget_max = $4, 
    bedrooms_min = $5, bedrooms_max = $6, preferred_amenities = $7,
    occupation = $8, employer = $9, monthly_income = $10, 
    previous_address = $11, "references" = $12, pet_friendly = $13, 
    updated_at = NOW()
WHERE user_id = $1 
RETURNING id, user_id, preferred_locations, budget_min, budget_max, bedrooms_min, bedrooms_max, preferred_amenities, occupation, employer, monthly_income, previous_address, "references", pet_friendly, created_at, updated_at
`

type UpdateTenantProfileParams struct {
	UserID             int64          `json:"user_id"`
	PreferredLocations pgtype.Text    `json:"preferred_locations"`
	BudgetMin          pgtype.Numeric `json:"budget_min"`
	BudgetMax          pgtype.Numeric `json:"budget_max"`
	BedroomsMin        pgtype.Int4    `json:"bedrooms_min"`
	BedroomsMax        pgtype.Int4    `json:"bedrooms_max"`
	PreferredAmenities pgtype.Text    `json:"preferred_amenities"`
	Occupation         pgtype.Text    `json:"occupation"`
	Employer           pgtype.Text    `json:"employer"`
	MonthlyIncome      pgtype.Numeric `json:"monthly_income"`
	PreviousAddress    pgtype.Text    `json:"previous_address"`
	References         pgtype.Text    `json:"references"`
	PetFriendly        pgtype.Bool    `json:"pet_friendly"`
}

// Update tenant profile
func (q *Queries) UpdateTenantProfile(ctx context.Context, arg UpdateTenantProfileParams) (TenantProfile, error) {
	row := q.db.QueryRow(ctx, updateTenantProfile,
		arg.UserID,
		arg.PreferredLocations,
		arg.BudgetMin,
		arg.BudgetMax,
		arg.BedroomsMin,
		arg.BedroomsMax,
		arg.PreferredAmenities,
		arg.Occupation,
		arg.Employer,
		arg.MonthlyIncome,
		arg.PreviousAddress,
		arg.References,
		arg.PetFriendly,
	)
	var i TenantProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PreferredLocations,
		&i.BudgetMin,
		&i.BudgetMax,
		&i.BedroomsMin,
		&i.BedroomsMax,
		&i.PreferredAmenities,
		&i.Occupation,
		&i.Employer,
		&i.MonthlyIncome,
		&i.PreviousAddress,
		&i.References,
		&i.PetFriendly,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
